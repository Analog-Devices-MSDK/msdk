name: simple_per_test

# Control when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test_each_board:
    # The type of runner that the job will run on
    runs-on: [self-hosted, btm-ci]
    steps:
      # Checks-out repository under $GITHUB_WORKSPACE so that each job can access it
      - uses: actions/checkout@v3
        with:
          submodules: false
          repository: Analog-Devices-MSDK/msdk
          ref: main

      - name: clean
        run: |

          # Clean up the working copy
          git scorch

          # Update the submodules, this will use ssh
          git submodule init
          git submodule sync
          git submodule update --init --recursive

          # Remove old archives
          rm -f *.zip

      - uses: actions/checkout@v3
        with:
          submodules: false
          repository: yc-adi/msdk_ci_per_tool
          ref: main
          path: msdk_ci_per_tool

      # Runs a set of commands using the runners shell
      - name: get_and_set_configurations
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

        run: |

          #------------------------------------------------
          # Get the configuration
          CONFIG_FILE=/home/$USER/Workspace/ci_config/msdk.json

          NO_SKIP=`python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['no_skip'])"`
          echo "::set-env name=NO_SKIP::${NO_SKIP}"
          echo "NO_SKIP: ${NO_SKIP}"

          DO_MAX32655=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['do_max32655'])")
          DO_MAX32665=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['do_max32665'])")
          DO_MAX32690=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['do_max32690'])")
          DO_MAX32690_WLP=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['do_max32690_wlp'])")
          echo "::set-env name=DO_MAX32655::${DO_MAX32655}"
          echo "::set-env name=DO_MAX32665::${DO_MAX32665}"
          echo "::set-env name=DO_MAX32690::${DO_MAX32690}"
          echo "::set-env name=DO_MAX32690_WLP::${DO_MAX32690_wlp}"
          echo DO_MAX32655: ${DO_MAX32655}
          echo DO_MAX32665: ${DO_MAX32665}
          echo DO_MAX32690: ${DO_MAX32690}
          echo DO_MAX32690_WLP: ${DO_MAX32690_WLP}
          echo

          MAX32655_PKG_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32655_pkglen_range'])")
          MAX32665_PKG_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32665_pkglen_range'])")
          MAX32690_PKG_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_pkglen_range'])")
          MAX32690_WLP_PKG_RA=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_wlp_pkglen_range'])")
          echo "::set-env name=MAX32655_PKG_RA::${MAX32655_PKG_RA}"
          echo "::set-env name=MAX32665_PKG_RA::${MAX32665_PKG_RA}"
          echo "::set-env name=MAX32690_PKG_RA::${MAX32690_PKG_RA}"
          echo "::set-env name=MAX32690_WLP_PKG_RA::${MAX32690_WLP_PKG_RA}"
          echo MAX32655_PKG_RA: ${MAX3255_PKG_RA}
          echo MAX32665_PKG_RA: ${MAX3265_PKG_RA}
          echo MAX32690_PKG_RA: ${MAX3290_PKG_RA}
          echo MAX32690_WLP_PKG_RA: ${MAX3290_WLP_PKG_RA}
          echo

          export MAX32655_PHY_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32655_phy_range'])")
          export MAX32665_PHY_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32665_phy_range'])")
          export MAX32690_PHY_RA=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_phy_range'])")
          export MAX32690_WLP_PHY_RA=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_wlp_phy_range'])")
          echo "::set-env name=MAX32655_PHY_RA::${MAX32655_PHY_RA}"
          echo "::set-env name=MAX32665_PHY_RA::${MAX32665_PHY_RA}"
          echo "::set-env name=MAX32690_PHY_RA::${MAX32690_PHY_RA}"
          echo "::set-env name=MAX32690_WLP_PHY_RA::${MAX32690_WLP_PHY_RA}"
          echo MAX32655_PHY_RA: ${MAX32655_PHY_RA}
          echo MAX32665_PHY_RA: ${MAX32665_PHY_RA}
          echo MAX32690_PHY_RA: ${MAX32690_PHY_RA}
          echo MAX32690_WLP_PHY_RA: ${MAX32690_WLP_PHY_RA}
          echo

          MAX32655_STEP=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32655_step'])")
          MAX32665_STEP=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32665_step'])")
          MAX32690_STEP=$(python3     -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_step'])")
          MAX32690_WLP_STEP=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['simple_per_test.yml']['max32690_wlp_step'])")
          echo "::set-env name=MAX32655_STEP::${MAX32655_STEP}"
          echo "::set-env name=MAX32665_STEP::${MAX32665_STEP}"
          echo "::set-env name=MAX32690_STEP::${MAX32690_STEP}"
          echo "::set-env name=MAX32690_WLP_STEP::${MAX32690_WLP_STEP}"
          echo MAX32655_STEP: ${MAX32655_STEP}
          echo MAX32665_STEP: ${MAX32665_STEP}
          echo MAX32690_STEP: ${MAX32690_STEP}
          echo MAX32690_WLP_STEP: ${MAX32690_WLP_STEP}
          echo 
  
      # Runs a set of commands using the runners shell
      - name: max32655_simple_per_test
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"

        run: |

          echo     DO_MAX32655: ${DO_MAX32655}
          echo MAX32655_PKG_RA: ${MAX32655_PKG_RA}          
          echo MAX32655_PHY_RA: ${MAX32655_PHY_RA}
          echo   MAX32655_STEP: ${MAX32655_STEP}
          echo 

          if [ "${DO_MAX32655}" == "0" ]; then
            exit 0
          fi

          echo "Use python 3.10.9."
          source ~/anaconda3/etc/profile.d/conda.sh
          conda activate py3_10
          python3 -c "import sys; print(sys.version)"
          echo

          BRD1=nRF52840_1
          BRD2=max32655_board_2

          RS_FILE=~/Workspace/Resource_Share/boards_config.json
          echo "The board info are stored in ${RS_FILE}."
          echo

          BRD1_DAP_SN=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD1}']['DAP_sn'])")
          echo BRD1_DAP_SN: ${BRD1_DAP_SN}
          BRD1_HCI=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD1}']['hci_id'])")
          echo BRD1_HCI: ${BRD1_HCI}
          BRD1_SW_MODEL=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD1}']['sw_model'])")
          echo BRD1_SW_MODEL: ${BRD1_SW_MODEL}
          BRD1_SW_ST=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD1}']['sw_state'])")
          echo BRD1_SW_ST: ${BRD1_SW_ST}
          echo

          BRD2_CHIP_LC=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['chip_lc'])")
          echo BRD2_CHIP_LC: ${BRD2_CHIP_LC}
          BRD2_CHIP_UC=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['chip_uc'])")
          echo BRD2_CHIP_UC: ${BRD2_CHIP_UC}
          BRD2_TYPE=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['type'])")
          echo BRD2_TYPE: ${BRD2_TYPE}
          BRD2_DAP_SN=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['DAP_sn'])")
          echo BRD2_DAP_SN: ${BRD2_DAP_SN}
          BRD2_DAP_ID=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['DAP_id'])")
          echo BRD2_DAP_ID: ${BRD2_DAP_ID}
          BRD2_HCI=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['hci_id'])")
          echo BRD2_HCI: ${BRD2_HCI}
          BRD2_CON=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['con_id'])")
          echo BRD2_CON: ${BRD2_CON}
          BRD2_SW_MODEL=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['sw_model'])")
          echo BRD2_SW_MODEL: ${BRD2_SW_MODEL}
          BRD2_SW_ST=$(python3 -c "import json; import os; obj=json.load(open('${RS_FILE}')); print(obj['${BRD2}']['sw_state'])")
          echo BRD2_SW_ST: ${BRD2_SW_ST}
          echo

          DO_IT=$DO_MAX32655
          PKG_RA=$MAX32655_PKG_RA
          PHY_RA=$MAX32655_PHY_RA
          STEP=$MAX32655_STEP

          echo "#--------------------------------------------------------------------------------------------"
          echo "# PER test on board ${BRD2}"
          echo "#--------------------------------------------------------------------------------------------"
          echo

          python3 ~/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/mc_rf_sw.txt
          python3 ~/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/${BRD1}.txt
          python3 ~/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/${BRD2}.txt

          # Lock the hardware resources
          CURR_TIME=$(date +%Y-%m-%d_%H-%M-%S)
          CURR_JOB_FILE=/home/$USER/Workspace/Resource_Share/History/msdk_simple_per_test_${CURR_TIME}_${BRD2_LC}.txt
          echo "::set-env name=CURR_JOB_FILE::${CURR_JOB_FILE}"
          echo CURR_JOB_FILE: ${CURR_JOB_FILE}
          touch ${CURR_JOB_FILE}

          CURR_LOG=/home/$USER/Workspace/Resource_Share/Logs/msdk_simple_per_test_${CURR_TIME}_${BRD2_LC}.log
          touch ${CURR_LOG}
          echo "::set-env name=CURR_LOG::${CURR_LOG}"
          echo CURR_LOG: ${CURR_LOG}

          echo /home/$USER/Workspace/Resource_Share/${BRD2}.txt  >> ${CURR_JOB_FILE}
          echo /home/$USER/Workspace/Resource_Share/${BRD1}.txt  >> ${CURR_JOB_FILE}
          echo /home/$USER/Workspace/Resource_Share/mc_rf_sw.txt >> ${CURR_JOB_FILE}

          start_time=$(date)
          start_secs=$(date +%s)
          echo `date`
          echo

          #------------------------------------------------
          echo "Disable UART assertion."
          cd $MSDK
          echo PWD: `pwd`
          echo

          set +e
          sed -i "s/ PAL_SYS_ASSERT(result3 == 0)/ \/\/PAL_SYS_ASSERT(result3 == 0)/g" Libraries/Cordio/platform/targets/maxim/max32655/sources/pal_uart.c || true
          cat Libraries/Cordio/platform/targets/maxim/max32655/sources/pal_uart.c | grep PAL_SYS_ASSERT\(result[0-3]

          echo "#--------------------------------------------------------------------------------------------"
          echo "Set the Mini-circuits RF Switches."
          set -x
          echo RF switch for ${BRD1}
          python3 $MSDK/Tools/Bluetooth/mc_rf_sw.py --model ${BRD1_SW_MODEL} --op set --state ${BRD1_SW_ST}
          echo RF switch for ${BRD2}
          python3 $MSDK/Tools/Bluetooth/mc_rf_sw.py --model ${BRD2_SW_MODEL} --op set --state ${BRD2_SW_ST}
          set +x
          echo

          echo "#--------------------------------------------------------------------------------------------"
          echo "Build the project BLE5_ctr for the 2nd board ${BRD2}"
          echo

          bash -e $MSDK/Libraries/RF-PHY-closed/.github/workflows/build_flash.sh \
              ${MSDK} \
              /home/$USER/Tools/openocd \
              ${BRD2_CHIP_UC} \
              ${BRD2_TYPE} \
              BLE5_ctr \
              ${BRD2_DAP_SN} \
              True \
              False
          set +e
          set +x
          echo

          echo "#--------------------------------------------------------------------------------------------"
          echo "Test in different packet length, PHY, attenuation, and txPower"

          i=0
          res=${RESULT_PATH}/$(date +%Y-%m-%d_%H-%M-%S)
          all_in_one=${res}_${BRD2_CHIP_LC}.csv
          echo "::set-env name=all_in_one::${all_in_one}"
          echo "packetLen,phy,atten,txPower,perMaster,perSlave" > "${all_in_one}"
          step=${STEP}

          for pkt_len in ${PKG_RA}
          do
              for phy in ${PHY_RA}
              do
                  echo "---------------------------------------------------------------------------------------------"
                  echo "Next turn: pkt_len ${pkt_len}, phy ${phy}"

                  echo "Program or reset the board ${BRD2}."
                  if [[ $i -eq 0 ]]; then
                      echo "Flash the board."            
                      bash -e $MSDK/Libraries/RF-PHY-closed/.github/workflows/build_flash.sh \
                          ${MSDK} \
                          /home/$USER/Tools/openocd \
                          ${BRD2_CHIP_UC} \
                          ${BRD2_TYPE} \
                          BLE5_ctr \
                          ${BRD2_DAP_SN} \
                          False \
                          True
                      
                      echo "Sleep 5 secs."
                      sleep 5
                      echo "Continue the test."
                      echo
                  else
                      echo "Reset the board ${BRD1}"
                      set -x
                      nrfjprog --family nrf52 -sn ${BRD1_DAP_SN} --debugreset
                      set +x

                      echo "Hard reset the board ${BRD2}."
                      bash -ex $MSDK/Libraries/RF-PHY-closed/.github/workflows/hard_reset.sh ${BRD2_CHIP_LC}.cfg ${BRD2_DAP_SN} $(realpath ${MSDK}/Examples/${BRD2_CHIP_UC}/BLE5_ctr/build/${BRD2_CHIP_LC}.elf)
                      set +e
                      set +x
                  fi

                  # Run the PER test
                  res_files[i]=${res}_${BRD2_CHIP_LC}_${i}.csv
                  echo The test results will be saved in file ${res_files[i]}.

                  slv_ser=${BRD2_HCI}
                  mst_ser=${BRD1_HCI}
                  
                  set -x
                  python3 $MSDK/Tools/Bluetooth/conn_sweep.py ${slv_ser} ${mst_ser} ${res_files[i]} \
                      --stp ${BRD2_CON} --pktlen ${pkt_len} --phys ${phy} --step ${step} 2>&1 | tee -a ${CURR_LOG}
                  set +x

                  echo "cat ${res_files[i]}"
                  cat "${res_files[i]}"

                  cat "${res_files[i]}" >> "${all_in_one}"  # put all results into one file

                  i=$((i+1))
              done
          done

          # Reset the boards to end the TX
          python3 $MSDK/Tools/Bluetooth/BLE_hci.py ${BRD2_HCI} -c "reset; exit"
          python3 $MSDK/Tools/Bluetooth/BLE_hci.py ${BRD1_HCI} -c "reset; exit"

          echo $(date)
          echo "Started at ${start_time}"
          end_secs=$(date +%s)
          exe_time=$((end_secs - start_secs))
          echo

          echo "MAX32665 test is completed."
          echo "#--------------------------------------------------------------------------------------------"
          echo "cat ${all_in_one}"
          cat "${all_in_one}"
          echo

      # Unlock even when cancelled or failed
      - name: unlock_max32655
        if: always()
        run: |

          cd ${GITHUB_WORKSPACE}
          echo PWD: `pwd`
          echo

          chmod u+x ${GITHUB_WORKSPACE}/.github/workflows/scripts/unlock_plot.sh
          ${GITHUB_WORKSPACE}/.github/workflows/scripts/unlock_plot.sh ${GITHUB_WORKSPACE} ${CURR_JOB_FILE} ${all_in_one} 2>&1 | tee -a ${CURR_LOG}


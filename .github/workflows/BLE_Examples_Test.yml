name: BLE Examples Test

# Cancels workflows in progress that are in the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: ["main"]
    types: [opened, reopened, synchronize, ready_for_review] # When to run the workflow on PR

    paths-ignore:
      # Any files in a docs directory anywhere in the repository.
      - "**/docs/**"
      - "**/Documentation/**"
      # Any README.md file anywhere in the repository.
      - "**/README.md"
      # Any .pdf file anywhere in the repository.
      - "**/*.pdf"
      # Any .yml file anywhere in the repository.
      # can comment this out when testing changes to THIS yml file
      - "**/*.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  LOCK_MAX32655: false
  LOCK_MAX32665: false
  LOCK_MAX32690: false
  # TODO WLP

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  TEST_BLE_Devices:
    # The type of runner that the job will run on
    runs-on: [self-hosted, btm-ci]
    if: github.event.pull_request.draft == false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Clean and remove any local modifications
      - name: Clean
        continue-on-error: true
        run: |
          # Remove local modifications
          set +e

          # Attempt to clean the repo
          #git scorch
          retval=$?

          # Remove everything if this fails
          if [[ $retval -ne 0 ]]
          then
            rm -rf *
          fi

          set -e
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 0

      # ME17
      - name: Check MAX32655 #name used for display purposes on github webpage
        id: MAX32655 #id used to reference this step in other parts of the yml
        env:
          MAX32655_BLE_FILES_CHANGED: false
          MAX32655_EXAMPLES_TO_TEST: false
          MAX32655_RUN_ALL_TEST: false
          MAX32655_DATS_CONNETED_TEST: false
          MAX32655_OTAS_CONNETED_TEST: false
        run: |

          declare -a watched_examples=(
              # underscore is to ignore the BLE5_ctr examples
              Examples/MAX32655/BLE_*
              Examples/MAX32655/Bootloader
          )
          # Check for changes made to these files
          # Directories to watch
          declare -a watched_other=(
              .github/workflows/ci-tests/Examples_tests
              Libraries/libs.mk
              Libraries/Cordio
              Libraries/CMSIS/Device/Maxim/MAX32655
              Libraries/PeriphDrivers/libPeriphDriver.mk
              Libraries/PeriphDrivers/periphdriver.mk
              Libraries/PeriphDrivers/max32655_files.mk
              Libraries/PeriphDrivers/Source
              Libraries/PeriphDrivers/Include/MAX32655
              Libraries/BlePhy/MAX32655
              Libraries/Boards/MAX32655)

          # Directories to ignore
          declare -a ignored=(
              Libraries/Cordio/docs
              Documentation

          )

          # Create an associative array for ignored()
          declare -A aignored=()
          for ignore in "${ignored[@]}"; do aignored["${ignore%/}"]=1; done

          # Copy the working directory list, skipping entries in ignored()
          declare -a results_other=()
          for watch in "${watched_other[@]}"; do test -v aignored["${watch%/}"] || results_other+=("${watch%/}"); done

          # Copy the working directory list, skipping entries in ignored()
          declare -a results_examples=()
          for watch in "${watched_examples[@]}"; do test -v aignored["${watch%/}"] || results_examples+=("${watch%/}"); done

          # Print the resulting array, separated by newlines, in sorted order
          printf "\r\n-------- Watched Examples ------------\r\n\r\n"
          printf '%s\n' "${results_examples[@]}" | sort
          printf "\r\n-----------------------------------\r\n"

          # Print the resulting array, separated by newlines, in sorted order
          printf "\r\n-------- Watched Other ------------\r\n\r\n"
          printf '%s\n' "${results_other[@]}" | sort
          printf "\r\n-----------------------------------\r\n"

          #Get the diff from main
          CHANGE_FILES=$(git diff --ignore-submodules --name-only remotes/origin/main)
          # Assume we want to actually run the workflow if no files changed
          if [[ "$CHANGE_FILES" != "" ]]; then
              for watch_file in "${results_other[@]}"; do
                  if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                      # TODO this needs to be an env variable
                      echo "MAX32655_RUN_ALL_TEST=true" >> $GITHUB_ENV
                      echo "Enabled all tests to run because of $watch_file"
                      
                  fi
              done
              for watch_file in "${results_examples[@]}"; do
                  if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                      # TODO this needs to be an env variable
                      echo "MAX32655_BLE_FILES_CHANGED=true" >> $GITHUB_ENV
                      example_to_test=$(basename "$watch_file")
                      # Add new element at the end of the array
                      examples_list+=($example_to_test)
                      echo "Enabled example tests to run because of $watch_file"

                  fi
              done
              echo 'MAX32655_EXAMPLES_TO_TEST=(${examples_list[@]})' >> $GITHUB_ENV
          else
              # Assume we want to actually run the workflow if no files changed
              #echo "MAX32655_RUN_ALL_TEST=true" >> $GITHUB_ENV
              echo "here we set it to run all test even if now files changed"
          fi
          #-----------------------------------------------------------------------

      - name: Lock MAX32655 B1
        if: env.MAX32655_RUN_ALL_TEST == 'true' || env.MAX32655_BLE_FILES_CHANGED == 'true'
        id: lock_max32655_b1
        run: |
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 max32655_board1

      - name: Test MAX32655 #name used for display purposes on github webpage
        if: steps.lock_max32655_b1.outcome == 'success'
        id: Test_MAX32655 #id used to reference this step in other parts of the yml
        run: |
          FILE=/home/$USER/Workspace/Resource_Share/boards_config.json
          dut_uart=$(/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32655_board2']['uart0'])")
          dut_serial=$(/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32655_board2']['daplink'])")
          echo
          echo
          echo "Examples to be tested : ${MAX32655_EXAMPLES_TO_TEST[@]}"
          echo
          echo

          if [[ $MAX32655_RUN_ALL_TEST == 'true' ]]; then
              echo "Running ALL MAX32655 Test : $MAX32655_RUN_ALL_TEST "
              #***************** uncomment actual test here *************
              #./new_test_launcher.sh max32655 $dut_uart $dut_serial "all"
          else
              if [[ $MAX32655_BLE_FILES_CHANGED == 'true' ]]; then
                  cd .github/workflows/scripts
                  for example in "${MAX32655_EXAMPLES_TO_TEST[@]}"; do
                      echo ">> Running $example test on MAX32655"
                      
                      # launch single tests
                      echo "Testing example: $example"
                      set +e
                      #***************** uncomment actual test here *************
                      #./new_test_launcher.sh max32655 $dut_uart $dut_serial $example
                      let "testResult=$?"
                      if [ "$testResult" -ne "0" ]; then
                          # update failed test count
                          let "numOfFailedTests+=$testResult"
                          failedTestList+="| $example"
                      fi
                      set -e

                      # if needed enable connected state tests
                      if [[ $example == "BLE_dats" ]] || [[ $example == "BLE_datc" ]]; then
                          echo "MAX32655_DATS_CONNETED_TEST=1" >> $GITHUB_ENV
                      fi
                      if [[ $example == "BLE_otas" ]] || [[ $example == "BLE_otac" ]]; then
                          echo "MAX32655_OTAS_CONNETED_TEST=1" >> $GITHUB_ENV
                      fi
                  done

                  # connected tests
                  if [[ $MAX32655_DATS_CONNETED_TEST == 'true' ]]; then
                      #conencted test launcher
                      echo "Testing MAX32655_DATS_CONNETED_TEST"
                      set +e
                      #***************** uncomment actual test here *************
                      #./new_test_launcher.sh max32655 $dut_uart $dut_serial "dats"
                      let "testResult=$?"
                      if [ "$testResult" -ne "0" ]; then
                          # update failed_test count
                          let "numOfFailedTests+=$testResult"
                          failedTestList+="| MAX32655 Dats/c"
                      fi
                      set -e

                  fi
                  if [[ $MAX32655_OTAS_CONNETED_TEST == 'true' ]]; then
                      #conencted test launcher
                      echo "Testing MAX32655_OTAS_CONNETED_TEST"
                      set +e
                      #call test here
                      #***************** uncomment actual test here *************
                      #./new_test_launcher.sh max32655 $dut_uart $dut_serial "ota"
                      let "testResult=$?"
                      if [ "$testResult" -ne "0" ]; then
                          # update failed test count
                          let "numOfFailedTests+=$testResult"
                          failedTestList+="| MAX32655 OTAS/C"
                      fi
                      set -e
                  fi
              else
                  echo "Skipping all tests"
              fi
          fi

          if [[ $numOfFailedTests -ne 0 ]]; then
              printf "Test completed with $numOfFailedTests failed tests located in: \r\n $failedTestList"
          else
              echo "Relax! ALL TESTS PASSED"
          fi
          echo
          echo "=============================================================================="
          echo "=============================================================================="
          echo
          exit $numOfFailedTests

      - name: Unlock MAX32655 B1
        if: ${{ always() && steps.lock_max32655_b1.outcome == 'success'}}
        run: |
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py max32655_board1

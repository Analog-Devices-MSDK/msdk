name: BLE Examples Test

# Cancels workflows in progress that are in the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: ["main"]
    types: [opened, reopened, synchronize, ready_for_review] # When to run the workflow on PR

    paths-ignore:
      # Any files in a docs directory anywhere in the repository.
      - "**/docs/**"
      - "**/Documentation/**"
      # Any README.md file anywhere in the repository.
      - "**/README.md"
      # Any .pdf file anywhere in the repository.
      - "**/*.pdf"
      # Any .yml file anywhere in the repository.
      # can comment this out when testing changes to THIS yml file
      - "**/*.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  TEST_MAX32655: false
  TEST_MAX32665: false
  TEST_MAX32690: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  TEST_BLE_Devices:
    # The type of runner that the job will run on
    runs-on: [self-hosted, btm-ci]
    if: github.event.pull_request.draft == false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Clean and remove any local modifications
      - name: Clean
        continue-on-error: true
        run: |
          # Remove local modifications
          set +e

          # Attempt to clean the repo
          git scorch
          retval=$?

          # Remove everything if this fails
          if [[ $retval -ne 0 ]]
          then
            rm -rf *
          fi

          set -e
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: 0

      - name: debug
        if: ${{ always() }}
        run: |

          cat .gitmodules

      # ME17 : check if changed files warrants a ME17 BLE App. functional test
      - name: Check MAX32655 #name used for display purposes on github webpage
        id: MAX32655 #id used to reference this step in other parts of the yml
        run: |

          # Remove local modifications
          git scorch

          BLE_FILES_CHANGED=0
          RUN_TEST=0

          # Check for changes made to these files
          WATCH_FILES="\
          .github/workflows/ci-tests/Examples_tests \
          Examples/MAX32655/BLE \
          Examples/MAX32655/Bootloader \
          Libraries/libs.mk \
          Libraries/Cordio \
          Libraries/CMSIS/Device/Maxim/MAX32655 \
          Libraries/PeriphDrivers/libPeriphDriver.mk \
          Libraries/PeriphDrivers/periphdriver.mk \
          Libraries/PeriphDrivers/max32655_files.mk \
          Libraries/PeriphDrivers/Source \
          Libraries/PeriphDrivers/Include/MAX32655 \
          Libraries/BlePhy/MAX32655 \
          Libraries/Boards/MAX32655"

          # Get the diff from main
          CHANGE_FILES=$(git diff --ignore-submodules --name-only remotes/origin/main)

          echo "Watching these locations and files"
          echo $WATCH_FILES

          echo "Checking the following changes"
          echo $CHANGE_FILES

          # Assume we want to actually run the workflow if no files changed
          if [[ "$CHANGE_FILES" != "" ]]; then
            for watch_file in $WATCH_FILES; do 
              if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                BLE_FILES_CHANGED=1
                RUN_TEST=1
              fi
            done
            if [[ $BLE_FILES_CHANGED -eq 0 ]]
            then
              echo "Skipping MAX32655 Test"
              # Files were changed but not in MAX32655
              RUN_TEST=0
            fi
          else 
          # Assume we want to actually run the workflow if no files changed
            RUN_TEST=1
          fi
          # save result to env varaibles
          if [[ $RUN_TEST -eq 1 ]]
          then
            echo "TEST_MAX32655=true" >> $GITHUB_ENV
          fi

      # ME14
      - name: Check MAX32665 #name used for display purposes on github webpage
        id: MAX32665 #id used to reference this step in other parts of the yml
        run: |
          # Remove local modifications
          git scorch

          BLE_FILES_CHANGED=0
          RUN_TEST=0

          # Check for changes made to these files
          WATCH_FILES="\
          .github/workflows/ci-tests/Examples_tests \
          Examples/MAX32665/BLE \
          Examples/MAX32665/Bootloader \
          Libraries/libs.mk \
          Libraries/Cordio \
          Libraries/CMSIS/Device/Maxim/MAX32665 \
          Libraries/PeriphDrivers/libPeriphDriver.mk \
          Libraries/PeriphDrivers/periphdriver.mk \
          Libraries/PeriphDrivers/max32665_files.mk \
          Libraries/PeriphDrivers/Source \
          Libraries/PeriphDrivers/Include/MAX32665 \
          Libraries/BlePhy/MAX32665 \
          Libraries/Boards/MAX32665"

          # Get the diff from main
          CHANGE_FILES=$(git diff --ignore-submodules --name-only remotes/origin/main)

          echo "Watching these locations and files"
          echo $WATCH_FILES

          echo "Checking the following changes"
          echo $CHANGE_FILES

          # Assume we want to actually run the workflow if no files changed
          if [[ "$CHANGE_FILES" != "" ]]; then
            for watch_file in $WATCH_FILES; do 
              if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                BLE_FILES_CHANGED=1
                RUN_TEST=1
              fi
            done
            if [[ $BLE_FILES_CHANGED -eq 0 ]]
            then
              echo "Skipping MAX32665 Test"
              # Files were changed but not in MAX32665
              RUN_TEST=0
            fi
          else 
            RUN_TEST=1
          fi

          # save result to env variables
          if [[ $RUN_TEST -eq 1 ]]
          then
            echo "TEST_MAX32665=true" >> $GITHUB_ENV
          fi
      # ME18
      - name: Check MAX32690 #name used for display purposes on github webpage
        id: MAX32690 #id used to reference this step in other parts of the yml
        run: |
          # Remove local modifications
          git scorch

          BLE_FILES_CHANGED=0
          RUN_TEST=0
          # Check for changes made to these files
          WATCH_FILES="\
          .github/workflows/ci-tests/Examples_tests \
          Examples/MAX32690/BLE \
          Examples/MAX32690/Bootloader \
          Libraries/libs.mk \
          Libraries/Cordio \
          Libraries/CMSIS/Device/Maxim/MAX32690 \
          Libraries/PeriphDrivers/libPeriphDriver.mk \
          Libraries/PeriphDrivers/periphdriver.mk \
          Libraries/PeriphDrivers/max32690_files.mk \
          Libraries/PeriphDrivers/Source \
          Libraries/PeriphDrivers/Include/MAX32690 \
          Libraries/BlePhy/MAX32690 \
          Libraries/Boards/MAX32690"

          # Get the diff from main
          CHANGE_FILES=$(git diff --ignore-submodules --name-only remotes/origin/main)

          echo "Watching these locations and files"
          echo $WATCH_FILES

          echo "Checking the following changes"
          echo $CHANGE_FILES

          # Assume we want to actually run the workflow if no files changed
          if [[ "$CHANGE_FILES" != "" ]]; then
            for watch_file in $WATCH_FILES; do 
              if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                BLE_FILES_CHANGED=1
                RUN_TEST=1
              fi
            done
            if [[ $BLE_FILES_CHANGED -eq 0 ]]
            then
              echo "Skipping MAX32690 Test"
              # Files were changed but not in MAX32690
              RUN_TEST=0
            fi
          else 
            RUN_TEST=1
          fi

          # save result to env variables
          if [[ $RUN_TEST -eq 1 ]]
          then
            echo "TEST_MAX32690=true" >> $GITHUB_ENV
          fi

      - name: LOCK_BOARDS #name used for display purposes on github webpage
        if: env.TEST_MAX32655 == 'true' || env.TEST_MAX32665 == 'true' || env.TEST_MAX32690 == 'true'
        id: LOCK_BOARDS #id used to reference this step in other parts of the yml
        run: |
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 max32655_board1
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 max32655_board2
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 max32665_board1
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 max32690_board_w1

      - name: Test MAX32655 #name used for display purposes on github webpage
        if: steps.LOCK_BOARDS.outcome == 'success' && env.TEST_MAX32655 == 'true'
        id: Test_MAX32655 #id used to reference this step in other parts of the yml
        run: |
          echo "Running Test on MAX32655"
          echo $env.TEST_MAX32655
          echo $TEST_MAX32655

          cd .github/workflows/scripts
          chmod +x test_launcher.sh
          FILE=/home/$USER/Workspace/Resource_Share/boards_config.json
          dut_uart=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32655_board2']['uart0'])"`
          dut_serial=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32655_board2']['daplink'])"`
          #./test_launcher.sh max32655 $dut_uart $dut_serial

      - name: Test MAX32665 #name used for display purposes on github webpage
        if: steps.LOCK_BOARDS.outcome == 'success' && env.TEST_MAX32665 == 'true'
        id: Test_MAX32665 #id used to reference this step in other parts of the yml
        run: |
          echo "Running Test on MAX32665"
          echo $env.TEST_MAX32665
          echo $TEST_MAX32665
          cd .github/workflows/scripts
          chmod +x test_launcher.sh
          FILE=/home/$USER/Workspace/Resource_Share/boards_config.json
          dut_uart=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32665_board1']['uart1'])"`
          dut_serial=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32665_board1']['daplink'])"`
          #./test_launcher.sh max32665 $dut_uart $dut_serial

      - name: Test MAX32690 #name used for display purposes on github webpage
        if: steps.LOCK_BOARDS.outcome == 'success' && env.TEST_MAX32690 == 'true'
        id: Test_MAX32690 #id used to reference this step in other parts of the yml
        run: |
          echo "Running Test on MAX32690"
          echo $env.TEST_MAX32690
          echo $TEST_MAX32690
          cd .github/workflows/scripts
          chmod +x test_launcher.sh
          FILE=/home/$USER/Workspace/Resource_Share/boards_config.json
          dut_uart=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32690_board_w1']['uart2'])"`
          dut_serial=`/usr/bin/python3 -c "import sys, json; print(json.load(open('$FILE'))['max32690_board_w1']['daplink'])"`
          #./test_launcher.sh max32690 $dut_uart $dut_serial

      # Unlock even when cancelled or failed
      # This needs some work, if the job is cancelled or times out because it could not get a LOCK
      # it then jumps here and removes all locks, that were set by a different job
      - name: Unlock All Boards
        if: ${{ always() && steps.LOCK_BOARDS.outcome == 'success' }}
        run: |
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py max32655_board1
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py max32655_board2
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py max32665_board1
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py max32690_board_w1

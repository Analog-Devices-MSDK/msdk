<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\BLE_datc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\BLE_datc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jan 11 16:46:34 2022
<BR><P>
<H3>Maximum Stack Usage =        844 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
smpiScActOobProcRand &rArr; smpScActCalcSharedSecret &rArr; SecEccGenSharedSecret &rArr; HciLeGenerateDHKey &rArr; LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[14]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">HardFault_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[1a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">PendSV_Handler</a><BR>
 <LI><a href="#[30]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7d]">AES_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[e4]">AppHandler</a> from app_main.o(i.AppHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[e2]">AttHandler</a> from att_main.o(i.AttHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[4b]">BTLE_AGC_EVENT_IRQHandler</a> from dbb_intc.o(i.BTLE_AGC_EVENT_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[49]">BTLE_CFO_IRQHandler</a> from dbb_intc.o(i.BTLE_CFO_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[48]">BTLE_GP_EVENT_IRQHandler</a> from dbb_intc.o(i.BTLE_GP_EVENT_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[4f]">BTLE_INV_APB_ADDR_IRQHandler</a> from dbb_intc.o(i.BTLE_INV_APB_ADDR_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[50]">BTLE_IQ_DATA_VALID_IRQHandler</a> from dbb_intc.o(i.BTLE_IQ_DATA_VALID_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[4c]">BTLE_RFFE_SPIM_IRQHandler</a> from dbb_intc.o(i.BTLE_RFFE_SPIM_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[4e]">BTLE_RX_AES_IRQHandler</a> from dbb_intc.o(i.BTLE_RX_AES_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[45]">BTLE_RX_ENG_DET_IRQHandler</a> from dbb_intc.o(i.BTLE_RX_ENG_DET_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[44]">BTLE_RX_RCVD_IRQHandler</a> from dbb_intc.o(i.BTLE_RX_RCVD_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[46]">BTLE_SFD_DET_IRQHandler</a> from dbb_intc.o(i.BTLE_SFD_DET_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[47]">BTLE_SFD_TO_IRQHandler</a> from dbb_intc.o(i.BTLE_SFD_TO_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[4a]">BTLE_SIG_DET_IRQHandler</a> from dbb_intc.o(i.BTLE_SIG_DET_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[4d]">BTLE_TX_AES_IRQHandler</a> from dbb_intc.o(i.BTLE_TX_AES_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[43]">BTLE_TX_DONE_IRQHandler</a> from dbb_intc.o(i.BTLE_TX_DONE_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[16]">BusFault_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7e]">CRC_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[38]">DMA0_IRQHandler</a> from pal_sys.o(i.DMA0_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[39]">DMA1_IRQHandler</a> from pal_sys.o(i.DMA1_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3a]">DMA2_IRQHandler</a> from pal_sys.o(i.DMA2_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3b]">DMA3_IRQHandler</a> from pal_sys.o(i.DMA3_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[6f]">DVS_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[e5]">DatcHandler</a> from datc_main.o(i.DatcHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[e1]">DmHandler</a> from dm_main.o(i.DmHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[6e]">ECC_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[33]">FLC0_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[34]">GPIO0_IRQHandler</a> from pb.o(i.GPIO0_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[35]">GPIO1_IRQHandler</a> from pb.o(i.GPIO1_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[36]">GPIO2_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[52]">GPIOWAKE_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[e0]">HciHandler</a> from hci_main.o(i.HciHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[29]">I2C0_IRQHandler</a> from pal_twi.o(i.I2C0_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[40]">I2C1_IRQHandler</a> from pal_twi.o(i.I2C1_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[5a]">I2C2_IRQHandler</a> from pal_twi.o(i.I2C2_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7f]">I2S_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[ce]">LlHandler</a> from ll_init.o(i.LlHandler) referenced from init.o(i.LlInitLlInit)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from board.o(i.NMI_Handler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[5f]">OWM_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[117]">PB_Handler_1</a> from main.o(i.PB_Handler_1) referenced from main.o(i.main)
 <LI><a href="#[118]">PB_Handler_2</a> from main.o(i.PB_Handler_2) referenced from main.o(i.main)
 <LI><a href="#[1c]">PF_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[57]">PT_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[ad]">PalCryptoAesEnable</a> from pal_bb_ble.o(i.PalCryptoAesEnable) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[ad]">PalCryptoAesEnable</a> from pal_bb_ble.o(i.PalCryptoAesEnable) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[af]">PalCryptoSetDecryptPacketCount</a> from pal_bb_ble.o(i.PalCryptoSetDecryptPacketCount) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[af]">PalCryptoSetDecryptPacketCount</a> from pal_bb_ble.o(i.PalCryptoSetDecryptPacketCount) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[ae]">PalCryptoSetEncryptPacketCount</a> from pal_bb_ble.o(i.PalCryptoSetEncryptPacketCount) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[ae]">PalCryptoSetEncryptPacketCount</a> from pal_bb_ble.o(i.PalCryptoSetEncryptPacketCount) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[1a]">PendSV_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[81]">PreInit</a> from system_max32655.o(i.PreInit) referenced from startup_max32655.o(.text)
 <LI><a href="#[5b]">RISCV_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[1e]">RSV02_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[27]">RSV11_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[28]">RSV12_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[2d]">RSV17_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[2e]">RSV18_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[2f]">RSV19_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[31]">RSV21_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[32]">RSV22_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[37]">RSV27_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3c]">RSV32_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3d]">RSV33_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3f]">RSV35_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[41]">RSV37_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[42]">RSV38_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[53]">RSV55_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[56]">RSV57_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[58]">RSV59_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[59]">RSV61_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[5c]">RSV64_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[5d]">RSV65_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[5e]">RSV66_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[60]">RSV68_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[61]">RSV69_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[62]">RSV70_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[63]">RSV71_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[64]">RSV72_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[65]">RSV73_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[66]">RSV74_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[67]">RSV75_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[68]">RSV76_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[69]">RSV77_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[6a]">RSV78_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[6b]">RSV79_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[6c]">RSV80_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[6d]">RSV81_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[71]">RSV85_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[72]">RSV86_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[73]">RSV87_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[75]">RSV89_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[76]">RSV90_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[77]">RSV91_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[78]">RSV92_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[79]">RSV93_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7a]">RSV94_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7b]">RSV95_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[7c]">RSV96_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[70]">SIMO_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[54]">SPI0_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[cf]">SchHandler</a> from sch_main.o(i.SchHandler) referenced from init.o(i.LlInitSchInit)
 <LI><a href="#[d5]">SecAesHciCback</a> from sec_aes.o(i.SecAesHciCback) referenced from sec_aes.o(i.SecAesInit)
 <LI><a href="#[d6]">SecCmacHciCback</a> from sec_cmac_hci.o(i.SecCmacHciCback) referenced from sec_cmac_hci.o(i.SecCmacInit)
 <LI><a href="#[d7]">SecEccHciCback</a> from sec_ecc_hci.o(i.SecEccHciCback) referenced from sec_ecc_hci.o(i.SecEccInit)
 <LI><a href="#[e3]">SmpHandler</a> from smp_main.o(i.SmpHandler) referenced from stack_datc.o(i.StackInitDatc)
 <LI><a href="#[1b]">SysTick_Handler</a> from mxc_delay.o(i.SysTick_Handler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[21]">TMR0_IRQHandler</a> from pal_timer.o(i.TMR0_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[22]">TMR1_IRQHandler</a> from pal_timer.o(i.TMR1_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[23]">TMR2_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[24]">TMR3_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[25]">TMR4_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[26]">TMR5_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[20]">TRNG_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[86]">TerminalHandler</a> from terminal.o(i.TerminalHandler) referenced from app_terminal.o(i.AppTerminalInit)
 <LI><a href="#[84]">TerminalRx</a> from terminal.o(i.TerminalRx) referenced from app_terminal.o(i.AppTerminalInit)
 <LI><a href="#[2a]">UART0_IRQHandler</a> from pal_uart.o(i.UART0_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from pal_uart.o(i.UART1_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[3e]">UART2_IRQHandler</a> from pal_uart.o(i.UART2_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[74]">UART3_IRQHandler</a> from pal_uart.o(i.UART3_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[1d]">WDT0_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[55]">WDT1_IRQHandler</a> from startup_max32655.o(.text) referenced from startup_max32655.o(RESET)
 <LI><a href="#[51]">WUT_IRQHandler</a> from pal_rtc.o(i.WUT_IRQHandler) referenced from startup_max32655.o(RESET)
 <LI><a href="#[85]">WsfBufIoWrite</a> from wsf_bufio.o(i.WsfBufIoWrite) referenced from app_terminal.o(i.AppTerminalInit)
 <LI><a href="#[85]">WsfBufIoWrite</a> from wsf_bufio.o(i.WsfBufIoWrite) referenced from main.o(i.mainWsfInit)
 <LI><a href="#[82]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_max32655.o(.text)
 <LI><a href="#[83]">appMasterProcMsg</a> from app_master.o(i.appMasterProcMsg) referenced from app_master.o(i.AppMasterInit)
 <LI><a href="#[d]">appTerminalCommandBtnHandler</a> from app_terminal.o(i.appTerminalCommandBtnHandler) referenced 2 times from app_terminal.o(.data)
 <LI><a href="#[e]">appTerminalPinCodeHandler</a> from app_terminal.o(i.appTerminalPinCodeHandler) referenced 2 times from app_terminal.o(.data)
 <LI><a href="#[89]">attDmConnCback</a> from att_main.o(i.attDmConnCback) referenced from att_main.o(i.AttHandlerInit)
 <LI><a href="#[11a]">attEmptyConnCback</a> from att_main.o(i.attEmptyConnCback) referenced 2 times from att_main.o(.constdata)
 <LI><a href="#[119]">attEmptyDataCback</a> from att_main.o(i.attEmptyDataCback) referenced 2 times from att_main.o(.constdata)
 <LI><a href="#[8a]">attEmptyHandler</a> from att_main.o(i.attEmptyHandler) referenced 3 times from att_main.o(.constdata)
 <LI><a href="#[8a]">attEmptyHandler</a> from att_main.o(i.attEmptyHandler) referenced from atts_main.o(i.AttsInit)
 <LI><a href="#[11b]">attEmptyL2cCocCback</a> from att_main.o(i.attEmptyL2cCocCback) referenced 2 times from att_main.o(.constdata)
 <LI><a href="#[87]">attL2cCtrlCback</a> from att_main.o(i.attL2cCtrlCback) referenced from att_main.o(i.AttHandlerInit)
 <LI><a href="#[88]">attL2cDataCback</a> from att_main.o(i.attL2cDataCback) referenced from att_main.o(i.AttHandlerInit)
 <LI><a href="#[11f]">attcConnCback</a> from attc_main.o(i.attcConnCback) referenced from attc_main.o(.constdata)
 <LI><a href="#[11d]">attcCtrlCback</a> from attc_main.o(i.attcCtrlCback) referenced from attc_main.o(.constdata)
 <LI><a href="#[11c]">attcDataCback</a> from attc_main.o(i.attcDataCback) referenced from attc_main.o(.constdata)
 <LI><a href="#[11e]">attcMsgCback</a> from attc_main.o(i.attcMsgCback) referenced from attc_main.o(.constdata)
 <LI><a href="#[125]">attcProcErrRsp</a> from attc_proc.o(i.attcProcErrRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[128]">attcProcFindByTypeRsp</a> from attc_read.o(i.attcProcFindByTypeRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[127]">attcProcFindOrReadRsp</a> from attc_proc.o(i.attcProcFindOrReadRsp) referenced 3 times from attc_proc.o(.constdata)
 <LI><a href="#[126]">attcProcMtuRsp</a> from attc_proc.o(i.attcProcMtuRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[12c]">attcProcPrepWriteRsp</a> from attc_write.o(i.attcProcPrepWriteRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[12a]">attcProcReadLongRsp</a> from attc_read.o(i.attcProcReadLongRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[12d]">attcProcReadMultVarRsp</a> from attc_proc.o(i.attcProcReadMultVarRsp) referenced from attc_proc.o(.constdata)
 <LI><a href="#[129]">attcProcReadRsp</a> from attc_proc.o(i.attcProcReadRsp) referenced 2 times from attc_proc.o(.constdata)
 <LI><a href="#[12b]">attcProcWriteRsp</a> from attc_proc.o(i.attcProcWriteRsp) referenced 2 times from attc_proc.o(.constdata)
 <LI><a href="#[121]">attcSendContinuingReq</a> from attc_main.o(i.attcSendContinuingReq) referenced 5 times from attc_main.o(.constdata)
 <LI><a href="#[120]">attcSendMtuReq</a> from attc_main.o(i.attcSendMtuReq) referenced from attc_main.o(.constdata)
 <LI><a href="#[124]">attcSendPrepWriteReq</a> from attc_main.o(i.attcSendPrepWriteReq) referenced from attc_main.o(.constdata)
 <LI><a href="#[122]">attcSendSimpleReq</a> from attc_main.o(i.attcSendSimpleReq) referenced 5 times from attc_main.o(.constdata)
 <LI><a href="#[123]">attcSendWriteCmd</a> from attc_main.o(i.attcSendWriteCmd) referenced from attc_main.o(.constdata)
 <LI><a href="#[134]">attsConnCback</a> from atts_main.o(i.attsConnCback) referenced from atts_main.o(.constdata)
 <LI><a href="#[131]">attsDataCback</a> from atts_main.o(i.attsDataCback) referenced from atts_main.o(.constdata)
 <LI><a href="#[130]">attsIndConnCback</a> from atts_ind.o(i.attsIndConnCback) referenced from atts_ind.o(.constdata)
 <LI><a href="#[12e]">attsIndCtrlCback</a> from atts_ind.o(i.attsIndCtrlCback) referenced from atts_ind.o(.constdata)
 <LI><a href="#[12f]">attsIndMsgCback</a> from atts_ind.o(i.attsIndMsgCback) referenced from atts_ind.o(.constdata)
 <LI><a href="#[132]">attsL2cCtrlCback</a> from atts_main.o(i.attsL2cCtrlCback) referenced from atts_main.o(.constdata)
 <LI><a href="#[133]">attsMsgCback</a> from atts_main.o(i.attsMsgCback) referenced from atts_main.o(.constdata)
 <LI><a href="#[a]">attsProcExecWriteReq</a> from atts_write.o(i.attsProcExecWriteReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[1]">attsProcFindInfoReq</a> from atts_proc.o(i.attsProcFindInfoReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[2]">attsProcFindTypeReq</a> from atts_read.o(i.attsProcFindTypeReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[0]">attsProcMtuReq</a> from atts_proc.o(i.attsProcMtuReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[9]">attsProcPrepWriteReq</a> from atts_write.o(i.attsProcPrepWriteReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[5]">attsProcReadBlobReq</a> from atts_read.o(i.attsProcReadBlobReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[7]">attsProcReadGroupTypeReq</a> from atts_read.o(i.attsProcReadGroupTypeReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[6]">attsProcReadMultReq</a> from atts_read.o(i.attsProcReadMultReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[c]">attsProcReadMultiVarReq</a> from atts_proc.o(i.attsProcReadMultiVarReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[4]">attsProcReadReq</a> from atts_proc.o(i.attsProcReadReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[3]">attsProcReadTypeReq</a> from atts_read.o(i.attsProcReadTypeReq) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[b]">attsProcValueCnf</a> from atts_ind.o(i.attsProcValueCnf) referenced 2 times from atts_main.o(.data)
 <LI><a href="#[8]">attsProcWrite</a> from atts_write.o(i.attsProcWrite) referenced 4 times from atts_main.o(.data)
 <LI><a href="#[93]">bbBleCancelOp</a> from bb_ble_main.o(i.bbBleCancelOp) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[94]">bbBleExecOp</a> from bb_ble_main.o(i.bbBleExecOp) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[98]">bbBleLowPower</a> from bb_ble_main.o(i.bbBleLowPower) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[92]">bbBleStartBle</a> from bb_ble_main.o(i.bbBleStartBle) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[95]">bbBleStartBleDtm</a> from bb_ble_main.o(i.bbBleStartBleDtm) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[97]">bbBleStartPrbs15</a> from bb_ble_main.o(i.bbBleStartPrbs15) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[91]">bbBleStopBle</a> from bb_ble_main.o(i.bbBleStopBle) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[96]">bbBleStopPrbs15</a> from bb_ble_main.o(i.bbBleStopPrbs15) referenced from bb_ble_main.o(i.BbBleInit)
 <LI><a href="#[8d]">bbMstCancelConnOp</a> from bb_ble_conn_master.o(i.bbMstCancelConnOp) referenced from bb_ble_conn_master.o(i.BbBleConnMasterInit)
 <LI><a href="#[99]">bbMstCancelScanOp</a> from bb_ble_adv_master.o(i.bbMstCancelScanOp) referenced from bb_ble_adv_master.o(i.BbBleScanMasterInit)
 <LI><a href="#[ea]">bbMstConnRxCompCback</a> from bb_ble_conn_master.o(i.bbMstConnRxCompCback) referenced from bb_ble_conn_master.o(i.bbMstExecuteConnOp)
 <LI><a href="#[e9]">bbMstConnTxCompCback</a> from bb_ble_conn_master.o(i.bbMstConnTxCompCback) referenced from bb_ble_conn_master.o(i.bbMstExecuteConnOp)
 <LI><a href="#[8e]">bbMstExecuteConnOp</a> from bb_ble_conn_master.o(i.bbMstExecuteConnOp) referenced from bb_ble_conn_master.o(i.BbBleConnMasterInit)
 <LI><a href="#[9a]">bbMstExecuteScanOp</a> from bb_ble_adv_master.o(i.bbMstExecuteScanOp) referenced from bb_ble_adv_master.o(i.BbBleScanMasterInit)
 <LI><a href="#[ec]">bbMstScanRxCompCback</a> from bb_ble_adv_master.o(i.bbMstScanRxCompCback) referenced from bb_ble_adv_master.o(i.bbMstExecuteScanOp)
 <LI><a href="#[eb]">bbMstScanTxCompCback</a> from bb_ble_adv_master.o(i.bbMstScanTxCompCback) referenced from bb_ble_adv_master.o(i.bbMstExecuteScanOp)
 <LI><a href="#[ee]">bbSlvAdvRxCompCback</a> from bb_ble_adv_slave.o(i.bbSlvAdvRxCompCback) referenced from bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp)
 <LI><a href="#[ed]">bbSlvAdvTxCompCback</a> from bb_ble_adv_slave.o(i.bbSlvAdvTxCompCback) referenced from bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp)
 <LI><a href="#[8b]">bbSlvCancelAdvOp</a> from bb_ble_adv_slave.o(i.bbSlvCancelAdvOp) referenced from bb_ble_adv_slave.o(i.BbBleAdvSlaveInit)
 <LI><a href="#[8f]">bbSlvCancelConnOp</a> from bb_ble_conn_slave.o(i.bbSlvCancelConnOp) referenced from bb_ble_conn_slave.o(i.BbBleConnSlaveInit)
 <LI><a href="#[f0]">bbSlvConnRxCompCback</a> from bb_ble_conn_slave.o(i.bbSlvConnRxCompCback) referenced from bb_ble_conn_slave.o(i.bbSlvExecuteConnOp)
 <LI><a href="#[ef]">bbSlvConnTxCompCback</a> from bb_ble_conn_slave.o(i.bbSlvConnTxCompCback) referenced from bb_ble_conn_slave.o(i.bbSlvExecuteConnOp)
 <LI><a href="#[8c]">bbSlvExecuteAdvOp</a> from bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp) referenced from bb_ble_adv_slave.o(i.BbBleAdvSlaveInit)
 <LI><a href="#[90]">bbSlvExecuteConnOp</a> from bb_ble_conn_slave.o(i.bbSlvExecuteConnOp) referenced from bb_ble_conn_slave.o(i.BbBleConnSlaveInit)
 <LI><a href="#[9d]">bbSlvExecuteTestRxOp</a> from bb_ble_dtm.o(i.bbSlvExecuteTestRxOp) referenced from bb_ble_dtm.o(i.BbBleTestInit)
 <LI><a href="#[9c]">bbSlvExecuteTestTxOp</a> from bb_ble_dtm.o(i.bbSlvExecuteTestTxOp) referenced from bb_ble_dtm.o(i.BbBleTestInit)
 <LI><a href="#[9b]">bbTestCleanupOp</a> from bb_ble_dtm.o(i.bbTestCleanupOp) referenced from bb_ble_dtm.o(i.BbBleTestInit)
 <LI><a href="#[f2]">bbTestRxCompCback</a> from bb_ble_dtm.o(i.bbTestRxCompCback) referenced from bb_ble_dtm.o(i.bbSlvExecuteTestRxOp)
 <LI><a href="#[f2]">bbTestRxCompCback</a> from bb_ble_dtm.o(i.bbTestRxCompCback) referenced from bb_ble_dtm.o(i.bbSlvExecuteTestTxOp)
 <LI><a href="#[f1]">bbTestTxCompCback</a> from bb_ble_dtm.o(i.bbTestTxCompCback) referenced from bb_ble_dtm.o(i.bbSlvExecuteTestRxOp)
 <LI><a href="#[f1]">bbTestTxCompCback</a> from bb_ble_dtm.o(i.bbTestTxCompCback) referenced from bb_ble_dtm.o(i.bbSlvExecuteTestTxOp)
 <LI><a href="#[115]">cb_cfo_interrupt_handler</a> from llc_int_handlers.o(i.cb_cfo_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[116]">cb_gp_event_interrupt_handler</a> from llc_int_handlers.o(i.cb_gp_event_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[112]">cb_rx_interrupt_handler</a> from llc_int_handlers.o(i.cb_rx_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[113]">cb_rx_sfd_interrupt_handler</a> from llc_int_handlers.o(i.cb_rx_sfd_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[114]">cb_rx_timeout_interrupt_handler</a> from llc_int_handlers.o(i.cb_rx_timeout_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[111]">cb_tx_interrupt_handler</a> from llc_int_handlers.o(i.cb_tx_interrupt_handler) referenced from llc_api_setup.o(i.llc_api_setup)
 <LI><a href="#[9f]">datcAttCback</a> from datc_main.o(i.datcAttCback) referenced from datc_main.o(i.DatcStart)
 <LI><a href="#[a0]">datcBtnCback</a> from datc_main.o(i.datcBtnCback) referenced from datc_main.o(i.DatcStart)
 <LI><a href="#[a1]">datcDiscCback</a> from datc_main.o(i.datcDiscCback) referenced from datc_main.o(i.DatcStart)
 <LI><a href="#[9e]">datcDmCback</a> from datc_main.o(i.datcDmCback) referenced from datc_main.o(i.DatcStart)
 <LI><a href="#[f]">default_RNG</a> from uecc_ll.o(i.default_RNG) referenced 2 times from uecc_ll.o(.data)
 <LI><a href="#[140]">dmConn2HciHandler</a> from dm_conn.o(i.dmConn2HciHandler) referenced from dm_conn.o(.constdata)
 <LI><a href="#[141]">dmConn2MsgHandler</a> from dm_conn.o(i.dmConn2MsgHandler) referenced from dm_conn.o(.constdata)
 <LI><a href="#[13d]">dmConnHciHandler</a> from dm_conn.o(i.dmConnHciHandler) referenced from dm_conn.o(.constdata)
 <LI><a href="#[13e]">dmConnMsgHandler</a> from dm_conn.o(i.dmConnMsgHandler) referenced from dm_conn.o(.constdata)
 <LI><a href="#[13c]">dmConnReset</a> from dm_conn.o(i.dmConnReset) referenced from dm_conn.o(.constdata)
 <LI><a href="#[147]">dmConnSmActCancelOpen</a> from dm_conn_master.o(i.dmConnSmActCancelOpen) referenced from dm_conn_master_leg.o(.constdata)
 <LI><a href="#[136]">dmConnSmActClose</a> from dm_conn.o(i.dmConnSmActClose) referenced from dm_conn.o(.constdata)
 <LI><a href="#[139]">dmConnSmActConnClosed</a> from dm_conn.o(i.dmConnSmActConnClosed) referenced from dm_conn.o(.constdata)
 <LI><a href="#[138]">dmConnSmActConnFailed</a> from dm_conn.o(i.dmConnSmActConnFailed) referenced from dm_conn.o(.constdata)
 <LI><a href="#[137]">dmConnSmActConnOpened</a> from dm_conn.o(i.dmConnSmActConnOpened) referenced from dm_conn.o(.constdata)
 <LI><a href="#[13a]">dmConnSmActHciUpdated</a> from dm_conn.o(i.dmConnSmActHciUpdated) referenced from dm_conn.o(.constdata)
 <LI><a href="#[135]">dmConnSmActNone</a> from dm_conn.o(i.dmConnSmActNone) referenced from dm_conn.o(.constdata)
 <LI><a href="#[146]">dmConnSmActOpen</a> from dm_conn_master_leg.o(i.dmConnSmActOpen) referenced from dm_conn_master_leg.o(.constdata)
 <LI><a href="#[145]">dmConnUpdActL2cUpdateInd</a> from dm_conn_master.o(i.dmConnUpdActL2cUpdateInd) referenced from dm_conn_master.o(.constdata)
 <LI><a href="#[13b]">dmConnUpdActNone</a> from dm_conn.o(i.dmConnUpdActNone) referenced from dm_conn.o(.constdata)
 <LI><a href="#[144]">dmConnUpdActUpdateMaster</a> from dm_conn_master.o(i.dmConnUpdActUpdateMaster) referenced from dm_conn_master.o(.constdata)
 <LI><a href="#[143]">dmConnUpdMsgHandler</a> from dm_conn.o(i.dmConnUpdMsgHandler) referenced from dm_conn.o(.constdata)
 <LI><a href="#[148]">dmDevActReset</a> from dm_dev.o(i.dmDevActReset) referenced from dm_dev.o(.constdata)
 <LI><a href="#[149]">dmDevHciHandler</a> from dm_dev.o(i.dmDevHciHandler) referenced from dm_dev.o(.constdata)
 <LI><a href="#[14a]">dmDevMsgHandler</a> from dm_dev.o(i.dmDevMsgHandler) referenced from dm_dev.o(.constdata)
 <LI><a href="#[14e]">dmDevPrivActAesCmpl</a> from dm_dev_priv.o(i.dmDevPrivActAesCmpl) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[151]">dmDevPrivActCtrl</a> from dm_dev_priv.o(i.dmDevPrivActCtrl) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[14f]">dmDevPrivActRpaStart</a> from dm_dev_priv.o(i.dmDevPrivActRpaStart) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[150]">dmDevPrivActRpaStop</a> from dm_dev_priv.o(i.dmDevPrivActRpaStop) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[14b]">dmDevPrivActStart</a> from dm_dev_priv.o(i.dmDevPrivActStart) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[14c]">dmDevPrivActStop</a> from dm_dev_priv.o(i.dmDevPrivActStop) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[14d]">dmDevPrivActTimeout</a> from dm_dev_priv.o(i.dmDevPrivActTimeout) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[153]">dmDevPrivHciHandler</a> from dm_dev_priv.o(i.dmDevPrivHciHandler) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[154]">dmDevPrivMsgHandler</a> from dm_dev_priv.o(i.dmDevPrivMsgHandler) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[152]">dmDevPrivReset</a> from dm_dev_priv.o(i.dmDevPrivReset) referenced from dm_dev_priv.o(.constdata)
 <LI><a href="#[142]">dmEmptyHandler</a> from dm_main.o(i.dmEmptyHandler) referenced 5 times from dm_conn.o(.constdata)
 <LI><a href="#[13f]">dmEmptyReset</a> from dm_main.o(i.dmEmptyReset) referenced 6 times from dm_conn.o(.constdata)
 <LI><a href="#[a2]">dmHciEvtCback</a> from dm_main.o(i.dmHciEvtCback) referenced from dm_main.o(i.DmHandlerInit)
 <LI><a href="#[156]">dmPrivActAddDevToResList</a> from dm_priv.o(i.dmPrivActAddDevToResList) referenced from dm_priv.o(.constdata)
 <LI><a href="#[158]">dmPrivActClearResList</a> from dm_priv.o(i.dmPrivActClearResList) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15b]">dmPrivActGenAddr</a> from dm_priv.o(i.dmPrivActGenAddr) referenced from dm_priv.o(.constdata)
 <LI><a href="#[157]">dmPrivActRemDevFromResList</a> from dm_priv.o(i.dmPrivActRemDevFromResList) referenced from dm_priv.o(.constdata)
 <LI><a href="#[155]">dmPrivActResolveAddr</a> from dm_priv.o(i.dmPrivActResolveAddr) referenced from dm_priv.o(.constdata)
 <LI><a href="#[159]">dmPrivActSetAddrResEnable</a> from dm_priv.o(i.dmPrivActSetAddrResEnable) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15a]">dmPrivActSetPrivacyMode</a> from dm_priv.o(i.dmPrivActSetPrivacyMode) referenced from dm_priv.o(.constdata)
 <LI><a href="#[160]">dmPrivAesActGenAddrAesCmpl</a> from dm_priv.o(i.dmPrivAesActGenAddrAesCmpl) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15f]">dmPrivAesActResAddrAesCmpl</a> from dm_priv.o(i.dmPrivAesActResAddrAesCmpl) referenced from dm_priv.o(.constdata)
 <LI><a href="#[161]">dmPrivAesMsgHandler</a> from dm_priv.o(i.dmPrivAesMsgHandler) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15d]">dmPrivHciHandler</a> from dm_priv.o(i.dmPrivHciHandler) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15e]">dmPrivMsgHandler</a> from dm_priv.o(i.dmPrivMsgHandler) referenced from dm_priv.o(.constdata)
 <LI><a href="#[15c]">dmPrivReset</a> from dm_priv.o(i.dmPrivReset) referenced from dm_priv.o(.constdata)
 <LI><a href="#[162]">dmScanActStart</a> from dm_scan_leg.o(i.dmScanActStart) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[163]">dmScanActStop</a> from dm_scan_leg.o(i.dmScanActStop) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[164]">dmScanActTimeout</a> from dm_scan_leg.o(i.dmScanActTimeout) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[166]">dmScanHciHandler</a> from dm_scan_leg.o(i.dmScanHciHandler) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[167]">dmScanMsgHandler</a> from dm_scan_leg.o(i.dmScanMsgHandler) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[165]">dmScanReset</a> from dm_scan_leg.o(i.dmScanReset) referenced from dm_scan_leg.o(.constdata)
 <LI><a href="#[169]">dmSecHciHandler</a> from dm_sec.o(i.dmSecHciHandler) referenced from dm_sec.o(.constdata)
 <LI><a href="#[16b]">dmSecLescMsgHandler</a> from dm_sec_lesc.o(i.dmSecLescMsgHandler) referenced from dm_sec_lesc.o(.constdata)
 <LI><a href="#[16a]">dmSecMsgHandler</a> from dm_sec.o(i.dmSecMsgHandler) referenced from dm_sec.o(.constdata)
 <LI><a href="#[168]">dmSecReset</a> from dm_sec.o(i.dmSecReset) referenced from dm_sec.o(.constdata)
 <LI><a href="#[e8]">fputc</a> from stdio.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[f4]">hciCoreAclRecvPending</a> from hci_core_ps.o(i.hciCoreAclRecvPending) referenced from hci_core_ps.o(i.hciCoreInit)
 <LI><a href="#[f3]">hciCoreEvtProcessLlEvt</a> from hci_core_ps.o(i.hciCoreEvtProcessLlEvt) referenced from hci_core_ps.o(i.hciCoreInit)
 <LI><a href="#[f5]">hciCoreNumCmplPkts</a> from hci_core_ps.o(i.hciCoreNumCmplPkts) referenced from hci_core_ps.o(i.hciCoreInit)
 <LI><a href="#[a5]">l2cDefaultCtrlCback</a> from l2c_main.o(i.l2cDefaultCtrlCback) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[a3]">l2cDefaultDataCback</a> from l2c_main.o(i.l2cDefaultDataCback) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[a6]">l2cDefaultDataCidCback</a> from l2c_main.o(i.l2cDefaultDataCidCback) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[a8]">l2cHciAclCback</a> from l2c_main.o(i.l2cHciAclCback) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[a7]">l2cHciFlowCback</a> from l2c_main.o(i.l2cHciFlowCback) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[a9]">l2cMasterRxSignalingPkt</a> from l2c_master.o(i.l2cMasterRxSignalingPkt) referenced from l2c_master.o(i.L2cMasterInit)
 <LI><a href="#[a4]">l2cRxSignalingPkt</a> from l2c_main.o(i.l2cRxSignalingPkt) referenced from l2c_main.o(i.L2cInit)
 <LI><a href="#[1d9]">lctrActConnUpdDisallow</a> from lctr_sm_llcp_conn_master.o(i.lctrActConnUpdDisallow) referenced 5 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1eb]">lctrActEncChangeDisallow</a> from lctr_sm_llcp_enc_master.o(i.lctrActEncChangeDisallow) referenced 6 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1d3]">lctrActHostConnUpd</a> from lctr_sm_llcp_conn_master.o(i.lctrActHostConnUpd) referenced 3 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1f7]">lctrActHostLtkNegReply</a> from lctr_sm_llcp_enc_slave.o(i.lctrActHostLtkNegReply) referenced from lctr_sm_llcp_enc_slave.o(.constdata)
 <LI><a href="#[1f6]">lctrActHostLtkReply</a> from lctr_sm_llcp_enc_slave.o(i.lctrActHostLtkReply) referenced from lctr_sm_llcp_enc_slave.o(.constdata)
 <LI><a href="#[1d8]">lctrActHostNegReply</a> from lctr_sm_llcp_conn_slave.o(i.lctrActHostNegReply) referenced 2 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1d7]">lctrActHostReply</a> from lctr_sm_llcp_conn_master.o(i.lctrActHostReply) referenced 2 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1df]">lctrActLocalRejectConnParam</a> from lctr_sm_llcp_conn_master.o(i.lctrActLocalRejectConnParam) referenced from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1e7]">lctrActNotifyHostColliding</a> from lctr_sm_llcp_conn_slave.o(i.lctrActNotifyHostColliding) referenced from lctr_sm_llcp_conn_slave.o(.constdata)
 <LI><a href="#[1de]">lctrActNotifyHostConnUpdSuccess</a> from lctr_sm_llcp_conn_slave.o(i.lctrActNotifyHostConnUpdSuccess) referenced 2 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1e2]">lctrActPeerConnInd</a> from lctr_sm_llcp_conn_slave.o(i.lctrActPeerConnInd) referenced 2 times from lctr_sm_llcp_conn_slave.o(.constdata)
 <LI><a href="#[1d4]">lctrActPeerConnParam</a> from lctr_sm_llcp_conn_master.o(i.lctrActPeerConnParam) referenced 2 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1db]">lctrActPeerConnParamRsp</a> from lctr_sm_llcp_conn_master.o(i.lctrActPeerConnParamRsp) referenced from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1e8]">lctrActPeerConnParamWithCollision</a> from lctr_sm_llcp_conn_slave.o(i.lctrActPeerConnParamWithCollision) referenced from lctr_sm_llcp_conn_slave.o(.constdata)
 <LI><a href="#[1ed]">lctrActPeerEncReject</a> from lctr_sm_llcp_enc_master.o(i.lctrActPeerEncReject) referenced 4 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1f4]">lctrActPeerEncReq</a> from lctr_sm_llcp_enc_slave.o(i.lctrActPeerEncReq) referenced from lctr_sm_llcp_enc_slave.o(.constdata)
 <LI><a href="#[1ee]">lctrActPeerEncRsp</a> from lctr_sm_llcp_enc_master.o(i.lctrActPeerEncRsp) referenced from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1f9]">lctrActPeerPauseEncReq</a> from lctr_sm_llcp_enc_slave.o(i.lctrActPeerPauseEncReq) referenced from lctr_sm_llcp_enc_slave.o(.constdata)
 <LI><a href="#[1f3]">lctrActPeerPauseEncRsp</a> from lctr_sm_llcp_enc_master.o(i.lctrActPeerPauseEncRsp) referenced from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1dc]">lctrActPeerRejectConnParam</a> from lctr_sm_llcp_conn_slave.o(i.lctrActPeerRejectConnParam) referenced 2 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1ef]">lctrActPeerStartEncReq</a> from lctr_sm_llcp_enc_master.o(i.lctrActPeerStartEncReq) referenced from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1f0]">lctrActPeerStartEncRsp</a> from lctr_sm_llcp_enc_master.o(i.lctrActPeerStartEncRsp) referenced 2 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1ce]">lctrActReceivePeriodicSyncInd</a> from lctr_act_conn.o(i.lctrActReceivePeriodicSyncInd) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1f1]">lctrActRefreshEncKey</a> from lctr_sm_llcp_enc_master.o(i.lctrActRefreshEncKey) referenced from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1da]">lctrActRejectCollision</a> from lctr_sm_llcp_conn_master.o(i.lctrActRejectCollision) referenced 7 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1cd]">lctrActSendPeriodicSyncInd</a> from lctr_act_conn.o(i.lctrActSendPeriodicSyncInd) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1dd]">lctrActSkipConnParamRsp</a> from lctr_sm_llcp_conn_master.o(i.lctrActSkipConnParamRsp) referenced from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1d6]">lctrActStartConnParam</a> from lctr_sm_llcp_conn_master.o(i.lctrActStartConnParam) referenced from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1d5]">lctrActStartConnUpd</a> from lctr_sm_llcp_conn_master.o(i.lctrActStartConnUpd) referenced 3 times from lctr_sm_llcp_conn_master.o(.constdata)
 <LI><a href="#[1e9]">lctrActStartEnc</a> from lctr_sm_llcp_enc_master.o(i.lctrActStartEnc) referenced from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1cc]">lctrActStorePeriodicSyncTrsf</a> from lctr_act_conn.o(i.lctrActStorePeriodicSyncTrsf) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1f2]">lctrActTxFlushedOnRestart</a> from lctr_sm_llcp_enc_master.o(i.lctrActTxFlushedOnRestart) referenced 2 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1ec]">lctrActTxFlushedOnStart</a> from lctr_sm_llcp_enc_master.o(i.lctrActTxFlushedOnStart) referenced 2 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[1ac]">lctrAdvActAdvCnf</a> from lctr_act_adv_slave.o(i.lctrAdvActAdvCnf) referenced 2 times from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1b2]">lctrAdvActAdvTerm</a> from lctr_act_adv_slave.o(i.lctrAdvActAdvTerm) referenced from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1b1]">lctrAdvActDisallowAdvCnf</a> from lctr_act_adv_slave.o(i.lctrAdvActDisallowAdvCnf) referenced 4 times from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1b3]">lctrAdvActResetTerm</a> from lctr_act_adv_slave.o(i.lctrAdvActResetTerm) referenced from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1ad]">lctrAdvActSelfStart</a> from lctr_act_adv_slave.o(i.lctrAdvActSelfStart) referenced from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1b0]">lctrAdvActSelfTerm</a> from lctr_act_adv_slave.o(i.lctrAdvActSelfTerm) referenced from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1af]">lctrAdvActShutdown</a> from lctr_act_adv_slave.o(i.lctrAdvActShutdown) referenced 2 times from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1ab]">lctrAdvActStart</a> from lctr_act_adv_slave.o(i.lctrAdvActStart) referenced from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[1ae]">lctrAdvActUpdateAdvParam</a> from lctr_act_adv_slave.o(i.lctrAdvActUpdateAdvParam) referenced 3 times from lctr_sm_adv_slave.o(.constdata)
 <LI><a href="#[b9]">lctrConnChClassUpdate</a> from lctr_main_conn_master.o(i.lctrConnChClassUpdate) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[fe]">lctrConnResolveConflict</a> from lctr_main_conn.o(i.lctrConnResolveConflict) referenced from lctr_isr_conn_master.o(i.lctrMstConnEndOp)
 <LI><a href="#[fe]">lctrConnResolveConflict</a> from lctr_main_conn.o(i.lctrConnResolveConflict) referenced from lctr_isr_init_master.o(i.lctrMstInitiateEndOp)
 <LI><a href="#[fe]">lctrConnResolveConflict</a> from lctr_main_conn.o(i.lctrConnResolveConflict) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[fe]">lctrConnResolveConflict</a> from lctr_main_conn.o(i.lctrConnResolveConflict) referenced from lctr_isr_conn_slave.o(i.lctrSlvConnEndOp)
 <LI><a href="#[b2]">lctrConnRxPendingHandler</a> from lctr_main_conn.o(i.lctrConnRxPendingHandler) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[b2]">lctrConnRxPendingHandler</a> from lctr_main_conn.o(i.lctrConnRxPendingHandler) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[b4]">lctrConnTxCompletedHandler</a> from lctr_main_conn.o(i.lctrConnTxCompletedHandler) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[b4]">lctrConnTxCompletedHandler</a> from lctr_main_conn.o(i.lctrConnTxCompletedHandler) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[1fb]">lctrDisableTxDataEnc</a> from lctr_act_enc.o(i.lctrDisableTxDataEnc) referenced from lctr_sm_llcp_enc_slave.o(.constdata)
 <LI><a href="#[ab]">lctrExecutePingSm</a> from lctr_sm_llcp_enc_slave.o(i.lctrExecutePingSm) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[ab]">lctrExecutePingSm</a> from lctr_sm_llcp_enc_slave.o(i.lctrExecutePingSm) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[f7]">lctrGetConnRefTime</a> from lctr_main_conn.o(i.lctrGetConnRefTime) referenced from lctr_act_init_master.o(i.lctrInitActInitiate)
 <LI><a href="#[110]">lctrGetSlvConnRefTime</a> from lctr_main_conn_slave.o(i.lctrGetSlvConnRefTime) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[1b8]">lctrInitActConnect</a> from lctr_act_init_master.o(i.lctrInitActConnect) referenced from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1b5]">lctrInitActDisallowCancel</a> from lctr_act_init_master.o(i.lctrInitActDisallowCancel) referenced 2 times from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1b7]">lctrInitActDisallowInitiate</a> from lctr_act_init_master.o(i.lctrInitActDisallowInitiate) referenced 3 times from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1b4]">lctrInitActInitiate</a> from lctr_act_init_master.o(i.lctrInitActInitiate) referenced from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1ba]">lctrInitActResetTerm</a> from lctr_act_init_master.o(i.lctrInitActResetTerm) referenced from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1b9]">lctrInitActScanTerm</a> from lctr_act_init_master.o(i.lctrInitActScanTerm) referenced from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1b6]">lctrInitActShutdown</a> from lctr_act_init_master.o(i.lctrInitActShutdown) referenced 2 times from lctr_sm_init_master.o(.constdata)
 <LI><a href="#[1ea]">lctrInvalidEncPduSeq</a> from lctr_act_enc.o(i.lctrInvalidEncPduSeq) referenced 52 times from lctr_sm_llcp_enc_master.o(.constdata)
 <LI><a href="#[b6]">lctrLlcpExecuteCommonSm</a> from lctr_sm_llcp_conn.o(i.lctrLlcpExecuteCommonSm) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[b6]">lctrLlcpExecuteCommonSm</a> from lctr_sm_llcp_conn.o(i.lctrLlcpExecuteCommonSm) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[f9]">lctrMstConnAbortOp</a> from lctr_isr_conn_master.o(i.lctrMstConnAbortOp) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[fa]">lctrMstConnBeginOp</a> from lctr_isr_conn_master.o(i.lctrMstConnBeginOp) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[fb]">lctrMstConnCleanupOp</a> from lctr_isr_conn_master.o(i.lctrMstConnCleanupOp) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[b1]">lctrMstConnDisp</a> from lctr_main_conn_master.o(i.lctrMstConnDisp) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[f8]">lctrMstConnEndOp</a> from lctr_isr_conn_master.o(i.lctrMstConnEndOp) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[106]">lctrMstConnIndTxCompHandler</a> from lctr_isr_init_master.o(i.lctrMstConnIndTxCompHandler) referenced from lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
 <LI><a href="#[b0]">lctrMstConnResetHandler</a> from lctr_main_conn_master.o(i.lctrMstConnResetHandler) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[fd]">lctrMstConnRxCompletion</a> from lctr_isr_conn_master.o(i.lctrMstConnRxCompletion) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[fc]">lctrMstConnTxCompletion</a> from lctr_isr_conn_master.o(i.lctrMstConnTxCompletion) referenced from lctr_main_conn_master.o(i.lctrMstConnBuildOp)
 <LI><a href="#[b3]">lctrMstConnTxPendingHandler</a> from lctr_main_conn_master.o(i.lctrMstConnTxPendingHandler) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[100]">lctrMstDiscoverAdvPktHandler</a> from lctr_isr_adv_master.o(i.lctrMstDiscoverAdvPktHandler) referenced from lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
 <LI><a href="#[101]">lctrMstDiscoverAdvPktPostProcessHandler</a> from lctr_isr_adv_master.o(i.lctrMstDiscoverAdvPktPostProcessHandler) referenced from lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
 <LI><a href="#[ff]">lctrMstDiscoverEndOp</a> from lctr_isr_adv_master.o(i.lctrMstDiscoverEndOp) referenced from lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
 <LI><a href="#[ac]">lctrMstEncProcessDataPdu</a> from lctr_main_enc_master.o(i.lctrMstEncProcessDataPdu) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[aa]">lctrMstExecuteEncryptSm</a> from lctr_sm_llcp_enc_master.o(i.lctrMstExecuteEncryptSm) referenced from lctr_main_enc_master.o(i.LctrMstConnEncInit)
 <LI><a href="#[bb]">lctrMstInitDisp</a> from lctr_main_init_master.o(i.lctrMstInitDisp) referenced from lctr_main_init_master.o(i.LctrMstInitInit)
 <LI><a href="#[ba]">lctrMstInitResetHandler</a> from lctr_main_init_master.o(i.lctrMstInitResetHandler) referenced from lctr_main_init_master.o(i.LctrMstInitInit)
 <LI><a href="#[105]">lctrMstInitiateAdvPktHandler</a> from lctr_isr_init_master.o(i.lctrMstInitiateAdvPktHandler) referenced from lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
 <LI><a href="#[104]">lctrMstInitiateEndOp</a> from lctr_isr_init_master.o(i.lctrMstInitiateEndOp) referenced from lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
 <LI><a href="#[b5]">lctrMstLlcpExecuteConnUpdSm</a> from lctr_sm_llcp_conn_master.o(i.lctrMstLlcpExecuteConnUpdSm) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[b7]">lctrMstProcessDataPdu</a> from lctr_main_conn_master.o(i.lctrMstProcessDataPdu) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[be]">lctrMstRxAdvBPduHandler</a> from lctr_main_adv_master.o(i.lctrMstRxAdvBPduHandler) referenced from lctr_main_adv_master.o(i.LctrMstScanInit)
 <LI><a href="#[bf]">lctrMstRxDirectAdvBPduHandler</a> from lctr_main_adv_master.o(i.lctrMstRxDirectAdvBPduHandler) referenced from lctr_main_adv_master.o(i.LctrMstScanInit)
 <LI><a href="#[bd]">lctrMstScanDisp</a> from lctr_main_adv_master.o(i.lctrMstScanDisp) referenced from lctr_main_adv_master.o(i.LctrMstScanInit)
 <LI><a href="#[102]">lctrMstScanReqTxCompHandler</a> from lctr_isr_adv_master.o(i.lctrMstScanReqTxCompHandler) referenced from lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
 <LI><a href="#[bc]">lctrMstScanResetHandler</a> from lctr_main_adv_master.o(i.lctrMstScanResetHandler) referenced from lctr_main_adv_master.o(i.LctrMstScanInit)
 <LI><a href="#[103]">lctrMstScanRspRxCompHandler</a> from lctr_isr_adv_master.o(i.lctrMstScanRspRxCompHandler) referenced from lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
 <LI><a href="#[c0]">lctrPrivDisp</a> from lctr_main_priv.o(i.lctrPrivDisp) referenced from lctr_main_priv.o(i.LctrPrivInit)
 <LI><a href="#[c1]">lctrPrivPendAddrRes</a> from lctr_main_priv.o(i.lctrPrivPendAddrRes) referenced from lctr_main_priv.o(i.LctrPrivInit)
 <LI><a href="#[f6]">lctrRng</a> from lctr_main_sc.o(i.lctrRng) referenced from lctr_main_sc.o(i.lctrGenerateDhKeyStart)
 <LI><a href="#[f6]">lctrRng</a> from lctr_main_sc.o(i.lctrRng) referenced from lctr_main_sc.o(i.lctrGenerateP256KeyPairStart)
 <LI><a href="#[f6]">lctrRng</a> from lctr_main_sc.o(i.lctrRng) referenced from lctr_main_sc.o(i.lctrGenerateP256PublicKeyStart)
 <LI><a href="#[c3]">lctrScGenerateDhKeyContinue</a> from lctr_main_sc.o(i.lctrScGenerateDhKeyContinue) referenced from lctr_main_sc.o(i.LctrScInit)
 <LI><a href="#[c2]">lctrScGenerateP256KeyPairContinue</a> from lctr_main_sc.o(i.lctrScGenerateP256KeyPairContinue) referenced from lctr_main_sc.o(i.LctrScInit)
 <LI><a href="#[1a8]">lctrScanActDisallowScan</a> from lctr_act_adv_master.o(i.lctrScanActDisallowScan) referenced 4 times from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a2]">lctrScanActDiscover</a> from lctr_act_adv_master.o(i.lctrScanActDiscover) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1aa]">lctrScanActResetTerm</a> from lctr_act_adv_master.o(i.lctrScanActResetTerm) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a3]">lctrScanActScanCnf</a> from lctr_act_adv_master.o(i.lctrScanActScanCnf) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a9]">lctrScanActScanTerm</a> from lctr_act_adv_master.o(i.lctrScanActScanTerm) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a7]">lctrScanActSelfTerm</a> from lctr_act_adv_master.o(i.lctrScanActSelfTerm) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a5]">lctrScanActShutdown</a> from lctr_act_adv_master.o(i.lctrScanActShutdown) referenced 2 times from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a6]">lctrScanActUpdateScanFilt</a> from lctr_act_adv_master.o(i.lctrScanActUpdateScanFilt) referenced from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[1a4]">lctrScanActUpdateScanParam</a> from lctr_act_adv_master.o(i.lctrScanActUpdateScanParam) referenced 3 times from lctr_sm_adv_master.o(.constdata)
 <LI><a href="#[b8]">lctrSelectNextDataChannel</a> from lctr_main_conn.o(i.lctrSelectNextDataChannel) referenced from lctr_main_conn_master.o(i.LctrMstConnInit)
 <LI><a href="#[b8]">lctrSelectNextDataChannel</a> from lctr_main_conn.o(i.lctrSelectNextDataChannel) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[1bf]">lctrSendChanMapUpdateInd</a> from lctr_act_conn.o(i.lctrSendChanMapUpdateInd) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c7]">lctrSendDataLengthReq</a> from lctr_act_conn.o(i.lctrSendDataLengthReq) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c9]">lctrSendDataLengthRsp</a> from lctr_act_conn.o(i.lctrSendDataLengthRsp) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c1]">lctrSendFeatureReq</a> from lctr_act_conn.o(i.lctrSendFeatureReq) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c3]">lctrSendFeatureRsp</a> from lctr_act_conn.o(i.lctrSendFeatureRsp) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1d0]">lctrSendPeerScaReq</a> from lctr_act_conn.o(i.lctrSendPeerScaReq) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1d2]">lctrSendPeerScaRsp</a> from lctr_act_conn.o(i.lctrSendPeerScaRsp) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1ca]">lctrSendSetMinUsedChanInd</a> from lctr_act_conn.o(i.lctrSendSetMinUsedChanInd) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1bc]">lctrSendTerminateInd</a> from lctr_act_conn.o(i.lctrSendTerminateInd) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c4]">lctrSendVersionInd</a> from lctr_act_conn.o(i.lctrSendVersionInd) referenced 2 times from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[c5]">lctrSlvAdvDisp</a> from lctr_main_adv_slave.o(i.lctrSlvAdvDisp) referenced from lctr_main_adv_slave.o(i.LctrSlvAdvInit)
 <LI><a href="#[107]">lctrSlvAdvEndOp</a> from lctr_isr_adv_slave.o(i.lctrSlvAdvEndOp) referenced from lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
 <LI><a href="#[108]">lctrSlvAdvHandler</a> from lctr_isr_adv_slave.o(i.lctrSlvAdvHandler) referenced from lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
 <LI><a href="#[109]">lctrSlvAdvPostProcessHandler</a> from lctr_isr_adv_slave.o(i.lctrSlvAdvPostProcessHandler) referenced from lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
 <LI><a href="#[c4]">lctrSlvAdvResetHandler</a> from lctr_main_adv_slave.o(i.lctrSlvAdvResetHandler) referenced from lctr_main_adv_slave.o(i.LctrSlvAdvInit)
 <LI><a href="#[10b]">lctrSlvConnAbortOp</a> from lctr_isr_conn_slave.o(i.lctrSlvConnAbortOp) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[10c]">lctrSlvConnBeginOp</a> from lctr_isr_conn_slave.o(i.lctrSlvConnBeginOp) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[10d]">lctrSlvConnCleanupOp</a> from lctr_isr_conn_slave.o(i.lctrSlvConnCleanupOp) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[cb]">lctrSlvConnDisp</a> from lctr_main_conn_slave.o(i.lctrSlvConnDisp) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[10a]">lctrSlvConnEndOp</a> from lctr_isr_conn_slave.o(i.lctrSlvConnEndOp) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[c9]">lctrSlvConnResetHandler</a> from lctr_main_conn_slave.o(i.lctrSlvConnResetHandler) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[10f]">lctrSlvConnRxCompletion</a> from lctr_isr_conn_slave.o(i.lctrSlvConnRxCompletion) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[10e]">lctrSlvConnTxCompletion</a> from lctr_isr_conn_slave.o(i.lctrSlvConnTxCompletion) referenced from lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
 <LI><a href="#[c8]">lctrSlvEncProcessDataPdu</a> from lctr_main_enc_slave.o(i.lctrSlvEncProcessDataPdu) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[c7]">lctrSlvExecuteEncryptSm</a> from lctr_sm_llcp_enc_slave.o(i.lctrSlvExecuteEncryptSm) referenced from lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
 <LI><a href="#[cc]">lctrSlvLlcpExecuteConnUpdSm</a> from lctr_sm_llcp_conn_slave.o(i.lctrSlvLlcpExecuteConnUpdSm) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[ca]">lctrSlvProcessConnInd</a> from lctr_main_conn_slave.o(i.lctrSlvProcessConnInd) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[cd]">lctrSlvProcessDataPdu</a> from lctr_main_conn_slave.o(i.lctrSlvProcessDataPdu) referenced from lctr_main_conn_slave.o(i.LctrSlvConnInit)
 <LI><a href="#[c6]">lctrSlvRxScanReq</a> from lctr_main_adv_slave.o(i.lctrSlvRxScanReq) referenced from lctr_main_adv_slave.o(i.LctrSlvAdvInit)
 <LI><a href="#[1c0]">lctrStoreChanMap</a> from lctr_act_conn.o(i.lctrStoreChanMap) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1be]">lctrStoreChanMapUpdate</a> from lctr_act_conn.o(i.lctrStoreChanMapUpdate) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1bb]">lctrStoreDisconnectReason</a> from lctr_act_conn.o(i.lctrStoreDisconnectReason) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c6]">lctrStoreLocalDataLength</a> from lctr_act_conn.o(i.lctrStoreLocalDataLength) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1d1]">lctrStorePeerSca</a> from lctr_act_conn.o(i.lctrStorePeerSca) referenced 2 times from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c8]">lctrStoreRemoteDataLength</a> from lctr_act_conn.o(i.lctrStoreRemoteDataLength) referenced 2 times from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c5]">lctrStoreRemoteVer</a> from lctr_act_conn.o(i.lctrStoreRemoteVer) referenced 2 times from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1cf]">lctrStoreScaAction</a> from lctr_act_conn.o(i.lctrStoreScaAction) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1cb]">lctrStoreSetMinUsedChan</a> from lctr_act_conn.o(i.lctrStoreSetMinUsedChan) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1bd]">lctrStoreTerminateReason</a> from lctr_act_conn.o(i.lctrStoreTerminateReason) referenced from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[1c2]">lctrStoreUsedFeatures</a> from lctr_act_conn.o(i.lctrStoreUsedFeatures) referenced 2 times from lctr_sm_llcp_conn.o(.constdata)
 <LI><a href="#[d1]">llTestDisp</a> from ll_main_dtm.o(i.llTestDisp) referenced from ll_main_dtm.o(i.LlTestInit)
 <LI><a href="#[d0]">llTestResetHandler</a> from ll_main_dtm.o(i.llTestResetHandler) referenced from ll_main_dtm.o(i.LlTestInit)
 <LI><a href="#[80]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d2]">palUartCallback</a> from pal_uart.o(i.palUartCallback) referenced from pal_uart.o(i.PalUartReadData)
 <LI><a href="#[d2]">palUartCallback</a> from pal_uart.o(i.palUartCallback) referenced from pal_uart.o(i.PalUartWriteData)
 <LI><a href="#[d3]">schBodCompHandler</a> from sch_main.o(i.schBodCompHandler) referenced from sch_main.o(i.SchHandlerInit)
 <LI><a href="#[d4]">schBodLoadHandler</a> from sch_main.o(i.schBodLoadHandler) referenced from sch_main.o(i.SchInit)
 <LI><a href="#[d8]">secHciCback</a> from sec_main.o(i.secHciCback) referenced from sec_main.o(i.SecInit)
 <LI><a href="#[176]">smpActAttemptRcvd</a> from smp_act.o(i.smpActAttemptRcvd) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[177]">smpActCheckAttempts</a> from smp_act.o(i.smpActCheckAttempts) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[19f]">smpActCleanup</a> from smp_act.o(i.smpActCleanup) referenced from smpi_sm.o(.constdata)
 <LI><a href="#[175]">smpActMaxAttempts</a> from smp_act.o(i.smpActMaxAttempts) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[16c]">smpActNone</a> from smp_act.o(i.smpActNone) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[178]">smpActNotifyDmAttemptsFailure</a> from smp_act.o(i.smpActNotifyDmAttemptsFailure) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[179]">smpActNotifyDmRspToFailure</a> from smp_act.o(i.smpActNotifyDmRspToFailure) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[170]">smpActPairCnfCalc1</a> from smp_act.o(i.smpActPairCnfCalc1) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[171]">smpActPairCnfCalc2</a> from smp_act.o(i.smpActPairCnfCalc2) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[173]">smpActPairCnfVerCalc1</a> from smp_act.o(i.smpActPairCnfVerCalc1) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[174]">smpActPairCnfVerCalc2</a> from smp_act.o(i.smpActPairCnfVerCalc2) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[1a1]">smpActPairingCancel</a> from smp_act.o(i.smpActPairingCancel) referenced from smpi_sm.o(.constdata)
 <LI><a href="#[17a]">smpActPairingCmpl</a> from smp_act.o(i.smpActPairingCmpl) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[1a0]">smpActPairingFailed</a> from smp_act.o(i.smpActPairingFailed) referenced from smpi_sm.o(.constdata)
 <LI><a href="#[172]">smpActSendPairCnf</a> from smp_act.o(i.smpActSendPairCnf) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[df]">smpAuthReq</a> from smp_act.o(i.smpAuthReq) referenced from smpi_sm.o(i.SmpiInit)
 <LI><a href="#[db]">smpDmConnCback</a> from smp_main.o(i.smpDmConnCback) referenced from smp_main.o(i.SmpHandlerInit)
 <LI><a href="#[d9]">smpL2cCtrlCback</a> from smp_main.o(i.smpL2cCtrlCback) referenced from smp_main.o(i.SmpHandlerInit)
 <LI><a href="#[da]">smpL2cDataCback</a> from smp_main.o(i.smpL2cDataCback) referenced from smp_main.o(i.SmpHandlerInit)
 <LI><a href="#[de]">smpProcPairing</a> from smp_act.o(i.smpProcPairing) referenced from smpi_sm.o(i.SmpiInit)
 <LI><a href="#[19a]">smpScActCalcF5Ltk</a> from smp_sc_act.o(i.smpScActCalcF5Ltk) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[199]">smpScActCalcF5MacKey</a> from smp_sc_act.o(i.smpScActCalcF5MacKey) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[198]">smpScActCalcF5TKey</a> from smp_sc_act.o(i.smpScActCalcF5TKey) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[197]">smpScActCalcSharedSecret</a> from smp_sc_act.o(i.smpScActCalcSharedSecret) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[16d]">smpScActCleanup</a> from smp_sc_act.o(i.smpScActCleanup) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[19b]">smpScActDHKeyCalcF6Ea</a> from smp_sc_act.o(i.smpScActDHKeyCalcF6Ea) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[19c]">smpScActDHKeyCalcF6Eb</a> from smp_sc_act.o(i.smpScActDHKeyCalcF6Eb) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18b]">smpScActJwncDisplay</a> from smp_sc_act.o(i.smpScActJwncDisplay) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[16f]">smpScActPairingCancel</a> from smp_sc_act.o(i.smpScActPairingCancel) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[16e]">smpScActPairingFailed</a> from smp_sc_act.o(i.smpScActPairingFailed) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18d]">smpScActPkKeypress</a> from smp_sc_act.o(i.smpScActPkKeypress) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18e]">smpScActPkSendKeypress</a> from smp_sc_act.o(i.smpScActPkSendKeypress) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18c]">smpScActPkSetup</a> from smp_sc_act.o(i.smpScActPkSetup) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[dd]">smpScAuthReq</a> from smp_sc_act.o(i.smpScAuthReq) referenced from smp_sc_main.o(i.SmpScInit)
 <LI><a href="#[dc]">smpScProcPairing</a> from smp_sc_act.o(i.smpScProcPairing) referenced from smp_sc_main.o(i.SmpScInit)
 <LI><a href="#[17c]">smpiActCheckSecurityReq</a> from smpi_act.o(i.smpiActCheckSecurityReq) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[180]">smpiActCnfVerify</a> from smpi_act.o(i.smpiActCnfVerify) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[17b]">smpiActPairReq</a> from smpi_act.o(i.smpiActPairReq) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[17f]">smpiActProcPairCnf</a> from smpi_act.o(i.smpiActProcPairCnf) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[17e]">smpiActProcPairRsp</a> from smpi_act.o(i.smpiActProcPairRsp) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[17d]">smpiActProcSecurityReq</a> from smpi_act.o(i.smpiActProcSecurityReq) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[183]">smpiActRcvKey</a> from smpi_act.o(i.smpiActRcvKey) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[184]">smpiActSendKey</a> from smpi_act.o(i.smpiActSendKey) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[182]">smpiActSetupKeyDist</a> from smpi_act.o(i.smpiActSetupKeyDist) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[181]">smpiActStkEncrypt</a> from smpi_act.o(i.smpiActStkEncrypt) referenced 2 times from smpi_sc_sm.o(.constdata)
 <LI><a href="#[186]">smpiScActAuthSelect</a> from smpi_sc_act.o(i.smpiScActAuthSelect) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[19d]">smpiScActDHKeyCheckSend</a> from smpi_sc_act.o(i.smpiScActDHKeyCheckSend) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[19e]">smpiScActDHKeyCheckVerify</a> from smpi_sc_act.o(i.smpiScActDHKeyCheckVerify) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[189]">smpiScActJwncCalcF4</a> from smpi_sc_act.o(i.smpiScActJwncCalcF4) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18a]">smpiScActJwncCalcG2</a> from smpi_sc_act.o(i.smpiScActJwncCalcG2) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[188]">smpiScActJwncSendRand</a> from smpi_sc_act.o(i.smpiScActJwncSendRand) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[187]">smpiScActJwncSetup</a> from smpi_sc_act.o(i.smpiScActJwncSetup) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[194]">smpiScActOobCalcCb</a> from smpi_sc_act.o(i.smpiScActOobCalcCb) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[196]">smpiScActOobProcRand</a> from smpi_sc_act.o(i.smpiScActOobProcRand) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[195]">smpiScActOobSendRand</a> from smpi_sc_act.o(i.smpiScActOobSendRand) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[18f]">smpiScActPkCalcCa</a> from smpi_sc_act.o(i.smpiScActPkCalcCa) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[190]">smpiScActPkCalcCb</a> from smpi_sc_act.o(i.smpiScActPkCalcCb) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[193]">smpiScActPkCheck</a> from smpi_sc_act.o(i.smpiScActPkCheck) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[191]">smpiScActPkSendCnf</a> from smpi_sc_act.o(i.smpiScActPkSendCnf) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[192]">smpiScActPkSendRand</a> from smpi_sc_act.o(i.smpiScActPkSendRand) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[185]">smpiScActSendPubKey</a> from smpi_sc_act.o(i.smpiScActSendPubKey) referenced from smpi_sc_sm.o(.constdata)
 <LI><a href="#[11]">terminalCommandEchoHandler</a> from terminal.o(i.terminalCommandEchoHandler) referenced 2 times from terminal.o(.data)
 <LI><a href="#[10]">terminalCommandHelpHandler</a> from terminal.o(i.terminalCommandHelpHandler) referenced 2 times from terminal.o(.data)
 <LI><a href="#[e6]">wsfBufIoUartRxHandler</a> from wsf_bufio.o(i.wsfBufIoUartRxHandler) referenced from wsf_bufio.o(i.WsfBufIoUartInit)
 <LI><a href="#[e7]">wsfBufIoUartTxHandler</a> from wsf_bufio.o(i.wsfBufIoUartTxHandler) referenced from wsf_bufio.o(i.WsfBufIoUartInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[82]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(.text)
</UL>
<P><STRONG><a name="[81d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1fc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _main_scatterload &rArr; __scatterload &rArr; __main_after_scatterload &rArr; SystemInit &rArr; PalSysInit &rArr; PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[224]"></a>$Super$$__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[81e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[81f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[820]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[821]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[822]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[823]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[20c]"></a>MXC_FLC_Com_VerifyData</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, flc_common.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_FLC_Com_VerifyData
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
</UL>

<P><STRONG><a name="[1fe]"></a>MXC_FLC_Com_Write</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, flc_common.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write32
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write128
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write
</UL>

<P><STRONG><a name="[202]"></a>MXC_FLC_Com_Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flc_common.o(.flashprog), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[203]"></a>MXC_FLC_Busy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flc_me17.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_PageErase
</UL>

<P><STRONG><a name="[205]"></a>MXC_FLC_ME17_PageErase</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, flc_me17.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MXC_FLC_ME17_PageErase &rArr; MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_PageErase
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetPhysicalAddress
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetByAddress
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Flash_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_PageErase
</UL>

<P><STRONG><a name="[20a]"></a>MXC_FLC_ME17_Write128</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, flc_me17.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_VerifyData
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Write128
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetPhysicalAddress
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetByAddress
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Flash_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write128
</UL>

<P><STRONG><a name="[20f]"></a>MXC_FLC_RevA_Busy</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, flc_reva.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_busy_flc
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Busy
</UL>

<P><STRONG><a name="[210]"></a>MXC_FLC_RevA_MassErase</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, flc_reva.o(.flashprog), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_prepare_flc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_busy_flc
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_MassErase
</UL>

<P><STRONG><a name="[211]"></a>MXC_FLC_RevA_PageErase</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flc_reva.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_prepare_flc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_PageErase
</UL>

<P><STRONG><a name="[212]"></a>MXC_FLC_RevA_Write32</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, flc_reva.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write128
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_prepare_flc
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Write32
</UL>

<P><STRONG><a name="[213]"></a>MXC_FLC_RevA_Write128</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, flc_reva.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_prepare_flc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_busy_flc
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Write128
</UL>

<P><STRONG><a name="[204]"></a>MXC_FLC_RevB_Busy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flc_revb.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Busy
</UL>

<P><STRONG><a name="[214]"></a>MXC_FLC_RevB_MassErase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flc_revb.o(.flashprog), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_MassErase
</UL>

<P><STRONG><a name="[208]"></a>MXC_FLC_RevB_PageErase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flc_revb.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_PageErase
</UL>

<P><STRONG><a name="[215]"></a>MXC_FLC_RevB_Write32</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, flc_revb.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write32
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write32
</UL>

<P><STRONG><a name="[20b]"></a>MXC_FLC_RevB_Write128</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flc_revb.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write128
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>CRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DVS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIOWAKE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>PT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>RISCV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RSV02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RSV11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RSV12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RSV17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RSV18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RSV19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RSV21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RSV22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RSV27_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RSV32_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RSV33_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RSV35_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RSV37_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RSV38_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RSV55_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RSV57_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RSV59_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RSV61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RSV64_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>RSV65_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RSV66_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RSV68_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>RSV69_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>RSV70_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RSV71_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RSV72_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>RSV73_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RSV74_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>RSV75_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RSV76_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RSV77_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RSV78_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>RSV79_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RSV80_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>RSV81_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>RSV85_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RSV86_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>RSV87_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>RSV89_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>RSV90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RSV91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>RSV92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>RSV93_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>RSV94_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>RSV95_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RSV96_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SIMO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WDT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32655.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[216]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayInit
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetHostFeatures
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrBuildRemapTable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSelectNextDataChannel
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[824]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[825]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetEccKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCalculateDbHash
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteCmd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcAttCback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsSetAttr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGenerateDhKey
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadByTypeReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindByTypeValueReq
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfGetFeatures
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecPrepWrite
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecEncryptReq
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActStorePin
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActSendPairCnf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfVerCalc1
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActStkEncrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcPairCnf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScProcPairing
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcSharedSecret
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetDbHash
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetKey
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerDbHash
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetHdlList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListAdd
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamRsp
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamReq
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateMstVectors
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvPdu
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyReadLocalP256PubKeyInd
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyGenerateDhKeyInd
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_Read
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_Write
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_Random
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_set_key_iv
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_crc
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_copy_data
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_tx_insert_data
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_tx_copy_data
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetDefaultRunTimeCfg
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendContinuingReq
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListRemove
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActUpdateAdvParam
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDirectConnectTimeout
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSlvInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvRxScanReq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoSetEncryptPacketCount
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoSetDecryptPacketCount
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEnable
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyReadLocalP256PubKeyInd
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyGenerateDhKeyInd
</UL>

<P><STRONG><a name="[826]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[827]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[828]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateDhKeyContinue
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[829]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[82a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharCmpl
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActResolveAddr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActGenAddr
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActStorePin
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActStkEncrypt
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGenerateLtk
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscConnOpen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[240]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivReset
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbAlloc
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbInit
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbAddDevice
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNewRecord
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleInit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTestInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnSlaveInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnMasterInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleAdvSlaveInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleScanMasterInit
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptEnable
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbInit
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSlvInit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvAdvDefaults
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanDefaults
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSetDefaults
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitDefaults
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnDefaults
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmInit
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrConnInit
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_start
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llTestResetHandler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInit
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[82b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5a0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFmtInt
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalExecute
</UL>

<P><STRONG><a name="[5e0]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalCommandBtnHandler
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalExecute
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalCommandEchoHandler
</UL>

<P><STRONG><a name="[260]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcUuidCmp
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attUuidCmp16to128
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuidCmp
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivAesActResAddrAesCmpl
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCheck
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobSendRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcG2
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActCnfVerify
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[7e4]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFmtInt
</UL>

<P><STRONG><a name="[21c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalPinCodeHandler
</UL>

<P><STRONG><a name="[1fd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __scatterload &rArr; __main_after_scatterload &rArr; SystemInit &rArr; PalSysInit &rArr; PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[82c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[82d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[220]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[221]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[222]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[82e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[82f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__main_after_scatterload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_max32655.o(i.$Sub$$__main_after_scatterload))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = __main_after_scatterload &rArr; SystemInit &rArr; PalSysInit &rArr; PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[225]"></a>AppAddDevToResList</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_main.o(i.AppAddDevToResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AppAddDevToResList &rArr; DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLlPrivacySupported
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecPairCmpl
</UL>

<P><STRONG><a name="[22a]"></a>AppAddNextDevToResList</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, app_main.o(i.AppAddNextDevToResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AppAddNextDevToResList &rArr; DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetPrivacyMode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetAddrResEnable
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetPeerRpao
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetNextRecord
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcRestoreResolvingList
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcPrivAddDevToResListInd
</UL>

<P><STRONG><a name="[254]"></a>AppCheckBonded</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_main.o(i.AppCheckBonded))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[22f]"></a>AppClearAllBondingInfo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_main.o(i.AppClearAllBondingInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppClearAllBondingInfo &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLlPrivacySupported
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivClearResList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetAddrResEnable
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmLlPrivEnabled
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbDeleteAllRecords
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[234]"></a>AppConnClose</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_main.o(i.AppConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AppConnClose &rArr; DmConnClose &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnClose
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[236]"></a>AppConnOpen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_master_leg.o(i.AppConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AppConnOpen &rArr; appConnOpen &rArr; DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appConnOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanStop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
</UL>

<P><STRONG><a name="[651]"></a>AppConnOpenList</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_main.o(i.AppConnOpenList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AppConnOpenList
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[239]"></a>AppDbCheckValidRecord</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, app_db.o(i.AppDbCheckValidRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AppDbCheckValidRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbDeleteRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecConnClose
</UL>

<P><STRONG><a name="[231]"></a>AppDbDeleteAllRecords</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_db.o(i.AppDbDeleteAllRecords))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
</UL>

<P><STRONG><a name="[23a]"></a>AppDbDeleteRecord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbDeleteRecord))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbCheckValidRecord
</UL>

<P><STRONG><a name="[23b]"></a>AppDbFindByAddr</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_db.o(i.AppDbFindByAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AppDbFindByAddr &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHostAddrType
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appConnOpen
</UL>

<P><STRONG><a name="[5de]"></a>AppDbGetDbHash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetDbHash))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[263]"></a>AppDbGetDiscStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetDiscStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
</UL>

<P><STRONG><a name="[253]"></a>AppDbGetHdl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_main.o(i.AppDbGetHdl))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscGapCmpl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleSvcChangeCnf
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[262]"></a>AppDbGetHdlList</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetHdlList))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
</UL>

<P><STRONG><a name="[227]"></a>AppDbGetKey</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_db.o(i.AppDbGetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddDevToResList
</UL>

<P><STRONG><a name="[22d]"></a>AppDbGetNextRecord</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, app_db.o(i.AppDbGetNextRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AppDbGetNextRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbRecordInUse
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
</UL>

<P><STRONG><a name="[2a7]"></a>AppDbGetPeerAddedToRl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetPeerAddedToRl))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
</UL>

<P><STRONG><a name="[25f]"></a>AppDbGetPeerDbHash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetPeerDbHash))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[22b]"></a>AppDbGetPeerRpao</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbGetPeerRpao))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
</UL>

<P><STRONG><a name="[27f]"></a>AppDbInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_db.o(i.AppDbInit))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlerInit
</UL>

<P><STRONG><a name="[5d6]"></a>AppDbIsCacheCheckedByHash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_db.o(i.AppDbIsCacheCheckedByHash))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[23f]"></a>AppDbNewRecord</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, app_db.o(i.AppDbNewRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppDbNewRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>

<P><STRONG><a name="[242]"></a>AppDbNvmDeleteAll</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_db.o(i.AppDbNvmDeleteAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AppDbNvmDeleteAll &rArr; WsfNvmEraseData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[244]"></a>AppDbNvmReadAll</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, app_db.o(i.AppDbNvmReadAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AppDbNvmReadAll &rArr; WsfNvmReadData &rArr; PalFlashRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[246]"></a>AppDbNvmStoreBond</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, app_db.o(i.AppDbNvmStoreBond))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AppDbNvmStoreBond &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDbFindIndx
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[249]"></a>AppDbNvmStoreCacheByHash</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_db.o(i.AppDbNvmStoreCacheByHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AppDbNvmStoreCacheByHash &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDbFindIndx
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[24a]"></a>AppDbNvmStoreHdlList</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_db.o(i.AppDbNvmStoreHdlList))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AppDbNvmStoreHdlList &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDbFindIndx
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[24b]"></a>AppDbNvmStorePeerRpao</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_db.o(i.AppDbNvmStorePeerRpao))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AppDbNvmStorePeerRpao &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDbFindIndx
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscGapCmpl
</UL>

<P><STRONG><a name="[23e]"></a>AppDbRecordInUse</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_db.o(i.AppDbRecordInUse))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appConnOpen
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetNextRecord
</UL>

<P><STRONG><a name="[261]"></a>AppDbSetCacheByHash</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_db.o(i.AppDbSetCacheByHash))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[5df]"></a>AppDbSetClientChangeAwareState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_db.o(i.AppDbSetClientChangeAwareState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppDbSetClientChangeAwareState
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleSvcChangeCnf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[24c]"></a>AppDbSetDbHash</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_db.o(i.AppDbSetDbHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AppDbSetDbHash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[255]"></a>AppDbSetDiscStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_db.o(i.AppDbSetDiscStatus))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[24d]"></a>AppDbSetHdlList</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_db.o(i.AppDbSetHdlList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppDbSetHdlList &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
</UL>

<P><STRONG><a name="[24e]"></a>AppDbSetKey</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, app_db.o(i.AppDbSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppDbSetKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecStoreKey
</UL>

<P><STRONG><a name="[2a8]"></a>AppDbSetPeerAddedToRl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_db.o(i.AppDbSetPeerAddedToRl))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivRemDevFromResListInd
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivAddDevToResListInd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
</UL>

<P><STRONG><a name="[24f]"></a>AppDbSetPeerDbHash</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_db.o(i.AppDbSetPeerDbHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AppDbSetPeerDbHash &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[657]"></a>AppDbSetPeerRpao</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_db.o(i.AppDbSetPeerRpao))
<BR><BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscGapCmpl
</UL>

<P><STRONG><a name="[5da]"></a>AppDbValidateRecord</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_db.o(i.AppDbValidateRecord))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecPairCmpl
</UL>

<P><STRONG><a name="[250]"></a>AppDiscComplete</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_disc.o(i.AppDiscComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AppDiscComplete &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCheckBonded
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetHdlList
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetDiscStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[256]"></a>AppDiscConfigure</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, app_disc.o(i.AppDiscConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AppDiscConfigure &rArr; AttcDiscConfigStart &rArr; attcDiscConfigNext &rArr; AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigStart
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[259]"></a>AppDiscFindService</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, app_disc.o(i.AppDiscFindService))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AppDiscFindService &rArr; AttcDiscService &rArr; AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscService
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WpcP1Discover
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDiscover
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapDiscover
</UL>

<P><STRONG><a name="[31b]"></a>AppDiscInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_disc.o(i.AppDiscInit))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandlerInit
</UL>

<P><STRONG><a name="[25b]"></a>AppDiscProcAttMsg</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, app_disc.o(i.AppDiscProcAttMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = AppDiscProcAttMsg &rArr; AttcDiscCharCmpl &rArr; attcDiscProcDesc &rArr; attcDiscDescriptors &rArr; AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscServiceCmpl
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigCmpl
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharStart
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharCmpl
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSecLevel
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddrType
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddr
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerDbHash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetCacheByHash
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNewRecord
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetPeerDbHash
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdlList
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetDiscStatus
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscCfgStart
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[26b]"></a>AppDiscProcDmMsg</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_disc.o(i.AppDiscProcDmMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AppDiscProcDmMsg &rArr; appDiscPairCmpl &rArr; appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairFail
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscEncryptInd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscConnOpen
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscConnClose
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[271]"></a>AppDiscReadDatabaseHash</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_disc.o(i.AppDiscReadDatabaseHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadByTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairFail
</UL>

<P><STRONG><a name="[321]"></a>AppDiscRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_disc.o(i.AppDiscRegister))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[655]"></a>AppDiscSetHdlList</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, app_disc.o(i.AppDiscSetHdlList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AppDiscSetHdlList
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[273]"></a>AppHandleNumericComparison</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, app_main.o(i.AppHandleNumericComparison))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AppHandleNumericComparison &rArr; DmSecCompareRsp &rArr; SmpScGetCancelMsgWithReattempt &rArr; SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetCompareValue
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecCompareRsp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiDisplayConfirmValue
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[277]"></a>AppHandlePasskey</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_main.o(i.AppHandlePasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AppHandlePasskey &rArr; AppUiAction &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiAction
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiDisplayPasskey
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[e4]"></a>AppHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_main.o(i.AppHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppHandler &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiBtnPressed
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appProcMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[27e]"></a>AppHandlerInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_main.o(i.AppHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppHandlerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[31a]"></a>AppMasterInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_master.o(i.AppMasterInit))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandlerInit
</UL>

<P><STRONG><a name="[280]"></a>AppMasterProcDmMsg</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, app_master.o(i.AppMasterProcDmMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AppMasterProcDmMsg &rArr; appMasterResolvedAddrInd &rArr; AppConnOpen &rArr; appConnOpen &rArr; DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanStop
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanStart
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanReport
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterRemoteConnParamReq
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterConnOpen
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterConnClose
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[288]"></a>AppMasterResolveAddr</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, app_master.o(i.AppMasterResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AppMasterResolveAddr &rArr; DmPrivResolveAddr &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultFind
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetNextRecord
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
</UL>

<P><STRONG><a name="[28b]"></a>AppMasterSecProcDmMsg</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, app_master.o(i.AppMasterSecProcDmMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppMasterSecProcDmMsg &rArr; appMasterSecSlaveReq &rArr; appMasterInitiateSec &rArr; DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivSetAddrResEnableInd
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivRemDevFromResListInd
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivAddDevToResListInd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecStoreKey
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecSlaveReq
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecPairFailed
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecPairCmpl
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecEncryptInd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecConnOpen
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecConnClose
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[296]"></a>AppMasterSecurityReq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_master.o(i.AppMasterSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AppMasterSecurityReq &rArr; appMasterInitiateSec &rArr; DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSecLevel
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[5d9]"></a>AppScanGetNumResults</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_master.o(i.AppScanGetNumResults))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanStop
</UL>

<P><STRONG><a name="[298]"></a>AppScanStart</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, app_master_leg.o(i.AppScanStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = AppScanStart &rArr; appMasterScanMode &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStart
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetInterval
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanMode
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimerHandler
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcClose
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[29b]"></a>AppScanStop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_master_leg.o(i.AppScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppScanStop &rArr; appMasterScanMode &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStop
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanMode
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
</UL>

<P><STRONG><a name="[29d]"></a>AppServerProcAttMsg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_server.o(i.AppServerProcAttMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AppServerProcAttMsg &rArr; appServerHandleDbHashUpdate &rArr; GattSendServiceChangedInd &rArr; AttsHandleValueInd &rArr; attsHandleValueIndNtf &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleSvcChangeCnf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[2a0]"></a>AppTerminalInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_terminal.o(i.AppTerminalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppTerminalInit &rArr; TerminalInit &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsSetNextHandler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoUartRegister
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRegisterUartTxFunc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRegisterCommand
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27b]"></a>AppUiAction</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, app_ui.o(i.AppUiAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppUiAction &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlePasskey
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[27d]"></a>AppUiBtnPressed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ui.o(i.AppUiBtnPressed))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandler
</UL>

<P><STRONG><a name="[320]"></a>AppUiBtnRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ui.o(i.AppUiBtnRegister))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[4e7]"></a>AppUiBtnTest</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_ui.o(i.AppUiBtnTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AppUiBtnTest
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Handler_2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Handler_1
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalCommandBtnHandler
</UL>

<P><STRONG><a name="[275]"></a>AppUiDisplayConfirmValue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_ui.o(i.AppUiDisplayConfirmValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppUiDisplayConfirmValue &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandleNumericComparison
</UL>

<P><STRONG><a name="[27a]"></a>AppUiDisplayPasskey</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_ui.o(i.AppUiDisplayPasskey))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppUiDisplayPasskey &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlePasskey
</UL>

<P><STRONG><a name="[2a6]"></a>AppUpdatePrivacyMode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app_main.o(i.AppUpdatePrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AppUpdatePrivacyMode &rArr; DmPrivSetPrivacyMode &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetPrivacyMode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerAddedToRl
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetPeerRpao
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetPeerAddedToRl
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterConnClose
</UL>

<P><STRONG><a name="[e2]"></a>AttHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, att_main.o(i.AttHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AttHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[2a9]"></a>AttHandlerInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, att_main.o(i.AttHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AttHandlerInit &rArr; DmConnRegister &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRegister
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[2ac]"></a>AttMsgFree</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, att_main.o(i.AttMsgFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AttMsgFree &rArr; WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
</UL>

<P><STRONG><a name="[2ae]"></a>AttRegister</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, att_main.o(i.AttRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AttRegister &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxRxAclLen
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[267]"></a>AttcDiscCharCmpl</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, attc_disc.o(i.AttcDiscCharCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AttcDiscCharCmpl &rArr; attcDiscProcDesc &rArr; attcDiscDescriptors &rArr; AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDesc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcChar
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[266]"></a>AttcDiscCharStart</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, attc_disc.o(i.AttcDiscCharStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AttcDiscCharStart &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadByTypeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[26a]"></a>AttcDiscConfigCmpl</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, attc_disc.o(i.AttcDiscConfigCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AttcDiscConfigCmpl &rArr; attcDiscConfigNext &rArr; AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscConfigNext
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[2b4]"></a>AttcDiscConfigResume</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, attc_disc.o(i.AttcDiscConfigResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AttcDiscConfigResume &rArr; attcDiscConfigNext &rArr; AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscConfigNext
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscEncryptInd
</UL>

<P><STRONG><a name="[258]"></a>AttcDiscConfigStart</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, attc_disc.o(i.AttcDiscConfigStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AttcDiscConfigStart &rArr; attcDiscConfigNext &rArr; AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscConfigNext
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscConfigure
</UL>

<P><STRONG><a name="[25a]"></a>AttcDiscService</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, attc_disc.o(i.AttcDiscService))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AttcDiscService &rArr; AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindByTypeValueReq
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>

<P><STRONG><a name="[265]"></a>AttcDiscServiceCmpl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, attc_disc.o(i.AttcDiscServiceCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AttcDiscServiceCmpl &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[2b5]"></a>AttcFindByTypeValueReq</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, attc_read.o(i.AttcFindByTypeValueReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscService
</UL>

<P><STRONG><a name="[2b8]"></a>AttcFindInfoReq</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, attc_proc.o(i.AttcFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscDescriptors
</UL>

<P><STRONG><a name="[2b9]"></a>AttcIndConfirm</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, attc_proc.o(i.AttcIndConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = AttcIndConfirm &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByHandle
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCtrlCback
</UL>

<P><STRONG><a name="[598]"></a>AttcInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, attc_main.o(i.AttcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AttcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[2bc]"></a>AttcMtuReq</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, attc_proc.o(i.AttcMtuReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AttcMtuReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
</UL>

<P><STRONG><a name="[272]"></a>AttcReadByTypeReq</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, attc_read.o(i.AttcReadByTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscReadDatabaseHash
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharStart
</UL>

<P><STRONG><a name="[2bd]"></a>AttcReadReq</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, attc_proc.o(i.AttcReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AttcReadReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscConfigNext
</UL>

<P><STRONG><a name="[2be]"></a>AttcWriteCmd</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, attc_write.o(i.AttcWriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AttcWriteCmd &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSendData
</UL>

<P><STRONG><a name="[2bf]"></a>AttcWriteReq</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, attc_proc.o(i.AttcWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscConfigNext
</UL>

<P><STRONG><a name="[2c0]"></a>AttsAddGroup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, atts_main.o(i.AttsAddGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = AttsAddGroup &rArr; attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfSetHashUpdateStatus
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvcCoreAddGroup
</UL>

<P><STRONG><a name="[2c5]"></a>AttsCalculateDbHash</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, atts_main.o(i.AttsCalculateDbHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = AttsCalculateDbHash &rArr; AttsHashDatabaseString &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIsHashableAttr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsHashDatabaseString
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[2c8]"></a>AttsCccEnabled</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, atts_ccc.o(i.AttsCccEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AttsCccEnabled &rArr; AttsCccGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCccGet
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSecLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattSendServiceChangedInd
</UL>

<P><STRONG><a name="[2c9]"></a>AttsCccGet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atts_ccc.o(i.AttsCccGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AttsCccGet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCccGetTbl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCccEnabled
</UL>

<P><STRONG><a name="[60d]"></a>AttsCsfGetClientChangeAwareState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, atts_csf.o(i.AttsCsfGetClientChangeAwareState))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
</UL>

<P><STRONG><a name="[2cb]"></a>AttsCsfGetFeatures</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atts_csf.o(i.AttsCsfGetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AttsCsfGetFeatures &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
</UL>

<P><STRONG><a name="[2cc]"></a>AttsCsfSetClientChangeAwareState</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, atts_csf.o(i.AttsCsfSetClientChangeAwareState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AttsCsfSetClientChangeAwareState &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[2cd]"></a>AttsHandleValueInd</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, atts_ind.o(i.AttsHandleValueInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AttsHandleValueInd &rArr; attsHandleValueIndNtf &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattSendServiceChangedInd
</UL>

<P><STRONG><a name="[2c7]"></a>AttsHashDatabaseString</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, atts_main.o(i.AttsHashDatabaseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = AttsHashDatabaseString &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCalculateDbHash
</UL>

<P><STRONG><a name="[597]"></a>AttsIndInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, atts_ind.o(i.AttsIndInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AttsIndInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[596]"></a>AttsInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, atts_main.o(i.AttsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AttsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[2d0]"></a>AttsSetAttr</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, atts_main.o(i.AttsSetAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AttsSetAttr &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
</UL>

<P><STRONG><a name="[4b]"></a>BTLE_AGC_EVENT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbb_intc.o(i.BTLE_AGC_EVENT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>BTLE_CFO_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_CFO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_CFO_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>BTLE_GP_EVENT_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_GP_EVENT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_GP_EVENT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>BTLE_INV_APB_ADDR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbb_intc.o(i.BTLE_INV_APB_ADDR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>BTLE_IQ_DATA_VALID_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbb_intc.o(i.BTLE_IQ_DATA_VALID_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>BTLE_RFFE_SPIM_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_RFFE_SPIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_RFFE_SPIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>BTLE_RX_AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbb_intc.o(i.BTLE_RX_AES_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>BTLE_RX_ENG_DET_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_RX_ENG_DET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_RX_ENG_DET_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>BTLE_RX_RCVD_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_RX_RCVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTLE_RX_RCVD_IRQHandler &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_clear_pending_rx_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>BTLE_SFD_DET_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_SFD_DET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_SFD_DET_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>BTLE_SFD_TO_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_SFD_TO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTLE_SFD_TO_IRQHandler &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_clear_pending_rx_ints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>BTLE_SIG_DET_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dbb_intc.o(i.BTLE_SIG_DET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BTLE_SIG_DET_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>BTLE_TX_AES_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbb_intc.o(i.BTLE_TX_AES_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>BTLE_TX_DONE_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dbb_intc.o(i.BTLE_TX_DONE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTLE_TX_DONE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[308]"></a>BbAdjustTime</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bb_main.o(i.BbAdjustTime))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestTxOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestRxOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteConnOp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteConnOp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[2d8]"></a>BbBleAdvSlaveInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bb_ble_adv_slave.o(i.BbBleAdvSlaveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbBleAdvSlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleRegisterOp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvResetHandler
</UL>

<P><STRONG><a name="[2da]"></a>BbBleConnMasterInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bb_ble_conn_master.o(i.BbBleConnMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbBleConnMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleRegisterOp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[2db]"></a>BbBleConnSlaveInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bb_ble_conn_slave.o(i.BbBleConnSlaveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbBleConnSlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleRegisterOp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnResetHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[2dc]"></a>BbBleInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bb_ble_main.o(i.BbBleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BbBleInit &rArr; BbRegisterProt
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbRegisterProtLowPower
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbRegisterProt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
</UL>

<P><STRONG><a name="[412]"></a>BbBleInitResolvingList</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bb_ble_reslist.o(i.BbBleInitResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BbBleInitResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetBbRtCfg
</UL>

<P><STRONG><a name="[411]"></a>BbBleInitWhiteList</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bb_ble_whitelist.o(i.BbBleInitWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BbBleInitWhiteList
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetBbRtCfg
</UL>

<P><STRONG><a name="[2e0]"></a>BbBlePduFiltCheck</STRONG> (Thumb, 596 bytes, Stack size 96 bytes, bb_ble_pdufilt.o(i.BbBlePduFiltCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltWhiteList
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolvePeer
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolveLocal
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltMatchPeer
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltMatchLocal
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCreateAdvRpt
</UL>

<P><STRONG><a name="[2e7]"></a>BbBleResListAdd</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bb_ble_reslist.o(i.BbBleResListAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BbBleResListAdd &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateRpa
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAddDeviceToResolvingList
</UL>

<P><STRONG><a name="[2ea]"></a>BbBleResListCheckResolveLocal</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, bb_ble_reslist.o(i.BbBleResListCheckResolveLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BbBleResListCheckResolveLocal &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolveLocal
</UL>

<P><STRONG><a name="[617]"></a>BbBleResListCheckResolvePeer</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, bb_ble_reslist.o(i.BbBleResListCheckResolvePeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BbBleResListCheckResolvePeer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolvePeer
</UL>

<P><STRONG><a name="[3c9]"></a>BbBleResListClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_ble_reslist.o(i.BbBleResListClear))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlClearResolvingList
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMsgDispatcher
</UL>

<P><STRONG><a name="[2eb]"></a>BbBleResListGeneratePeer</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListGeneratePeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BbBleResListGeneratePeer &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateRpa
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrChoosePeerAddr
</UL>

<P><STRONG><a name="[2ec]"></a>BbBleResListGetPrivacyMode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListGetPrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListGetPrivacyMode &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolvePeer
</UL>

<P><STRONG><a name="[417]"></a>BbBleResListGetSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_ble_reslist.o(i.BbBleResListGetSize))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadResolvingListSize
</UL>

<P><STRONG><a name="[2ed]"></a>BbBleResListHandleTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bb_ble_reslist.o(i.BbBleResListHandleTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BbBleResListHandleTimeout &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateRpa
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
</UL>

<P><STRONG><a name="[2ee]"></a>BbBleResListLocalStatus</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListLocalStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListLocalStatus &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolveLocal
</UL>

<P><STRONG><a name="[2ef]"></a>BbBleResListPeerStatus</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListPeerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListPeerStatus &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolvePeer
</UL>

<P><STRONG><a name="[2f0]"></a>BbBleResListReadLocal</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListReadLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListReadLocal &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrChooseAdvA
</UL>

<P><STRONG><a name="[2f1]"></a>BbBleResListReadPeer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListReadPeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListReadPeer &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
</UL>

<P><STRONG><a name="[2f2]"></a>BbBleResListRemove</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListRemove &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoveDeviceFromResolvingList
</UL>

<P><STRONG><a name="[2f4]"></a>BbBleResListResolveLocal</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bb_ble_reslist.o(i.BbBleResListResolveLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BbBleResListResolveLocal &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbVerifyRpa
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolveLocal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
</UL>

<P><STRONG><a name="[2f6]"></a>BbBleResListResolvePeer</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, bb_ble_reslist.o(i.BbBleResListResolvePeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbVerifyRpa
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltResolvePeer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
</UL>

<P><STRONG><a name="[3d5]"></a>BbBleResListSetAddrResNeededCback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_ble_reslist.o(i.BbBleResListSetAddrResNeededCback))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrPrivInit
</UL>

<P><STRONG><a name="[2f7]"></a>BbBleResListSetPrivacyMode</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListSetPrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListSetPrivacyMode &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetPrivacyMode
</UL>

<P><STRONG><a name="[2f8]"></a>BbBleResListUpdateLocal</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.BbBleResListUpdateLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BbBleResListUpdateLocal &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
</UL>

<P><STRONG><a name="[2f9]"></a>BbBleRxData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bb_ble_conn.o(i.BbBleRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BbBleRxData &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBeginOp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPostProcessing
</UL>

<P><STRONG><a name="[2fd]"></a>BbBleScanMasterInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bb_ble_adv_master.o(i.BbBleScanMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbBleScanMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleRegisterOp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanResetHandler
</UL>

<P><STRONG><a name="[2fe]"></a>BbBleTestInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bb_ble_dtm.o(i.BbBleTestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbBleTestInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleRegisterOp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlTestInit
</UL>

<P><STRONG><a name="[2ff]"></a>BbBleTxData</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bb_ble_conn.o(i.BbBleTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BbBleTxData &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
</UL>

<P><STRONG><a name="[619]"></a>BbBleWhiteListCheckAddr</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bb_ble_whitelist.o(i.BbBleWhiteListCheckAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BbBleWhiteListCheckAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltWhiteList
</UL>

<P><STRONG><a name="[3c8]"></a>BbBleWhiteListClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bb_ble_whitelist.o(i.BbBleWhiteListClear))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMsgDispatcher
</UL>

<P><STRONG><a name="[618]"></a>BbBleWhiteListIsAnonymousAllowed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_ble_whitelist.o(i.BbBleWhiteListIsAnonymousAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBlePduFiltWhiteList
</UL>

<P><STRONG><a name="[3f9]"></a>BbCancelBod</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bb_main.o(i.BbCancelBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbCancelBod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEndTest
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryCurTailLoadNext
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
</UL>

<P><STRONG><a name="[303]"></a>BbExecuteBod</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, bb_main.o(i.BbExecuteBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbEnable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbProtStop
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbProtStart
</UL>
<BR>[Called By]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
</UL>

<P><STRONG><a name="[550]"></a>BbGetBbTimerBoundaryUs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_main.o(i.BbGetBbTimerBoundaryUs))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
</UL>

<P><STRONG><a name="[621]"></a>BbGetBodTerminateFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_main.o(i.BbGetBodTerminateFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnRxCompCback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnRxCompCback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
</UL>

<P><STRONG><a name="[700]"></a>BbGetClockAccuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_main.o(i.BbGetClockAccuracy))
<BR><BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeSca
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcTotalAccuracy
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeConnSca
</UL>

<P><STRONG><a name="[2fa]"></a>BbGetCurrentBod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_main.o(i.BbGetCurrentBod))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnRxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnRxCompCback
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
</UL>

<P><STRONG><a name="[53e]"></a>BbGetSchSetupDelayUs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bb_main.o(i.BbGetSchSetupDelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleCalcScanDurationUsec
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmGetOffsetUsec
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateOpCommit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchIsConflictResolvable
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmCheckConflict
</UL>

<P><STRONG><a name="[307]"></a>BbGetTargetTimeDelta</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, bb_main.o(i.BbGetTargetTimeDelta))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Called By]<UL><LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleCalcScanDurationUsec
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandler
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmGetOffsetUsec
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAbortSlvLatency
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckAbortSlvLatency
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchIsConflictResolvable
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmGetFirstAnchor
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmCheckConflict
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schGetTimeToExecBod
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schDueTimeInFuture
</UL>

<P><STRONG><a name="[309]"></a>BbInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bb_main.o(i.BbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = BbInit &rArr; PalBbInit &rArr; llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
</UL>

<P><STRONG><a name="[410]"></a>BbInitRunTimeCfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_main.o(i.BbInitRunTimeCfg))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetBbRtCfg
</UL>

<P><STRONG><a name="[544]"></a>BbRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bb_main.o(i.BbRegister))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandlerInit
</UL>

<P><STRONG><a name="[2de]"></a>BbRegisterProt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bb_main.o(i.BbRegisterProt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BbRegisterProt
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInit
</UL>

<P><STRONG><a name="[2df]"></a>BbRegisterProtLowPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_main.o(i.BbRegisterProtLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInit
</UL>

<P><STRONG><a name="[558]"></a>BbSetBodTerminateFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bb_main.o(i.BbSetBodTerminateFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteAdvOp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnIndHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnIndTxCompHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBeginOp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
</UL>

<P><STRONG><a name="[30b]"></a>BbStart</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bb_main.o(i.BbStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BbStart &rArr; bbProtStart
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbEnable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbProtStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfStart
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[30c]"></a>BbStop</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bb_main.o(i.BbStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbDisable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbProtStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActSelfTerm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActScanTerm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActResetTerm
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActResetTerm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActAdvTerm
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActScanTerm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActResetTerm
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessConnInd
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEndTest
</UL>

<P><STRONG><a name="[624]"></a>BbTerminateBod</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bb_main.o(i.BbTerminateBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BbTerminateBod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestCleanupOp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnRxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnRxCompCback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
</UL>

<P><STRONG><a name="[3fb]"></a>Bda64ToBstream</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bstream.o(i.Bda64ToBstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bda64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetBdAddr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDirectConnectTimeout
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktHandler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnDirectIndAdvPdu
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvPdu
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackScanReqPdu
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCreateAdvRpt
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnIndPduAddr
</UL>

<P><STRONG><a name="[23d]"></a>BdaCmp</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bda.o(i.BdaCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbFindByAddr
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByBdAddr
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultFind
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultAdd
</UL>

<P><STRONG><a name="[241]"></a>BdaCpy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bda.o(i.BdaCpy))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivHciHandler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActAesCmpl
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetRpa
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbAlloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetPrivacyMode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbAddDevice
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcRcvKey
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetKey
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultAdd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNewRecord
</UL>

<P><STRONG><a name="[30e]"></a>BdaIsZeros</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bda.o(i.BdaIsZeros))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BdaIsZeros &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetPendingRpa
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>

<P><STRONG><a name="[30f]"></a>Board_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, board.o(i.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Board_Init &rArr; Console_Init &rArr; MXC_UART_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e1]"></a>BstreamToBda64</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, bstream.o(i.BstreamToBda64))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetBdAddr
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAddDeviceToResolvingList
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetPrivacyMode
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoveDeviceFromResolvingList
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackConnIndPdu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPerSyncIndPdu
</UL>

<P><STRONG><a name="[7cb]"></a>BstreamToUint64</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, bstream.o(i.BstreamToUint64))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BstreamToUint64
</UL>
<BR>[Called By]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackFeaturePdu
</UL>

<P><STRONG><a name="[314]"></a>Calc128Cpy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, calc128.o(i.Calc128Cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Calc128Cpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAesHciCback
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeEncryptCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmacHciCback
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmac
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey2
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScSetOobCfg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecLescMsgHandler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobCalcCb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSetup
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncDisplay
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcRcvKey
</UL>

<P><STRONG><a name="[7ff]"></a>Calc128Cpy64</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, calc128.o(i.Calc128Cpy64))
<BR><BR>[Called By]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcS1
</UL>

<P><STRONG><a name="[7f1]"></a>Calc128Xor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calc128.o(i.Calc128Xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calc128Xor
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
</UL>

<P><STRONG><a name="[5ad]"></a>CalcCrc32</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, crc32.o(i.CalcCrc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmReadData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseData
</UL>

<P><STRONG><a name="[311]"></a>Console_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, board.o(i.Console_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Console_Init &rArr; MXC_UART_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[38]"></a>DMA0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pal_sys.o(i.DMA0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA0_IRQHandler &rArr; MXC_DMA_Handler &rArr; MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pal_sys.o(i.DMA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA1_IRQHandler &rArr; MXC_DMA_Handler &rArr; MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pal_sys.o(i.DMA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA2_IRQHandler &rArr; MXC_DMA_Handler &rArr; MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pal_sys.o(i.DMA3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA3_IRQHandler &rArr; MXC_DMA_Handler &rArr; MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>DatcHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, datc_main.o(i.DatcHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = DatcHandler &rArr; datcProcMsg &rArr; DmSecSetOob &rArr; SmpScSetOobCfg &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppServerProcAttMsg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[319]"></a>DatcHandlerInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, datc_main.o(i.DatcHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DatcHandlerInit &rArr; DmSecSetLocalIrk &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetLocalIrk
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterInit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[31d]"></a>DatcStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, datc_main.o(i.DatcStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DatcStart &rArr; SvcCoreAddGroup &rArr; AttsAddGroup &rArr; attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvcCoreAddGroup
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRegister
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevReset
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRegister
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttRegister
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiBtnRegister
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscRegister
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmDeleteAll
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcInitSvcHdlList
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[325]"></a>DmAdvSetAddrType</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_adv.o(i.DmAdvSetAddrType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmAdvSetAddrType &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
</UL>

<P><STRONG><a name="[326]"></a>DmConnCheckIdle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dm_conn.o(i.DmConnCheckIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DmConnCheckIdle &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsConnCback
</UL>

<P><STRONG><a name="[235]"></a>DmConnClose</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dm_conn.o(i.DmConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DmConnClose &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnClose
</UL>

<P><STRONG><a name="[329]"></a>DmConnIdByHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dm_conn.o(i.DmConnIdByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByHandle
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByHandle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cHciFlowCback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cRxSignalingPkt
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByHandle
</UL>

<P><STRONG><a name="[332]"></a>DmConnInUse</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnInUse))
<BR><BR>[Called By]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByConnId
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByConnId
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
</UL>

<P><STRONG><a name="[32a]"></a>DmConnInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dm_conn.o(i.DmConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmConnInit &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[7fd]"></a>DmConnLocalAddr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnLocalAddr))
<BR><BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
</UL>

<P><STRONG><a name="[7fb]"></a>DmConnLocalAddrType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnLocalAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>

<P><STRONG><a name="[7fa]"></a>DmConnLocalRpa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnLocalRpa))
<BR><BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>

<P><STRONG><a name="[32b]"></a>DmConnMasterInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm_conn_master_leg.o(i.DmConnMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmConnMasterInit &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[32c]"></a>DmConnOpen</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, dm_conn_master.o(i.DmConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appConnOpen
</UL>

<P><STRONG><a name="[25d]"></a>DmConnPeerAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnPeerAddr))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>

<P><STRONG><a name="[25e]"></a>DmConnPeerAddrType</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnPeerAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>

<P><STRONG><a name="[7fc]"></a>DmConnPeerRpa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnPeerRpa))
<BR><BR>[Called By]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>

<P><STRONG><a name="[2ab]"></a>DmConnRegister</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dm_conn.o(i.DmConnRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DmConnRegister &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandlerInit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttHandlerInit
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[5e6]"></a>DmConnRole</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnRole))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cRxSignalingPkt
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResumeAttemptsState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[269]"></a>DmConnSecLevel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dm_conn.o(i.DmConnSecLevel))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecurityReq
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCccEnabled
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecSlaveReq
</UL>

<P><STRONG><a name="[32e]"></a>DmConnSetAddrType</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_conn_master.o(i.DmConnSetAddrType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmConnSetAddrType &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
</UL>

<P><STRONG><a name="[32f]"></a>DmConnSetConnSpec</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dm_conn.o(i.DmConnSetConnSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DmConnSetConnSpec &rArr; dmConnSetConnSpec &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSetConnSpec
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSetup
</UL>

<P><STRONG><a name="[331]"></a>DmConnSetDataLen</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, dm_conn.o(i.DmConnSetDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DmConnSetDataLen &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[251]"></a>DmConnSetIdle</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dm_conn.o(i.DmConnSetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInUse
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscConfigure
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsMsgCback
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDiscBusy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecMsgHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingFailed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCmpl
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActPairReq
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>

<P><STRONG><a name="[333]"></a>DmDevPrivInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm_dev_priv.o(i.DmDevPrivInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmDevPrivInit &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[334]"></a>DmDevPrivStart</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dm_dev_priv.o(i.DmDevPrivStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DmDevPrivStart &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[324]"></a>DmDevReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dm_dev.o(i.DmDevReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DmDevReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[335]"></a>DmDevSetFilterPolicy</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, dm_dev.o(i.DmDevSetFilterPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmDevSetFilterPolicy &rArr; dmDevSetFilterPolicy
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevSetFilterPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[337]"></a>DmDevVsInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dm_dev.o(i.DmDevVsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmDevVsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciVsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[663]"></a>DmFindAdType</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dm_main.o(i.DmFindAdType))
<BR><BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActHciReport
</UL>

<P><STRONG><a name="[e1]"></a>DmHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm_main.o(i.DmHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DmHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[339]"></a>DmHandlerInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm_main.o(i.DmHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmHandlerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciEvtRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[23c]"></a>DmHostAddrType</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dm_main.o(i.DmHostAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbFindByAddr
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>

<P><STRONG><a name="[33b]"></a>DmInitPhyToIdx</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, dm_main.o(i.DmInitPhyToIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DmInitPhyToIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmInitPhyToIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSetConnSpec
</UL>

<P><STRONG><a name="[33d]"></a>DmL2cConnUpdateInd</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, dm_conn_master.o(i.DmL2cConnUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DmL2cConnUpdateInd &rArr; dmConnUpdExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByHandle
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMasterRxSignalingPkt
</UL>

<P><STRONG><a name="[694]"></a>DmLlAddrType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dm_main.o(i.DmLlAddrType))
<BR><BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStart
</UL>

<P><STRONG><a name="[232]"></a>DmLlPrivEnabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dm_main.o(i.DmLlPrivEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivSetAddrResEnableInd
</UL>

<P><STRONG><a name="[229]"></a>DmPrivAddDevToResList</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dm_priv.o(i.DmPrivAddDevToResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddDevToResList
</UL>

<P><STRONG><a name="[233]"></a>DmPrivClearResList</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dm_priv.o(i.DmPrivClearResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DmPrivClearResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
</UL>

<P><STRONG><a name="[340]"></a>DmPrivInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_priv.o(i.DmPrivInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmPrivInit &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[28a]"></a>DmPrivResolveAddr</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, dm_priv.o(i.DmPrivResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DmPrivResolveAddr &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
</UL>

<P><STRONG><a name="[22e]"></a>DmPrivSetAddrResEnable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm_priv.o(i.DmPrivSetAddrResEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DmPrivSetAddrResEnable &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
</UL>

<P><STRONG><a name="[22c]"></a>DmPrivSetPrivacyMode</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dm_priv.o(i.DmPrivSetPrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DmPrivSetPrivacyMode &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
</UL>

<P><STRONG><a name="[341]"></a>DmPrivSetResolvablePrivateAddrTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dm_priv.o(i.DmPrivSetResolvablePrivateAddrTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DmPrivSetResolvablePrivateAddrTimeout &rArr; HciLeSetResolvablePrivateAddrTimeout &rArr; LlSetResolvablePrivateAddrTimeout &rArr; LctrPrivSetResPrivAddrTimeout &rArr; lctrRestartResPrivAddrTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetResolvablePrivateAddrTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
</UL>

<P><STRONG><a name="[343]"></a>DmReadRemoteFeatures</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dm_conn.o(i.DmReadRemoteFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DmReadRemoteFeatures &rArr; HciLeReadRemoteFeatCmd &rArr; LlReadRemoteFeat &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeReadRemoteFeatCmd
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterConnOpen
</UL>

<P><STRONG><a name="[31f]"></a>DmRegister</STRONG> (Thumb, 62 bytes, Stack size 112 bytes, dm_main.o(i.DmRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DmRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxRxAclLen
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[346]"></a>DmRemoteConnParamReqNegReply</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm_conn.o(i.DmRemoteConnParamReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DmRemoteConnParamReqNegReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterRemoteConnParamReq
</UL>

<P><STRONG><a name="[347]"></a>DmRemoteConnParamReqReply</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dm_conn.o(i.DmRemoteConnParamReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DmRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterRemoteConnParamReq
</UL>

<P><STRONG><a name="[348]"></a>DmScanInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_scan_leg.o(i.DmScanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmScanInit &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[34a]"></a>DmScanPhyToIdx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dm_main.o(i.DmScanPhyToIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmScanPhyToIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanPhyToIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStart
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanSetInterval
</UL>

<P><STRONG><a name="[34c]"></a>DmScanSetAddrType</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_scan.o(i.DmScanSetAddrType))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmScanSetAddrType &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
</UL>

<P><STRONG><a name="[299]"></a>DmScanSetInterval</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dm_scan.o(i.DmScanSetInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DmScanSetInterval &rArr; dmScanSetInterval &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanSetInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
</UL>

<P><STRONG><a name="[29a]"></a>DmScanStart</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, dm_scan.o(i.DmScanStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DmScanStart &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
</UL>

<P><STRONG><a name="[29c]"></a>DmScanStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dm_scan.o(i.DmScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DmScanStop &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStop
</UL>

<P><STRONG><a name="[279]"></a>DmSecAuthRsp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dm_sec.o(i.DmSecAuthRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DmSecAuthRsp &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmMsgSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlePasskey
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalPinCodeHandler
</UL>

<P><STRONG><a name="[276]"></a>DmSecCompareRsp</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dm_sec_lesc.o(i.DmSecCompareRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DmSecCompareRsp &rArr; SmpScGetCancelMsgWithReattempt &rArr; SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmMsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandleNumericComparison
</UL>

<P><STRONG><a name="[350]"></a>DmSecEncryptReq</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dm_sec_master.o(i.DmSecEncryptReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DmSecEncryptReq &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>

<P><STRONG><a name="[351]"></a>DmSecGenerateEccKeyReq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dm_sec_lesc.o(i.DmSecGenerateEccKeyReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DmSecGenerateEccKeyReq &rArr; SecEccGenKey &rArr; HciLeReadLocalP256PubKey &rArr; LlGenerateP256KeyPair &rArr; LctrGenerateP256KeyPair &rArr; lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenKey
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[274]"></a>DmSecGetCompareValue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dm_sec_lesc.o(i.DmSecGetCompareValue))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandleNumericComparison
</UL>

<P><STRONG><a name="[80c]"></a>DmSecGetEccKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dm_sec_lesc.o(i.DmSecGetEccKey))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScProcPairing
</UL>

<P><STRONG><a name="[812]"></a>DmSecGetLocalCsrk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dm_sec.o(i.DmSecGetLocalCsrk))
<BR><BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[228]"></a>DmSecGetLocalIrk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dm_sec.o(i.DmSecGetLocalIrk))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterResolvedAddrInd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddDevToResList
</UL>

<P><STRONG><a name="[593]"></a>DmSecInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dm_sec.o(i.DmSecInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[594]"></a>DmSecLescInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dm_sec_lesc.o(i.DmSecLescInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[353]"></a>DmSecPairReq</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dm_sec_master.o(i.DmSecPairReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmMsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>

<P><STRONG><a name="[354]"></a>DmSecSetEccKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dm_sec_lesc.o(i.DmSecSetEccKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DmSecSetEccKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
</UL>

<P><STRONG><a name="[31c]"></a>DmSecSetLocalIrk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_sec.o(i.DmSecSetLocalIrk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DmSecSetLocalIrk &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandlerInit
</UL>

<P><STRONG><a name="[355]"></a>DmSecSetOob</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dm_sec_lesc.o(i.DmSecSetOob))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = DmSecSetOob &rArr; SmpScSetOobCfg &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScSetOobCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[658]"></a>DmSizeOfEvt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dm_main.o(i.DmSizeOfEvt))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
</UL>

<P><STRONG><a name="[6a4]"></a>DmSmpCbackExec</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dm_sec.o(i.DmSmpCbackExec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DmSmpCbackExec
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingFailed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCmpl
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActNotifyDmRspToFailure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActNotifyDmAttemptsFailure
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcSecurityReq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScAuthReq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkSetup
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkKeypress
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncDisplay
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGenerateLtk
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcRcvKey
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAuthReq
</UL>

<P><STRONG><a name="[357]"></a>DmSmpEncryptReq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dm_sec_master.o(i.DmSmpEncryptReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DmSmpEncryptReq &rArr; HciLeStartEncryptionCmd &rArr; LlStartEncryption &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeStartEncryptionCmd
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActStkEncrypt
</UL>

<P><STRONG><a name="[34]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO0_IRQHandler &rArr; MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(i.GPIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO1_IRQHandler &rArr; MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[36b]"></a>GapDiscover</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, gap_main.o(i.GapDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GapDiscover &rArr; AppDiscFindService &rArr; AttcDiscService &rArr; AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[36c]"></a>GattDiscover</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, gatt_main.o(i.GattDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GattDiscover &rArr; AppDiscFindService &rArr; AttcDiscService &rArr; AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[36d]"></a>GattSendServiceChangedInd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gatt_main.o(i.GattSendServiceChangedInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GattSendServiceChangedInd &rArr; AttsHandleValueInd &rArr; attsHandleValueIndNtf &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCccEnabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsHandleValueInd
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
</UL>

<P><STRONG><a name="[3b9]"></a>HciAclRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_main.o(i.HciAclRegister))
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cInit
</UL>

<P><STRONG><a name="[36e]"></a>HciCoreHandler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hci_core_ps.o(i.HciCoreHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HciCoreHandler &rArr; hciEvtProcessMsg &rArr; hciCoreConnClose &rArr; hciCoreConnFree &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandler
</UL>

<P><STRONG><a name="[372]"></a>HciCoreInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, hci_core.o(i.HciCoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HciCoreInit &rArr; hciCoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandlerInit
</UL>

<P><STRONG><a name="[374]"></a>HciDisconnectCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_cmd.o(i.HciDisconnectCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciDisconnectCmd &rArr; LlDisconnect &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActClose
</UL>

<P><STRONG><a name="[33a]"></a>HciEvtRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_main.o(i.HciEvtRegister))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHandlerInit
</UL>

<P><STRONG><a name="[699]"></a>HciGetBdAddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci_core_ps.o(i.HciGetBdAddr))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[3b2]"></a>HciGetBufSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_core_ps.o(i.HciGetBufSize))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclStart
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
</UL>

<P><STRONG><a name="[376]"></a>HciGetLeSupFeat</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, hci_core_ps.o(i.HciGetLeSupFeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HciGetLeSupFeat &rArr; LlGetFeatures &rArr; Uint64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[2af]"></a>HciGetMaxRxAclLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_core_ps.o(i.HciGetMaxRxAclLen))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRegister
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttRegister
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcMtuRsp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
</UL>

<P><STRONG><a name="[e0]"></a>HciHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_main.o(i.HciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HciHandler &rArr; HciCoreHandler &rArr; hciEvtProcessMsg &rArr; hciCoreConnClose &rArr; hciCoreConnFree &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[378]"></a>HciHandlerInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hci_main.o(i.HciHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HciHandlerInit &rArr; HciCoreInit &rArr; hciCoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[379]"></a>HciLeAddDeviceToResolvingListCmd</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, hci_cmd.o(i.HciLeAddDeviceToResolvingListCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = HciLeAddDeviceToResolvingListCmd &rArr; LlAddDeviceToResolvingList &rArr; BbBleResListAdd &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAddDeviceToResolvingList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActAddDevToResList
</UL>

<P><STRONG><a name="[37c]"></a>HciLeClearResolvingList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeClearResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HciLeClearResolvingList &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlClearResolvingList
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActClearResList
</UL>

<P><STRONG><a name="[37e]"></a>HciLeConnUpdateCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeConnUpdateCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HciLeConnUpdateCmd &rArr; LlConnUpdate &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdActUpdateMaster
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdActL2cUpdateInd
</UL>

<P><STRONG><a name="[380]"></a>HciLeCreateConnCancelCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hci_cmd_master.o(i.HciLeCreateConnCancelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HciLeCreateConnCancelCmd &rArr; LlCreateConnCancel &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConnCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActCancelOpen
</UL>

<P><STRONG><a name="[382]"></a>HciLeCreateConnCmd</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, hci_cmd_master.o(i.HciLeCreateConnCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HciLeCreateConnCmd &rArr; LlCreateConn &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpen
</UL>

<P><STRONG><a name="[384]"></a>HciLeEncryptCmd</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, hci_cmd_enc.o(i.HciLeEncryptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncrypt
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLeEncryptCmd
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
</UL>

<P><STRONG><a name="[386]"></a>HciLeGenerateDHKey</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, hci_cmd.o(i.HciLeGenerateDHKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = HciLeGenerateDHKey &rArr; LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGenerateDhKey
</UL>
<BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenSharedSecret
</UL>

<P><STRONG><a name="[388]"></a>HciLeLtkReqNegReplCmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_cmd_enc.o(i.HciLeLtkReqNegReplCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HciLeLtkReqNegReplCmd &rArr; LlLtkReqNegReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecMsgHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[38a]"></a>HciLeLtkReqReplCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_cmd_enc.o(i.HciLeLtkReqReplCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciLeLtkReqReplCmd &rArr; LlLtkReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecMsgHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[38c]"></a>HciLeRandCmd</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hci_cmd.o(i.HciLeRandCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HciLeRandCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessIntEvt
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
</UL>

<P><STRONG><a name="[38e]"></a>HciLeReadLocalP256PubKey</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hci_cmd.o(i.HciLeReadLocalP256PubKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciLeReadLocalP256PubKey &rArr; LlGenerateP256KeyPair &rArr; LctrGenerateP256KeyPair &rArr; lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGenerateP256KeyPair
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenKey
</UL>

<P><STRONG><a name="[345]"></a>HciLeReadRemoteFeatCmd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_cmd.o(i.HciLeReadRemoteFeatCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HciLeReadRemoteFeatCmd &rArr; LlReadRemoteFeat &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadRemoteFeat
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmReadRemoteFeatures
</UL>

<P><STRONG><a name="[391]"></a>HciLeRemoteConnParamReqNegReply</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeRemoteConnParamReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciLeRemoteConnParamReqNegReply &rArr; LlRemoteConnParamReqNegReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[393]"></a>HciLeRemoteConnParamReqReply</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, hci_cmd.o(i.HciLeRemoteConnParamReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HciLeRemoteConnParamReqReply &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[395]"></a>HciLeRemoveDeviceFromResolvingList</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hci_cmd.o(i.HciLeRemoveDeviceFromResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HciLeRemoveDeviceFromResolvingList &rArr; LlRemoveDeviceFromResolvingList &rArr; BbBleResListRemove &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoveDeviceFromResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActRemDevFromResList
</UL>

<P><STRONG><a name="[397]"></a>HciLeRequestPeerScaCmd</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeRequestPeerScaCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciLeRequestPeerScaCmd &rArr; LlRequestPeerSca &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRequestPeerSca
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[399]"></a>HciLeSetAddrResolutionEnable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeSetAddrResolutionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HciLeSetAddrResolutionEnable &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetAddrResolutionEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivSetAddrResEnable
</UL>

<P><STRONG><a name="[39b]"></a>HciLeSetDataLen</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeSetDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HciLeSetDataLen &rArr; LlSetDataLen &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[39d]"></a>HciLeSetPrivacyModeCmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeSetPrivacyModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HciLeSetPrivacyModeCmd &rArr; LlSetPrivacyMode &rArr; BbBleResListSetPrivacyMode &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetPrivacyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActSetPrivacyMode
</UL>

<P><STRONG><a name="[39f]"></a>HciLeSetRandAddrCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, hci_cmd.o(i.HciLeSetRandAddrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetRpa
</UL>

<P><STRONG><a name="[342]"></a>HciLeSetResolvablePrivateAddrTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_cmd.o(i.HciLeSetResolvablePrivateAddrTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HciLeSetResolvablePrivateAddrTimeout &rArr; LlSetResolvablePrivateAddrTimeout &rArr; LctrPrivSetResPrivAddrTimeout &rArr; lctrRestartResPrivAddrTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetResolvablePrivateAddrTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetResolvablePrivateAddrTimeout
</UL>

<P><STRONG><a name="[3a2]"></a>HciLeSetScanEnableCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hci_cmd_master.o(i.HciLeSetScanEnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciLeSetScanEnableCmd &rArr; LlScanEnable &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStart
</UL>

<P><STRONG><a name="[3a4]"></a>HciLeSetScanParamCmd</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, hci_cmd_master.o(i.HciLeSetScanParamCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HciLeSetScanParamCmd &rArr; LlSetScanParam &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetScanParam
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStart
</UL>

<P><STRONG><a name="[358]"></a>HciLeStartEncryptionCmd</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hci_cmd_enc.o(i.HciLeStartEncryptionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HciLeStartEncryptionCmd &rArr; LlStartEncryption &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpEncryptReq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecMsgHandler
</UL>

<P><STRONG><a name="[226]"></a>HciLlPrivacySupported</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_core_ps.o(i.HciLlPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddDevToResList
</UL>

<P><STRONG><a name="[3a7]"></a>HciReadRssiCmd</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, hci_cmd.o(i.HciReadRssiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HciReadRssiCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[3a9]"></a>HciResetCmd</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hci_cmd.o(i.HciResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HciResetCmd &rArr; LlReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreResetStart
</UL>

<P><STRONG><a name="[3ab]"></a>HciResetSequence</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hci_core.o(i.HciResetSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HciResetSequence &rArr; hciCoreResetStart &rArr; HciResetCmd &rArr; LlReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreResetStart
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevActReset
</UL>

<P><STRONG><a name="[571]"></a>HciSecRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_main.o(i.HciSecRegister))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecInit
</UL>

<P><STRONG><a name="[3ad]"></a>HciSendAclData</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hci_core.o(i.HciSendAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetBufSize
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclStart
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
</UL>

<P><STRONG><a name="[59a]"></a>HciSetMaxRxAclLen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hci_core.o(i.HciSetMaxRxAclLen))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[338]"></a>HciVsInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci_vs.o(i.HciVsInit))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevVsInit
</UL>

<P><STRONG><a name="[3b3]"></a>HciWriteAuthPayloadTimeout</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, hci_cmd.o(i.HciWriteAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HciWriteAuthPayloadTimeout &rArr; LlWriteAuthPayloadTimeout &rArr; LctrSetAuthPayloadTimeout &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlWriteAuthPayloadTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
</UL>

<P><STRONG><a name="[29]"></a>I2C0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pal_twi.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C0_IRQHandler &rArr; MXC_I2C_AsyncHandler &rArr; MXC_I2C_RevA_AsyncHandler &rArr; MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pal_twi.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C1_IRQHandler &rArr; MXC_I2C_AsyncHandler &rArr; MXC_I2C_RevA_AsyncHandler &rArr; MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pal_twi.o(i.I2C2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C2_IRQHandler &rArr; MXC_I2C_AsyncHandler &rArr; MXC_I2C_RevA_AsyncHandler &rArr; MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2bb]"></a>L2cDataReq</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, l2c_main.o(i.L2cDataReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcInd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcIndConfirm
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDmConnUpdateRsp
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cSendCmdReject
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
</UL>

<P><STRONG><a name="[3b6]"></a>L2cDmConnUpdateRsp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, l2c_master.o(i.L2cDmConnUpdateRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = L2cDmConnUpdateRsp &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdActL2cUpdateInd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMasterRxSignalingPkt
</UL>

<P><STRONG><a name="[3b8]"></a>L2cInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, l2c_main.o(i.L2cInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2cInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciAclRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[595]"></a>L2cMasterInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2c_master.o(i.L2cMasterInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[2aa]"></a>L2cRegister</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, l2c_main.o(i.L2cRegister))
<BR><BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandlerInit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttHandlerInit
</UL>

<P><STRONG><a name="[313]"></a>LED_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LED_Init &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedInit
</UL>

<P><STRONG><a name="[3ba]"></a>LED_Off</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Off &rArr; MXC_GPIO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOff
</UL>

<P><STRONG><a name="[3bd]"></a>LED_On</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led.o(i.LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
</UL>

<P><STRONG><a name="[400]"></a>LctrEventHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main.o(i.LctrEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandler
</UL>

<P><STRONG><a name="[3bf]"></a>LctrGenerateDhKey</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lctr_main_sc.o(i.LctrGenerateDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidatePublicKey
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyStart
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGenerateDhKey
</UL>

<P><STRONG><a name="[3c2]"></a>LctrGenerateP256KeyPair</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lctr_main_sc.o(i.LctrGenerateP256KeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LctrGenerateP256KeyPair &rArr; lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256PublicKeyStart
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairStart
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGenerateP256KeyPair
</UL>

<P><STRONG><a name="[3ee]"></a>LctrGetRole</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_main_conn.o(i.LctrGetRole))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnChClassUpdate
</UL>

<P><STRONG><a name="[3ff]"></a>LctrGetRssi</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_main_conn.o(i.LctrGetRssi))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRssi
</UL>

<P><STRONG><a name="[41a]"></a>LctrGetUsedFeatures</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lctr_main_conn.o(i.LctrGetUsedFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRequestPeerSca
</UL>

<P><STRONG><a name="[3c5]"></a>LctrInitConnMem</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lctr_main_conn.o(i.LctrInitConnMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LctrInitConnMem &rArr; lctrTxInitMem &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxInitMem
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitConnMem
</UL>

<P><STRONG><a name="[3f2]"></a>LctrIsCisConnHandleEnabled</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_main_conn.o(i.LctrIsCisConnHandleEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrIsCisConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlDisconnect
</UL>

<P><STRONG><a name="[424]"></a>LctrIsCisEnabled</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lctr_main_conn.o(i.LctrIsCisEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrIsCisEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
</UL>

<P><STRONG><a name="[3ec]"></a>LctrIsConnHandleEnabled</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_main_conn.o(i.LctrIsConnHandleEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlDisconnect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlWriteAuthPayloadTimeout
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetDataLen
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRequestPeerSca
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadRemoteFeat
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRssi
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnChClassUpdate
</UL>

<P><STRONG><a name="[3ed]"></a>LctrIsProcActPended</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lctr_main_conn.o(i.LctrIsProcActPended))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrIsProcActPended
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetDataLen
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadRemoteFeat
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnChClassUpdate
</UL>

<P><STRONG><a name="[414]"></a>LctrIsWaitingForReply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lctr_main_conn.o(i.LctrIsWaitingForReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrIsWaitingForReply
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
</UL>

<P><STRONG><a name="[3c7]"></a>LctrMsgDispatcher</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lctr_main.o(i.LctrMsgDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LctrMsgDispatcher &rArr; lctrNotifyHostResetCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleWhiteListClear
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListClear
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSetDefaults
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostResetCnf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandler
</UL>

<P><STRONG><a name="[3cc]"></a>LctrMstConnEncInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lctr_main_enc_master.o(i.LctrMstConnEncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LctrMstConnEncInit &rArr; LctrMstConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstConnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnMasterInit
</UL>

<P><STRONG><a name="[3cd]"></a>LctrMstConnInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, lctr_main_conn_master.o(i.LctrMstConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrMstConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRegisterChClassHandler
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstConnEncInit
</UL>

<P><STRONG><a name="[3d0]"></a>LctrMstInitDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_main_init_master.o(i.LctrMstInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrMstInitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitResetHandler
</UL>

<P><STRONG><a name="[3d1]"></a>LctrMstInitInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_main_init_master.o(i.LctrMstInitInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrMstInitInit &rArr; LctrMstInitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitMasterInit
</UL>

<P><STRONG><a name="[423]"></a>LctrMstInitIsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_main_init_master.o(i.LctrMstInitIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
</UL>

<P><STRONG><a name="[3d2]"></a>LctrMstScanDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.LctrMstScanDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrMstScanDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanResetHandler
</UL>

<P><STRONG><a name="[3d3]"></a>LctrMstScanInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.LctrMstScanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrMstScanInit &rArr; LctrMstScanDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanMasterInit
</UL>

<P><STRONG><a name="[422]"></a>LctrMstScanIsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_main_adv_master.o(i.LctrMstScanIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
</UL>

<P><STRONG><a name="[3d4]"></a>LctrPrivInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lctr_main_priv.o(i.LctrPrivInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrPrivInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListSetAddrResNeededCback
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlPrivInit
</UL>

<P><STRONG><a name="[3d6]"></a>LctrPrivSetResPrivAddrTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_main_priv.o(i.LctrPrivSetResPrivAddrTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LctrPrivSetResPrivAddrTimeout &rArr; lctrRestartResPrivAddrTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRestartResPrivAddrTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetResolvablePrivateAddrTimeout
</UL>

<P><STRONG><a name="[3d8]"></a>LctrRxAcl</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lctr_main_conn.o(i.LctrRxAcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LctrRxAcl &rArr; lctrRxConnDeqAcl &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnDeqAcl
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRecvAclData
</UL>

<P><STRONG><a name="[3da]"></a>LctrRxAclComplete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_main_conn.o(i.LctrRxAclComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LctrRxAclComplete &rArr; lctrDataRxIncAvailBuf &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataRxIncAvailBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRecvAclDataComplete
</UL>

<P><STRONG><a name="[41c]"></a>LctrScInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lctr_main_sc.o(i.LctrScInit))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScInit
</UL>

<P><STRONG><a name="[3dc]"></a>LctrSetAuthPayloadTimeout</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lctr_main_enc_slave.o(i.LctrSetAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LctrSetAuthPayloadTimeout &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcPingPeriodMs
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlWriteAuthPayloadTimeout
</UL>

<P><STRONG><a name="[402]"></a>LctrSetSupStates</STRONG> (Thumb, 284 bytes, Stack size 20 bytes, lctr_main.o(i.LctrSetSupStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LctrSetSupStates
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandlerInit
</UL>

<P><STRONG><a name="[3df]"></a>LctrSlvAdvDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_main_adv_slave.o(i.LctrSlvAdvDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LctrSlvAdvDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvAdvInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvResetHandler
</UL>

<P><STRONG><a name="[3e0]"></a>LctrSlvAdvInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_main_adv_slave.o(i.LctrSlvAdvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrSlvAdvInit &rArr; LctrSlvAdvDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvAdvDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAdvSlaveInit
</UL>

<P><STRONG><a name="[3e1]"></a>LctrSlvConnEncInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lctr_main_enc_slave.o(i.LctrSlvConnEncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LctrSlvConnEncInit &rArr; LctrSlvConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvConnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnSlaveInit
</UL>

<P><STRONG><a name="[3e2]"></a>LctrSlvConnInit</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lctr_main_conn_slave.o(i.LctrSlvConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LctrSlvConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvConnEncInit
</UL>

<P><STRONG><a name="[3e3]"></a>LctrTxAcl</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, lctr_main_conn.o(i.LctrTxAcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LctrTxAcl &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackAclHdr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxFragLen
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSendAclData
</UL>

<P><STRONG><a name="[3ef]"></a>LctrValidateConnSpec</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lctr_main_conn.o(i.LctrValidateConnSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LctrValidateConnSpec
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamRsp
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>

<P><STRONG><a name="[6b6]"></a>LlAclRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_init_conn_slave.o(i.LlAclRegister))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreInit
</UL>

<P><STRONG><a name="[37a]"></a>LlAddDeviceToResolvingList</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ll_main_priv.o(i.LlAddDeviceToResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = LlAddDeviceToResolvingList &rArr; BbBleResListAdd &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListAdd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeAddDeviceToResolvingListCmd
</UL>

<P><STRONG><a name="[3ea]"></a>LlAdvSlaveInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_adv_slave.o(i.LlAdvSlaveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlAdvSlaveInit &rArr; LmgrSlvInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSlvInit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvAdvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[37d]"></a>LlClearResolvingList</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ll_main_priv.o(i.LlClearResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LlClearResolvingList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListClear
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeClearResolvingList
</UL>

<P><STRONG><a name="[37f]"></a>LlConnUpdate</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ll_main_conn.o(i.LlConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LlConnUpdate &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrValidateConnSpec
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsProcActPended
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRole
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeConnUpdateCmd
</UL>

<P><STRONG><a name="[383]"></a>LlCreateConn</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ll_main_conn_master.o(i.LlCreateConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LlCreateConn &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrValidateConnSpec
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIsAddressTypeAvailable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIsLegacyCommandAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeCreateConnCmd
</UL>

<P><STRONG><a name="[381]"></a>LlCreateConnCancel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ll_main_conn_master.o(i.LlCreateConnCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LlCreateConnCancel &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeCreateConnCancelCmd
</UL>

<P><STRONG><a name="[375]"></a>LlDisconnect</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ll_main_conn.o(i.LlDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlDisconnect &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsCisConnHandleEnabled
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDisconnectCmd
</UL>

<P><STRONG><a name="[3f3]"></a>LlEncConnMasterInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_enc_master.o(i.LlEncConnMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LlEncConnMasterInit &rArr; LctrMstConnEncInit &rArr; LctrMstConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstConnEncInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrConnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[3f5]"></a>LlEncConnSlaveInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_enc_slave.o(i.LlEncConnSlaveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LlEncConnSlaveInit &rArr; LctrSlvConnEncInit &rArr; LctrSlvConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvConnEncInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrConnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[385]"></a>LlEncrypt</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ll_main_enc_slave.o(i.LlEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeEncryptCmd
</UL>

<P><STRONG><a name="[3f7]"></a>LlEndTest</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ll_main_dtm.o(i.LlEndTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LlEndTest &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecResetRefCount
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbCancelBod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llTestDisp
</UL>

<P><STRONG><a name="[6b5]"></a>LlEvtRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_init.o(i.LlEvtRegister))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreInit
</UL>

<P><STRONG><a name="[387]"></a>LlGenerateDhKey</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ll_main_sc.o(i.LlGenerateDhKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateDhKey
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeGenerateDHKey
</UL>

<P><STRONG><a name="[38f]"></a>LlGenerateP256KeyPair</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main_sc.o(i.LlGenerateP256KeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LlGenerateP256KeyPair &rArr; LctrGenerateP256KeyPair &rArr; lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateP256KeyPair
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeReadLocalP256PubKey
</UL>

<P><STRONG><a name="[6b8]"></a>LlGetAclMaxSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_main_conn.o(i.LlGetAclMaxSize))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreInit
</UL>

<P><STRONG><a name="[6b7]"></a>LlGetAclTxBufs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ll_main_conn.o(i.LlGetAclTxBufs))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreInit
</UL>

<P><STRONG><a name="[3fa]"></a>LlGetBdAddr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_main.o(i.LlGetBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlGetBdAddr &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[3fc]"></a>LlGetDefaultRunTimeCfg</STRONG> (Thumb, 30 bytes, Stack size 64 bytes, ll_init.o(i.LlGetDefaultRunTimeCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LlGetDefaultRunTimeCfg &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[377]"></a>LlGetFeatures</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_main.o(i.LlGetFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlGetFeatures &rArr; Uint64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetLeSupFeat
</UL>

<P><STRONG><a name="[38d]"></a>LlGetRandNum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ll_main.o(i.LlGetRandNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlGetRandNum &rArr; PalCryptoGenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRandCmd
</UL>

<P><STRONG><a name="[3a8]"></a>LlGetRssi</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ll_main_conn.o(i.LlGetRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlGetRssi &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRssi
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciReadRssiCmd
</UL>

<P><STRONG><a name="[6c1]"></a>LlGetVersion</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ll_main.o(i.LlGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[ce]"></a>LlHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ll_init.o(i.LlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LlHandler &rArr; LctrMsgDispatcher &rArr; lctrNotifyHostResetCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMsgDispatcher
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.LlInitLlInit)
</UL>
<P><STRONG><a name="[401]"></a>LlHandlerInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, ll_init.o(i.LlHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LlHandlerInit &rArr; LctrSetSupStates
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSetDefaults
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSetSupStates
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlTestInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[404]"></a>LlInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, init.o(i.LlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LlInit &rArr; LlInitBbInit &rArr; BbInit &rArr; PalBbInit &rArr; llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetLlRtCfg
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetBbRtCfg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSchInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitBbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[407]"></a>LlInitBbInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(i.LlInitBbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = LlInitBbInit &rArr; BbInit &rArr; PalBbInit &rArr; llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTestInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnSlaveInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnMasterInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleAdvSlaveInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleScanMasterInit
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
</UL>

<P><STRONG><a name="[40a]"></a>LlInitConnMem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ll_init_conn_slave.o(i.LlInitConnMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LlInitConnMem &rArr; LctrInitConnMem &rArr; lctrTxInitMem &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrInitConnMem
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetLlRtCfg
</UL>

<P><STRONG><a name="[409]"></a>LlInitLlInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, init.o(i.LlInitLlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LlInitLlInit &rArr; LlEncConnSlaveInit &rArr; LctrSlvConnEncInit &rArr; LctrSlvConnInit &rArr; lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsSetNextHandler
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanMasterInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScInit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlPrivInit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitMasterInit
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandlerInit
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnSlaveInit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnMasterInit
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAdvSlaveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
</UL>

<P><STRONG><a name="[40c]"></a>LlInitMasterInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_init_init_master.o(i.LlInitMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlInitMasterInit &rArr; LctrMstInitInit &rArr; LctrMstInitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[413]"></a>LlInitRunTimeCfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_init.o(i.LlInitRunTimeCfg))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSetLlRtCfg
</UL>

<P><STRONG><a name="[408]"></a>LlInitSchInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, init.o(i.LlInitSchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LlInitSchInit &rArr; SchHandlerInit &rArr; SchInit &rArr; PalTimerInit &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsSetNextHandler
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandlerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
</UL>

<P><STRONG><a name="[405]"></a>LlInitSetBbRtCfg</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, init.o(i.LlInitSetBbRtCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LlInitSetBbRtCfg &rArr; BbBleInitWhiteList
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbInitRunTimeCfg
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInitWhiteList
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInitResolvingList
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
</UL>

<P><STRONG><a name="[406]"></a>LlInitSetLlRtCfg</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, init.o(i.LlInitSetLlRtCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LlInitSetLlRtCfg &rArr; LlInitConnMem &rArr; LctrInitConnMem &rArr; lctrTxInitMem &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitRunTimeCfg
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitConnMem
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
</UL>

<P><STRONG><a name="[389]"></a>LlLtkReqNegReply</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ll_main_enc_slave.o(i.LlLtkReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlLtkReqNegReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsWaitingForReply
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRole
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqNegReplCmd
</UL>

<P><STRONG><a name="[38b]"></a>LlLtkReqReply</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ll_main_enc_slave.o(i.LlLtkReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlLtkReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsWaitingForReply
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRole
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqReplCmd
</UL>

<P><STRONG><a name="[7a9]"></a>LlMathDivideUint32</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ll_math.o(i.LlMathDivideUint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlMathDivideUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAbortSlvLatency
</UL>

<P><STRONG><a name="[71b]"></a>LlMathGetNumBitsSet</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, ll_math.o(i.LlMathGetNumBitsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LlMathGetNumBitsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[6fd]"></a>LlMathRandNum</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ll_math.o(i.LlMathRandNum))
<BR><BR>[Called By]<UL><LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeAccessAddr
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcAdvDelay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanRspRxCompHandler
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeHopInc
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeCrcInit
</UL>

<P><STRONG><a name="[7df]"></a>LlMathSetSeed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ll_math.o(i.LlMathSetSeed))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40d]"></a>LlPrivInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_priv.o(i.LlPrivInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LlPrivInit &rArr; LctrPrivInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrPrivInit
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrPrivInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[6bf]"></a>LlReadMaximumDataLen</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ll_main_conn.o(i.LlReadMaximumDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LlReadMaximumDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[390]"></a>LlReadRemoteFeat</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ll_main_conn_slave.o(i.LlReadRemoteFeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlReadRemoteFeat &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsProcActPended
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeReadRemoteFeatCmd
</UL>

<P><STRONG><a name="[416]"></a>LlReadResolvingListSize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ll_main_priv.o(i.LlReadResolvingListSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LlReadResolvingListSize
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[418]"></a>LlRecvAclData</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ll_main_conn.o(i.LlRecvAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LlRecvAclData &rArr; LctrRxAcl &rArr; lctrRxConnDeqAcl &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrRxAcl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclRecvPending
</UL>

<P><STRONG><a name="[419]"></a>LlRecvAclDataComplete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_main_conn.o(i.LlRecvAclDataComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LlRecvAclDataComplete &rArr; LctrRxAclComplete &rArr; lctrDataRxIncAvailBuf &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrRxAclComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclRecvPending
</UL>

<P><STRONG><a name="[392]"></a>LlRemoteConnParamReqNegReply</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ll_main_conn.o(i.LlRemoteConnParamReqNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlRemoteConnParamReqNegReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsWaitingForReply
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoteConnParamReqNegReply
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>

<P><STRONG><a name="[394]"></a>LlRemoteConnParamReqReply</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ll_main_conn.o(i.LlRemoteConnParamReqReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrValidateConnSpec
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsWaitingForReply
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoteConnParamReqReply
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>

<P><STRONG><a name="[396]"></a>LlRemoveDeviceFromResolvingList</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ll_main_priv.o(i.LlRemoveDeviceFromResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LlRemoveDeviceFromResolvingList &rArr; BbBleResListRemove &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListRemove
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoveDeviceFromResolvingList
</UL>

<P><STRONG><a name="[398]"></a>LlRequestPeerSca</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ll_main_conn.o(i.LlRequestPeerSca))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlRequestPeerSca &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetUsedFeatures
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRequestPeerScaCmd
</UL>

<P><STRONG><a name="[3aa]"></a>LlReset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll_init.o(i.LlReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LlReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciResetCmd
</UL>

<P><STRONG><a name="[40e]"></a>LlScInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_sc.o(i.LlScInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LlScInit
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrScInit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrScInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[3a3]"></a>LlScanEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ll_main_adv_master.o(i.LlScanEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LlScanEnable &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIsAddressTypeAvailable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIsLegacyCommandAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetScanEnableCmd
</UL>

<P><STRONG><a name="[40b]"></a>LlScanMasterInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ll_init_adv_master.o(i.LlScanMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LlScanMasterInit &rArr; LctrMstScanInit &rArr; LctrMstScanDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrMstInit
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanInit
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[41f]"></a>LlSendAclData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_main_conn.o(i.LlSendAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LlSendAclData &rArr; LctrTxAcl &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
</UL>

<P><STRONG><a name="[39a]"></a>LlSetAddrResolutionEnable</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ll_main_priv.o(i.LlSetAddrResolutionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LlSetAddrResolutionEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetAddrResolutionEnable
</UL>

<P><STRONG><a name="[420]"></a>LlSetBdAddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_main.o(i.LlSetBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LlSetBdAddr &rArr; BstreamToBda64
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39c]"></a>LlSetDataLen</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ll_main_conn.o(i.LlSetDataLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LlSetDataLen &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsProcActPended
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetDataLen
</UL>

<P><STRONG><a name="[421]"></a>LlSetHostFeatures</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ll_main.o(i.LlSetHostFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LlSetHostFeatures
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[39e]"></a>LlSetPrivacyMode</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ll_main_priv.o(i.LlSetPrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LlSetPrivacyMode &rArr; BbBleResListSetPrivacyMode &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListSetPrivacyMode
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetPrivacyModeCmd
</UL>

<P><STRONG><a name="[3a0]"></a>LlSetRandAddr</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ll_main.o(i.LlSetRandAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LlSetRandAddr &rArr; BstreamToBda64
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanIsEnabled
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitIsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetRandAddrCmd
</UL>

<P><STRONG><a name="[3a1]"></a>LlSetResolvablePrivateAddrTimeout</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ll_main_priv.o(i.LlSetResolvablePrivateAddrTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LlSetResolvablePrivateAddrTimeout &rArr; LctrPrivSetResPrivAddrTimeout &rArr; lctrRestartResPrivAddrTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrPrivSetResPrivAddrTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetResolvablePrivateAddrTimeout
</UL>

<P><STRONG><a name="[3a5]"></a>LlSetScanParam</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ll_main_adv_master.o(i.LlSetScanParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LlSetScanParam &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIsLegacyCommandAllowed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetScanParamCmd
</UL>

<P><STRONG><a name="[3a6]"></a>LlStartEncryption</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ll_main_enc_master.o(i.LlStartEncryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LlStartEncryption &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsProcActPended
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsCisEnabled
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRole
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeStartEncryptionCmd
</UL>

<P><STRONG><a name="[403]"></a>LlTestInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ll_main_dtm.o(i.LlTestInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LlTestInit &rArr; BbBleTestInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTestInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llTestResetHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandlerInit
</UL>

<P><STRONG><a name="[3b4]"></a>LlWriteAuthPayloadTimeout</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ll_main_enc_slave.o(i.LlWriteAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LlWriteAuthPayloadTimeout &rArr; LctrSetAuthPayloadTimeout &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSetAuthPayloadTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciWriteAuthPayloadTimeout
</UL>

<P><STRONG><a name="[6c0]"></a>LlWriteDefaultDataLen</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ll_main_conn.o(i.LlWriteDefaultDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[3f4]"></a>LmgrConnInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lmgr_main_conn.o(i.LmgrConnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmgrConnInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnSlaveInit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncConnMasterInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnResetHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[3f8]"></a>LmgrDecResetRefCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrDecResetRefCount))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvCleanup
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEndTest
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llTestDisp
</UL>

<P><STRONG><a name="[6f1]"></a>LmgrDecWhitelistRefCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrDecWhitelistRefCount))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvCleanup
</UL>

<P><STRONG><a name="[6eb]"></a>LmgrIncResetRefCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrIncResetRefCount))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfStart
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[6ec]"></a>LmgrIncWhitelistRefCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrIncWhitelistRefCount))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfStart
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[3f1]"></a>LmgrIsAddressTypeAvailable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrIsAddressTypeAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
</UL>

<P><STRONG><a name="[3f0]"></a>LmgrIsLegacyCommandAllowed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lmgr_main.o(i.LmgrIsLegacyCommandAllowed))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetScanParam
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
</UL>

<P><STRONG><a name="[41e]"></a>LmgrMstInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lmgr_main_master.o(i.LmgrMstInit))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanMasterInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanResetHandler
</UL>

<P><STRONG><a name="[415]"></a>LmgrPrivInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lmgr_main_priv.o(i.LmgrPrivInit))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlPrivInit
</UL>

<P><STRONG><a name="[41b]"></a>LmgrScInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lmgr_main_sc.o(i.LmgrScInit))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScInit
</UL>

<P><STRONG><a name="[425]"></a>LmgrSendAdvEnableCnf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lmgr_events.o(i.LmgrSendAdvEnableCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LmgrSendAdvEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActStart
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActDisallowAdvCnf
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActAdvTerm
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActAdvCnf
</UL>

<P><STRONG><a name="[427]"></a>LmgrSendAdvSetTermInd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lmgr_events.o(i.LmgrSendAdvSetTermInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LmgrSendAdvSetTermInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessConnInd
</UL>

<P><STRONG><a name="[426]"></a>LmgrSendEvent</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lmgr_events.o(i.LmgrSendEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvSetTermInd
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvEnableCnf
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDirectConnectTimeout
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteVerCnf
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostPeerScaCnf
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDisconnectInd
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDataLengthInd
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActScanTerm
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActDisallowCancel
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncKeyRefreshInd
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncChangeInd
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyAuthPayloadTimeout
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEncNotifyHostLtkReqInd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvRxScanReq
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostHwErrInd
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostResetCnf
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyReadLocalP256PubKeyInd
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyGenerateDhKeyInd
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteFeatCnf
</UL>

<P><STRONG><a name="[41d]"></a>LmgrSendScanEnableCnf</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lmgr_events.o(i.LmgrSendScanEnableCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LmgrSendScanEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActUpdateScanFilt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActScanTerm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActScanCnf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDisallowScan
</UL>

<P><STRONG><a name="[3ca]"></a>LmgrSetDefaults</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmgr_main.o(i.LmgrSetDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmgrSetDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlHandlerInit
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMsgDispatcher
</UL>

<P><STRONG><a name="[3eb]"></a>LmgrSlvInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmgr_main_slave.o(i.LmgrSlvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmgrSlvInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAdvSlaveInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvResetHandler
</UL>

<P><STRONG><a name="[428]"></a>MXC_AES_Encrypt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes_me17.o(i.MXC_AES_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCryptoAesEcb
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>

<P><STRONG><a name="[42a]"></a>MXC_AES_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aes_me17.o(i.MXC_AES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_AES_Init &rArr; MXC_AES_RevB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCryptoAesEcb
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>

<P><STRONG><a name="[42c]"></a>MXC_AES_IsBusy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, aes_me17.o(i.MXC_AES_IsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Start
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_SetKeySize
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushOutputFIFO
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushInputFIFO
</UL>

<P><STRONG><a name="[429]"></a>MXC_AES_RevB_Encrypt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes_revb.o(i.MXC_AES_RevB_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Encrypt
</UL>

<P><STRONG><a name="[42f]"></a>MXC_AES_RevB_FlushInputFIFO</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes_revb.o(i.MXC_AES_RevB_FlushInputFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_AES_RevB_FlushInputFIFO &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Shutdown
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
</UL>

<P><STRONG><a name="[430]"></a>MXC_AES_RevB_FlushOutputFIFO</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes_revb.o(i.MXC_AES_RevB_FlushOutputFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_AES_RevB_FlushOutputFIFO &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Shutdown
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
</UL>

<P><STRONG><a name="[42e]"></a>MXC_AES_RevB_Generic</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, aes_revb.o(i.MXC_AES_RevB_Generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Start
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_SetKeySize
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushOutputFIFO
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushInputFIFO
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Encrypt
</UL>

<P><STRONG><a name="[42b]"></a>MXC_AES_RevB_Init</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, aes_revb.o(i.MXC_AES_RevB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_AES_RevB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Init
</UL>

<P><STRONG><a name="[42d]"></a>MXC_AES_RevB_IsBusy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes_revb.o(i.MXC_AES_RevB_IsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Shutdown
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>

<P><STRONG><a name="[433]"></a>MXC_AES_RevB_SetExtKey</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, aes_revb.o(i.MXC_AES_RevB_SetExtKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_AES_RevB_SetExtKey &rArr; memcpy32r
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy32r
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_SetExtKey
</UL>

<P><STRONG><a name="[431]"></a>MXC_AES_RevB_SetKeySize</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aes_revb.o(i.MXC_AES_RevB_SetKeySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
</UL>

<P><STRONG><a name="[435]"></a>MXC_AES_RevB_Shutdown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, aes_revb.o(i.MXC_AES_RevB_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_AES_RevB_Shutdown &rArr; MXC_AES_RevB_FlushOutputFIFO &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_IsBusy
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushOutputFIFO
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_FlushInputFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Shutdown
</UL>

<P><STRONG><a name="[432]"></a>MXC_AES_RevB_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes_revb.o(i.MXC_AES_RevB_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_AES_RevB_Start &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Generic
</UL>

<P><STRONG><a name="[436]"></a>MXC_AES_SetExtKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, aes_me17.o(i.MXC_AES_SetExtKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_AES_SetExtKey &rArr; MXC_AES_RevB_SetExtKey &rArr; memcpy32r
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_SetExtKey
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCryptoAesEcb
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>

<P><STRONG><a name="[437]"></a>MXC_AES_Shutdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, aes_me17.o(i.MXC_AES_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_AES_Shutdown &rArr; MXC_AES_RevB_Shutdown &rArr; MXC_AES_RevB_FlushOutputFIFO &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCryptoAesEcb
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>

<P><STRONG><a name="[439]"></a>MXC_DMA_ChannelClearFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dma_me17.o(i.MXC_DMA_ChannelClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Handler
</UL>

<P><STRONG><a name="[317]"></a>MXC_DMA_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_me17.o(i.MXC_DMA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_DMA_Handler &rArr; MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
</UL>

<P><STRONG><a name="[43c]"></a>MXC_DMA_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dma_me17.o(i.MXC_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_DMA_Init &rArr; MXC_DMA_RevA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Reset_Periph
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_IsClockEnabled
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[43a]"></a>MXC_DMA_RevA_ChannelClearFlags</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dma_reva.o(i.MXC_DMA_RevA_ChannelClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_ChannelClearFlags
</UL>

<P><STRONG><a name="[440]"></a>MXC_DMA_RevA_ChannelGetFlags</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dma_reva.o(i.MXC_DMA_RevA_ChannelGetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Handler
</UL>

<P><STRONG><a name="[43b]"></a>MXC_DMA_RevA_Handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dma_reva.o(i.MXC_DMA_RevA_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_DMA_RevA_Handler &rArr; MXC_DMA_ChannelClearFlags &rArr; MXC_DMA_RevA_ChannelClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_ChannelGetFlags
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_ChannelClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Handler
</UL>

<P><STRONG><a name="[43f]"></a>MXC_DMA_RevA_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, dma_reva.o(i.MXC_DMA_RevA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_DMA_RevA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GetLock
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FreeLock
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Init
</UL>

<P><STRONG><a name="[446]"></a>MXC_DelayAbort</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mxc_delay.o(i.MXC_DelayAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayHandler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayCheck
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>

<P><STRONG><a name="[443]"></a>MXC_DelayAsync</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mxc_delay.o(i.MXC_DelayAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>

<P><STRONG><a name="[445]"></a>MXC_DelayCheck</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, mxc_delay.o(i.MXC_DelayCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_DelayCheck &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>

<P><STRONG><a name="[447]"></a>MXC_DelayHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mxc_delay.o(i.MXC_DelayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_DelayHandler &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[448]"></a>MXC_FLC_LockInfoBlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flc_me17.o(i.MXC_FLC_LockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_FLC_LockInfoBlock &rArr; MXC_FLC_ME17_LockInfoBlock &rArr; MXC_FLC_RevB_LockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_LockInfoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
</UL>

<P><STRONG><a name="[209]"></a>MXC_FLC_ME17_Flash_Operation</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, flc_me17.o(i.MXC_FLC_ME17_Flash_Operation))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_PageErase
</UL>

<P><STRONG><a name="[206]"></a>MXC_FLC_ME17_GetByAddress</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flc_me17.o(i.MXC_FLC_ME17_GetByAddress))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write32
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_UnlockInfoBlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_LockInfoBlock
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_PageErase
</UL>

<P><STRONG><a name="[207]"></a>MXC_FLC_ME17_GetPhysicalAddress</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flc_me17.o(i.MXC_FLC_ME17_GetPhysicalAddress))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write32
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_PageErase
</UL>

<P><STRONG><a name="[449]"></a>MXC_FLC_ME17_LockInfoBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flc_me17.o(i.MXC_FLC_ME17_LockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_FLC_ME17_LockInfoBlock &rArr; MXC_FLC_RevB_LockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_LockInfoBlock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_LockInfoBlock
</UL>

<P><STRONG><a name="[44b]"></a>MXC_FLC_ME17_UnlockInfoBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, flc_me17.o(i.MXC_FLC_ME17_UnlockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_UnlockInfoBlock
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_UnlockInfoBlock
</UL>

<P><STRONG><a name="[44d]"></a>MXC_FLC_ME17_Write32</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, flc_me17.o(i.MXC_FLC_ME17_Write32))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_Write32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetPhysicalAddress
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_GetByAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write32
</UL>

<P><STRONG><a name="[44e]"></a>MXC_FLC_PageErase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flc_me17.o(i.MXC_FLC_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_FLC_PageErase &rArr; MXC_FLC_ME17_PageErase &rArr; MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashEraseSector
</UL>

<P><STRONG><a name="[44f]"></a>MXC_FLC_RevA_LockInfoBlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flc_reva.o(i.MXC_FLC_RevA_LockInfoBlock))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_LockInfoBlock
</UL>

<P><STRONG><a name="[450]"></a>MXC_FLC_RevA_UnlockInfoBlock</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flc_reva.o(i.MXC_FLC_RevA_UnlockInfoBlock))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevB_UnlockInfoBlock
</UL>

<P><STRONG><a name="[44a]"></a>MXC_FLC_RevB_LockInfoBlock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flc_revb.o(i.MXC_FLC_RevB_LockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_FLC_RevB_LockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_LockInfoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_LockInfoBlock
</UL>

<P><STRONG><a name="[44c]"></a>MXC_FLC_RevB_UnlockInfoBlock</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flc_revb.o(i.MXC_FLC_RevB_UnlockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_UnlockInfoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_UnlockInfoBlock
</UL>

<P><STRONG><a name="[451]"></a>MXC_FLC_UnlockInfoBlock</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flc_me17.o(i.MXC_FLC_UnlockInfoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_UnlockInfoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
</UL>

<P><STRONG><a name="[452]"></a>MXC_FLC_Write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flc_me17.o(i.MXC_FLC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
</UL>

<P><STRONG><a name="[201]"></a>MXC_FLC_Write128</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flc_me17.o(i.MXC_FLC_Write128))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write128
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_Write
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write32
</UL>

<P><STRONG><a name="[200]"></a>MXC_FLC_Write32</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flc_me17.o(i.MXC_FLC_Write32))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_ME17_Write32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Com_Write
</UL>

<P><STRONG><a name="[441]"></a>MXC_FreeLock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mxc_lock.o(i.MXC_FreeLock))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Init
</UL>

<P><STRONG><a name="[453]"></a>MXC_GPIO_ClearFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>

<P><STRONG><a name="[455]"></a>MXC_GPIO_Common_Handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gpio_common.o(i.MXC_GPIO_Common_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_ClearFlags
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>

<P><STRONG><a name="[45f]"></a>MXC_GPIO_Common_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gpio_common.o(i.MXC_GPIO_Common_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_Common_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Init
</UL>

<P><STRONG><a name="[465]"></a>MXC_GPIO_Common_RegisterCallback</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gpio_common.o(i.MXC_GPIO_Common_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_Common_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RegisterCallback
</UL>

<P><STRONG><a name="[3bb]"></a>MXC_GPIO_Config</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, gpio_me17.o(i.MXC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_GPIO_Config &rArr; MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_SetAF
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_SetVSSEL
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFlowCtrl
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
</UL>

<P><STRONG><a name="[45a]"></a>MXC_GPIO_DisableInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
</UL>

<P><STRONG><a name="[45c]"></a>MXC_GPIO_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
</UL>

<P><STRONG><a name="[456]"></a>MXC_GPIO_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_me17.o(i.MXC_GPIO_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>

<P><STRONG><a name="[36a]"></a>MXC_GPIO_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_me17.o(i.MXC_GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[457]"></a>MXC_GPIO_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>

<P><STRONG><a name="[460]"></a>MXC_GPIO_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_GPIO_IntConfig &rArr; MXC_GPIO_RevA_IntConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
</UL>

<P><STRONG><a name="[3be]"></a>MXC_GPIO_OutClr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_OutClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>

<P><STRONG><a name="[3bc]"></a>MXC_GPIO_OutSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_OutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>

<P><STRONG><a name="[464]"></a>MXC_GPIO_RegisterCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_GPIO_RegisterCallback &rArr; MXC_GPIO_Common_RegisterCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_RegisterCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
</UL>

<P><STRONG><a name="[454]"></a>MXC_GPIO_RevA_ClearFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_ClearFlags))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_ClearFlags
</UL>

<P><STRONG><a name="[45b]"></a>MXC_GPIO_RevA_DisableInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_DisableInt
</UL>

<P><STRONG><a name="[45d]"></a>MXC_GPIO_RevA_EnableInt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_EnableInt
</UL>

<P><STRONG><a name="[45e]"></a>MXC_GPIO_RevA_GetFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_GetFlags
</UL>

<P><STRONG><a name="[461]"></a>MXC_GPIO_RevA_IntConfig</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, gpio_reva.o(i.MXC_GPIO_RevA_IntConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_RevA_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_IntConfig
</UL>

<P><STRONG><a name="[462]"></a>MXC_GPIO_RevA_OutClr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_OutClr))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutClr
</UL>

<P><STRONG><a name="[463]"></a>MXC_GPIO_RevA_OutSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_OutSet))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutSet
</UL>

<P><STRONG><a name="[458]"></a>MXC_GPIO_RevA_SetAF</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_SetAF))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>

<P><STRONG><a name="[466]"></a>MXC_GPIO_RevA_SetVSSEL</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gpio_reva.o(i.MXC_GPIO_RevA_SetVSSEL))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_SetVSSEL
</UL>

<P><STRONG><a name="[459]"></a>MXC_GPIO_SetVSSEL</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_me17.o(i.MXC_GPIO_SetVSSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_GPIO_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>

<P><STRONG><a name="[442]"></a>MXC_GetLock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mxc_lock.o(i.MXC_GetLock))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_RevA_Init
</UL>

<P><STRONG><a name="[3b5]"></a>MXC_I2C_AsyncHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_me17.o(i.MXC_I2C_AsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MXC_I2C_AsyncHandler &rArr; MXC_I2C_RevA_AsyncHandler &rArr; MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_AsyncHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[468]"></a>MXC_I2C_ClearFlags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me17.o(i.MXC_I2C_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[46a]"></a>MXC_I2C_ClearRXFIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_me17.o(i.MXC_I2C_ClearRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_ClearRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[46c]"></a>MXC_I2C_ClearTXFIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_me17.o(i.MXC_I2C_ClearTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_ClearTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[46e]"></a>MXC_I2C_ReadRXFIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me17.o(i.MXC_I2C_ReadRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[474]"></a>MXC_I2C_RevA_AsyncCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c_reva.o(i.MXC_I2C_RevA_AsyncCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_AsyncCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[467]"></a>MXC_I2C_RevA_AsyncHandler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, i2c_reva.o(i.MXC_I2C_RevA_AsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_I2C_RevA_AsyncHandler &rArr; MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_AsyncHandler
</UL>

<P><STRONG><a name="[475]"></a>MXC_I2C_RevA_AsyncStop</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_AsyncStop))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[469]"></a>MXC_I2C_RevA_ClearFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_ClearFlags))
<BR><BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearFlags
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[46b]"></a>MXC_I2C_RevA_ClearRXFIFO</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_ClearRXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearRXFIFO
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[46d]"></a>MXC_I2C_RevA_ClearTXFIFO</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_ClearTXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearTXFIFO
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SlaveAsyncHandler
</UL>

<P><STRONG><a name="[470]"></a>MXC_I2C_RevA_MasterAsyncHandler</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, i2c_reva.o(i.MXC_I2C_RevA_MasterAsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_I2C_RevA_MasterAsyncHandler &rArr; MXC_I2C_ReadRXFIFO &rArr; MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_WriteTXFIFO
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Stop
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Start
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ReadRXFIFO
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_AsyncStop
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_AsyncCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_AsyncHandler
</UL>

<P><STRONG><a name="[46f]"></a>MXC_I2C_RevA_ReadRXFIFO</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c_reva.o(i.MXC_I2C_RevA_ReadRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ReadRXFIFO
</UL>

<P><STRONG><a name="[471]"></a>MXC_I2C_RevA_SlaveAsyncHandler</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, i2c_reva.o(i.MXC_I2C_RevA_SlaveAsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_I2C_RevA_SlaveAsyncHandler &rArr; MXC_I2C_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearTXFIFO
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearRXFIFO
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearFlags
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearTXFIFO
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearRXFIFO
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_AsyncHandler
</UL>

<P><STRONG><a name="[477]"></a>MXC_I2C_RevA_Start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_Start))
<BR><BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Start
</UL>

<P><STRONG><a name="[478]"></a>MXC_I2C_RevA_Stop</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, i2c_reva.o(i.MXC_I2C_RevA_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Stop
</UL>

<P><STRONG><a name="[479]"></a>MXC_I2C_RevA_WriteTXFIFO</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, i2c_reva.o(i.MXC_I2C_RevA_WriteTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_I2C_RevA_WriteTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_WriteTXFIFO
</UL>

<P><STRONG><a name="[476]"></a>MXC_I2C_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_me17.o(i.MXC_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[473]"></a>MXC_I2C_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_me17.o(i.MXC_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[472]"></a>MXC_I2C_WriteTXFIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me17.o(i.MXC_I2C_WriteTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MXC_I2C_WriteTXFIFO &rArr; MXC_I2C_RevA_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_WriteTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_MasterAsyncHandler
</UL>

<P><STRONG><a name="[47a]"></a>MXC_ICC_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icc_me17.o(i.MXC_ICC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_ICC_Enable &rArr; MXC_ICC_RevA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_ICC_RevA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[47b]"></a>MXC_ICC_RevA_Enable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, icc_reva.o(i.MXC_ICC_RevA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_ICC_RevA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_ICC_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_ICC_Enable
</UL>

<P><STRONG><a name="[47e]"></a>MXC_LP_ClearWakeStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lp_me17.o(i.MXC_LP_ClearWakeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_LP_EnterSleepMode
</UL>

<P><STRONG><a name="[525]"></a>MXC_LP_EnableWUTAlarmWakeup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lp_me17.o(i.MXC_LP_EnableWUTAlarmWakeup))
<BR><BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
</UL>

<P><STRONG><a name="[47d]"></a>MXC_LP_EnterSleepMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lp_me17.o(i.MXC_LP_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_LP_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_LP_ClearWakeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysSleep
</UL>

<P><STRONG><a name="[438]"></a>MXC_SYS_ClockDisable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sys_me17.o(i.MXC_SYS_ClockDisable))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Shutdown
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Shutdown
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Shutdown
</UL>

<P><STRONG><a name="[310]"></a>MXC_SYS_ClockEnable</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sys_me17.o(i.MXC_SYS_ClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Init
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Init
</UL>

<P><STRONG><a name="[47f]"></a>MXC_SYS_ClockSourceEnable</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, sys_me17.o(i.MXC_SYS_ClockSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
</UL>

<P><STRONG><a name="[481]"></a>MXC_SYS_Clock_Select</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, sys_me17.o(i.MXC_SYS_Clock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MXC_SYS_Clock_Select &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[480]"></a>MXC_SYS_Clock_Timeout</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sys_me17.o(i.MXC_SYS_Clock_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayCheck
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAsync
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockSourceEnable
</UL>

<P><STRONG><a name="[485]"></a>MXC_SYS_GetClockDiv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_me17.o(i.MXC_SYS_GetClockDiv))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_SetClockDiv
</UL>

<P><STRONG><a name="[483]"></a>MXC_SYS_GetUSN</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, sys_me17.o(i.MXC_SYS_GetUSN))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MXC_SYS_GetUSN &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Shutdown
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_SetExtKey
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Encrypt
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_UnlockInfoBlock
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_LockInfoBlock
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadExtMac154Address
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadBdAddress
</UL>

<P><STRONG><a name="[43d]"></a>MXC_SYS_IsClockEnabled</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, sys_me17.o(i.MXC_SYS_IsClockEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Init
</UL>

<P><STRONG><a name="[43e]"></a>MXC_SYS_Reset_Periph</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sys_me17.o(i.MXC_SYS_Reset_Periph))
<BR><BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Init
</UL>

<P><STRONG><a name="[484]"></a>MXC_SYS_SetClockDiv</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sys_me17.o(i.MXC_SYS_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_SYS_SetClockDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[486]"></a>MXC_TMR_ClearFlags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
</UL>

<P><STRONG><a name="[488]"></a>MXC_TMR_Common_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tmr_common.o(i.MXC_TMR_Common_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MXC_TMR_Common_Delay &rArr; MXC_TMR_TO_Start &rArr; MXC_TMR_RevB_TO_Start &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_TO_Start
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_TO_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Delay
</UL>

<P><STRONG><a name="[48b]"></a>MXC_TMR_Common_TO_Check</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tmr_common.o(i.MXC_TMR_Common_TO_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_TMR_Common_TO_Check &rArr; MXC_TMR_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_TO_Check
</UL>

<P><STRONG><a name="[48d]"></a>MXC_TMR_Delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tmr_me17.o(i.MXC_TMR_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MXC_TMR_Delay &rArr; MXC_TMR_Common_Delay &rArr; MXC_TMR_TO_Start &rArr; MXC_TMR_RevB_TO_Start &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Common_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48e]"></a>MXC_TMR_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[48c]"></a>MXC_TMR_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Common_TO_Check
</UL>

<P><STRONG><a name="[491]"></a>MXC_TMR_Init</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, tmr_me17.o(i.MXC_TMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Reset_Periph
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_Init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockSourceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
</UL>

<P><STRONG><a name="[487]"></a>MXC_TMR_RevB_ClearFlags</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_ClearFlags))
<BR><BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
</UL>

<P><STRONG><a name="[493]"></a>MXC_TMR_RevB_ConfigGeneric</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, tmr_revb.o(i.MXC_TMR_RevB_ConfigGeneric))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_TMR_RevB_ConfigGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_Init
</UL>

<P><STRONG><a name="[48f]"></a>MXC_TMR_RevB_EnableInt</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_EnableInt
</UL>

<P><STRONG><a name="[490]"></a>MXC_TMR_RevB_GetFlags</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_GetFlags
</UL>

<P><STRONG><a name="[492]"></a>MXC_TMR_RevB_Init</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, tmr_revb.o(i.MXC_TMR_RevB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXC_TMR_RevB_Init &rArr; MXC_TMR_RevB_ConfigGeneric
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_ConfigGeneric
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
</UL>

<P><STRONG><a name="[498]"></a>MXC_TMR_RevB_SetCompare</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCompare
</UL>

<P><STRONG><a name="[49a]"></a>MXC_TMR_RevB_SetCount</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_SetCount))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCount
</UL>

<P><STRONG><a name="[49c]"></a>MXC_TMR_RevB_Shutdown</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_Shutdown))
<BR><BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Shutdown
</UL>

<P><STRONG><a name="[49d]"></a>MXC_TMR_RevB_Start</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_Start))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Start
</UL>

<P><STRONG><a name="[49e]"></a>MXC_TMR_RevB_Stop</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tmr_revb.o(i.MXC_TMR_RevB_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Stop
</UL>

<P><STRONG><a name="[494]"></a>MXC_TMR_RevB_TO_Start</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, tmr_revb.o(i.MXC_TMR_RevB_TO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MXC_TMR_RevB_TO_Start &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Stop
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Start
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_TO_Start
</UL>

<P><STRONG><a name="[497]"></a>MXC_TMR_SetCompare</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tmr_me17.o(i.MXC_TMR_SetCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_TMR_SetCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_SetCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[499]"></a>MXC_TMR_SetCount</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tmr_me17.o(i.MXC_TMR_SetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_TMR_SetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_SetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[49b]"></a>MXC_TMR_Shutdown</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[496]"></a>MXC_TMR_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
</UL>

<P><STRONG><a name="[495]"></a>MXC_TMR_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TMR_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
</UL>

<P><STRONG><a name="[48a]"></a>MXC_TMR_TO_Check</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tmr_me17.o(i.MXC_TMR_TO_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_TMR_TO_Check &rArr; MXC_TMR_Common_TO_Check &rArr; MXC_TMR_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Common_TO_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Common_Delay
</UL>

<P><STRONG><a name="[489]"></a>MXC_TMR_TO_Start</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tmr_me17.o(i.MXC_TMR_TO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MXC_TMR_TO_Start &rArr; MXC_TMR_RevB_TO_Start &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_RevB_TO_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Common_Delay
</UL>

<P><STRONG><a name="[49f]"></a>MXC_TRNG_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trng_me17.o(i.MXC_TRNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TRNG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoInit
</UL>

<P><STRONG><a name="[4a1]"></a>MXC_TRNG_Random</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, trng_me17.o(i.MXC_TRNG_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_TRNG_Random &rArr; MXC_TRNG_RevB_Random &rArr; MXC_TRNG_RandomInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_Random
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoInit
</UL>

<P><STRONG><a name="[4a3]"></a>MXC_TRNG_RandomInt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, trng_me17.o(i.MXC_TRNG_RandomInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TRNG_RandomInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_RandomInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_Random
</UL>

<P><STRONG><a name="[4a0]"></a>MXC_TRNG_RevB_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trng_revb.o(i.MXC_TRNG_RevB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Init
</UL>

<P><STRONG><a name="[4a2]"></a>MXC_TRNG_RevB_Random</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, trng_revb.o(i.MXC_TRNG_RevB_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_TRNG_RevB_Random &rArr; MXC_TRNG_RandomInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RandomInt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Random
</UL>

<P><STRONG><a name="[4a4]"></a>MXC_TRNG_RevB_RandomInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, trng_revb.o(i.MXC_TRNG_RevB_RandomInt))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RandomInt
</UL>

<P><STRONG><a name="[4a6]"></a>MXC_TRNG_RevB_Shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trng_revb.o(i.MXC_TRNG_RevB_Shutdown))
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Shutdown
</UL>

<P><STRONG><a name="[4a5]"></a>MXC_TRNG_Shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, trng_me17.o(i.MXC_TRNG_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_TRNG_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_RevB_Shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoInit
</UL>

<P><STRONG><a name="[4a7]"></a>MXC_UART_AsyncCallback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_AsyncCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4a9]"></a>MXC_UART_AsyncHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_AsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_UART_AsyncHandler &rArr; MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4ab]"></a>MXC_UART_AsyncStop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_AsyncStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_UART_AsyncStop &rArr; MXC_UART_RevB_AsyncStop &rArr; MXC_UART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStop
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4ad]"></a>MXC_UART_ClearFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4af]"></a>MXC_UART_ClearTXFIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_ClearTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_ClearTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_ClearTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
</UL>

<P><STRONG><a name="[4b1]"></a>MXC_UART_Common_WriteCharacter</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart_common.o(i.MXC_UART_Common_WriteCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_UART_Common_WriteCharacter &rArr; MXC_UART_WriteCharacterRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteCharacterRaw
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetTXFIFOAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteCharacter
</UL>

<P><STRONG><a name="[4b4]"></a>MXC_UART_DisableInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStopTx
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStopRx
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStop
</UL>

<P><STRONG><a name="[4b6]"></a>MXC_UART_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
</UL>

<P><STRONG><a name="[4b8]"></a>MXC_UART_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4ba]"></a>MXC_UART_GetFrequency</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_GetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_GetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetFrequency
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFrequency
</UL>

<P><STRONG><a name="[4bc]"></a>MXC_UART_GetRXFIFOAvailable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_GetRXFIFOAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_GetRXFIFOAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_GetRXFIFOAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4be]"></a>MXC_UART_GetRXThreshold</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_GetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_GetRXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_GetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4b2]"></a>MXC_UART_GetTXFIFOAvailable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_GetTXFIFOAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_GetTXFIFOAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_GetTXFIFOAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Common_WriteCharacter
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[315]"></a>MXC_UART_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, uart_me17.o(i.MXC_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MXC_UART_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockSourceEnable
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
</UL>

<P><STRONG><a name="[4c3]"></a>MXC_UART_ReadRXFIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_ReadRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_ReadRXFIFO &rArr; MXC_UART_RevB_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4a8]"></a>MXC_UART_RevB_AsyncCallback</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncTxCallback
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncCallback
</UL>

<P><STRONG><a name="[4aa]"></a>MXC_UART_RevB_AsyncHandler</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetTXFIFOAvailable
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetRXFIFOAvailable
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncTxCallback
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStopTx
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncStopRx
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncRxCallback
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteTXFIFO
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetRXThreshold
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ReadRXFIFO
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetRXThreshold
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFlags
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ClearFlags
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncStop
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncHandler
</UL>

<P><STRONG><a name="[4c6]"></a>MXC_UART_RevB_AsyncRxCallback</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevB_AsyncRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncCallback
</UL>

<P><STRONG><a name="[4ac]"></a>MXC_UART_RevB_AsyncStop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevB_AsyncStop &rArr; MXC_UART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncStop
</UL>

<P><STRONG><a name="[4c9]"></a>MXC_UART_RevB_AsyncStopRx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncStopRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevB_AsyncStopRx &rArr; MXC_UART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4ca]"></a>MXC_UART_RevB_AsyncStopTx</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncStopTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevB_AsyncStopTx &rArr; MXC_UART_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4c5]"></a>MXC_UART_RevB_AsyncTxCallback</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, uart_revb.o(i.MXC_UART_RevB_AsyncTxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncCallback
</UL>

<P><STRONG><a name="[4ae]"></a>MXC_UART_RevB_ClearFlags</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_ClearFlags))
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ClearFlags
</UL>

<P><STRONG><a name="[4b0]"></a>MXC_UART_RevB_ClearTXFIFO</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_ClearTXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ClearTXFIFO
</UL>

<P><STRONG><a name="[4b5]"></a>MXC_UART_RevB_DisableInt</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_DisableInt
</UL>

<P><STRONG><a name="[4b7]"></a>MXC_UART_RevB_EnableInt</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_EnableInt
</UL>

<P><STRONG><a name="[4b9]"></a>MXC_UART_RevB_GetFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_GetFlags))
<BR><BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFlags
</UL>

<P><STRONG><a name="[4bb]"></a>MXC_UART_RevB_GetFrequency</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_GetFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFrequency
</UL>

<P><STRONG><a name="[4bd]"></a>MXC_UART_RevB_GetRXFIFOAvailable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_GetRXFIFOAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetRXFIFOAvailable
</UL>

<P><STRONG><a name="[4bf]"></a>MXC_UART_RevB_GetRXThreshold</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_GetRXThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetRXThreshold
</UL>

<P><STRONG><a name="[4c0]"></a>MXC_UART_RevB_GetTXFIFOAvailable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_GetTXFIFOAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetTXFIFOAvailable
</UL>

<P><STRONG><a name="[4c2]"></a>MXC_UART_RevB_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, uart_revb.o(i.MXC_UART_RevB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MXC_UART_RevB_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevB_SetFrequency &rArr; MXC_UART_GetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetStopBits
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetParity
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetDataSize
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetRXThreshold
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>

<P><STRONG><a name="[4c4]"></a>MXC_UART_RevB_ReadRXFIFO</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_revb.o(i.MXC_UART_RevB_ReadRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_RevB_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ReadRXFIFO
</UL>

<P><STRONG><a name="[4d1]"></a>MXC_UART_RevB_SetDataSize</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_SetDataSize))
<BR><BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetDataSize
</UL>

<P><STRONG><a name="[4d3]"></a>MXC_UART_RevB_SetFlowCtrl</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_SetFlowCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFlowCtrl
</UL>

<P><STRONG><a name="[4cf]"></a>MXC_UART_RevB_SetFrequency</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, uart_revb.o(i.MXC_UART_RevB_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_UART_RevB_SetFrequency &rArr; MXC_UART_GetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFrequency
</UL>

<P><STRONG><a name="[4d4]"></a>MXC_UART_RevB_SetParity</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_SetParity))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetParity
</UL>

<P><STRONG><a name="[4d5]"></a>MXC_UART_RevB_SetRXThreshold</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_SetRXThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetRXThreshold
</UL>

<P><STRONG><a name="[4d6]"></a>MXC_UART_RevB_SetStopBits</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_SetStopBits))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetStopBits
</UL>

<P><STRONG><a name="[4d0]"></a>MXC_UART_RevB_TransactionAsync</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, uart_revb.o(i.MXC_UART_RevB_TransactionAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetTXFIFOAvailable
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetRXFIFOAvailable
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteTXFIFO
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ReadRXFIFO
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_EnableInt
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_DisableInt
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ClearTXFIFO
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_TransactionAsync
</UL>

<P><STRONG><a name="[4d9]"></a>MXC_UART_RevB_WriteCharacterRaw</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uart_revb.o(i.MXC_UART_RevB_WriteCharacterRaw))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteCharacterRaw
</UL>

<P><STRONG><a name="[4da]"></a>MXC_UART_RevB_WriteTXFIFO</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_revb.o(i.MXC_UART_RevB_WriteTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteTXFIFO
</UL>

<P><STRONG><a name="[4cb]"></a>MXC_UART_SetDataSize</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_SetDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
</UL>

<P><STRONG><a name="[4d2]"></a>MXC_UART_SetFlowCtrl</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXC_UART_SetFlowCtrl &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
</UL>

<P><STRONG><a name="[4ce]"></a>MXC_UART_SetFrequency</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_UART_SetFrequency &rArr; MXC_UART_RevB_SetFrequency &rArr; MXC_UART_GetFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetFrequency
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
</UL>

<P><STRONG><a name="[4cc]"></a>MXC_UART_SetParity</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
</UL>

<P><STRONG><a name="[4c8]"></a>MXC_UART_SetRXThreshold</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_SetRXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4cd]"></a>MXC_UART_SetStopBits</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_SetStopBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_SetStopBits
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_SetStopBits
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_Init
</UL>

<P><STRONG><a name="[4c1]"></a>MXC_UART_Shutdown</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_UART_Shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Reset_Periph
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>

<P><STRONG><a name="[4d7]"></a>MXC_UART_TransactionAsync</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart_me17.o(i.MXC_UART_TransactionAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
</UL>

<P><STRONG><a name="[4d8]"></a>MXC_UART_WriteCharacter</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_WriteCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_UART_WriteCharacter &rArr; MXC_UART_Common_WriteCharacter &rArr; MXC_UART_WriteCharacterRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Common_WriteCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[4b3]"></a>MXC_UART_WriteCharacterRaw</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_WriteCharacterRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_UART_WriteCharacterRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_WriteCharacterRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Common_WriteCharacter
</UL>

<P><STRONG><a name="[4c7]"></a>MXC_UART_WriteTXFIFO</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me17.o(i.MXC_UART_WriteTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_TransactionAsync
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevB_AsyncHandler
</UL>

<P><STRONG><a name="[4db]"></a>MXC_WUT_Config</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_WUT_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
</UL>

<P><STRONG><a name="[4dd]"></a>MXC_WUT_Enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_WUT_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
</UL>

<P><STRONG><a name="[4df]"></a>MXC_WUT_GetCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_GetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_WUT_GetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCounterGet
</UL>

<P><STRONG><a name="[4e1]"></a>MXC_WUT_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MXC_WUT_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockSourceEnable
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
</UL>

<P><STRONG><a name="[4e3]"></a>MXC_WUT_IntClear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_IntClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_WUT_IntClear
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_IntClear
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUT_IRQHandler
</UL>

<P><STRONG><a name="[4dc]"></a>MXC_WUT_RevA_Config</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_Config))
<BR><BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Config
</UL>

<P><STRONG><a name="[4de]"></a>MXC_WUT_RevA_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Enable
</UL>

<P><STRONG><a name="[4e0]"></a>MXC_WUT_RevA_GetCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_GetCount
</UL>

<P><STRONG><a name="[4e2]"></a>MXC_WUT_RevA_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Init
</UL>

<P><STRONG><a name="[4e4]"></a>MXC_WUT_RevA_IntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_IntClear))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_IntClear
</UL>

<P><STRONG><a name="[4e6]"></a>MXC_WUT_RevA_SetCompare</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wut_reva.o(i.MXC_WUT_RevA_SetCompare))
<BR><BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_SetCompare
</UL>

<P><STRONG><a name="[4e5]"></a>MXC_WUT_SetCompare</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wut_me17.o(i.MXC_WUT_SetCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_WUT_SetCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_RevA_SetCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCompareSet
</UL>

<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.NMI_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>PB_Handler_1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.PB_Handler_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PB_Handler_1 &rArr; AppUiBtnTest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiBtnTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[118]"></a>PB_Handler_2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.PB_Handler_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PB_Handler_2 &rArr; AppUiBtnTest
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiBtnTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[312]"></a>PB_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pb.o(i.PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PB_Init &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[4e8]"></a>PB_RegisterCallback</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, pb.o(i.PB_RegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PB_RegisterCallback &rArr; MXC_GPIO_RegisterCallback &rArr; MXC_GPIO_Common_RegisterCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RegisterCallback
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_IntConfig
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_EnableInt
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e9]"></a>PalBbBleCancelData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pal_bb_ble.o(i.PalBbBleCancelData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleTxCancel
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestCleanupOp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvCancelConnOp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstCancelConnOp
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvCancelAdvOp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstCancelScanOp
</UL>

<P><STRONG><a name="[4ec]"></a>PalBbBleCancelTifs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pal_bb_ble.o(i.PalBbBleCancelTifs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PalBbBleCancelTifs &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleTxCancel
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnRxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnRxCompCback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
</UL>

<P><STRONG><a name="[61f]"></a>PalBbBleDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleDisable))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStopPrbs15
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStopBle
</UL>

<P><STRONG><a name="[61c]"></a>PalBbBleEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleEnable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartPrbs15
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartBleDtm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartBle
</UL>

<P><STRONG><a name="[61d]"></a>PalBbBleEnableDataWhitening</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleEnableDataWhitening))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartPrbs15
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartBleDtm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartBle
</UL>

<P><STRONG><a name="[61e]"></a>PalBbBleEnablePrbs15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleEnablePrbs15))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStopPrbs15
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleStartPrbs15
</UL>

<P><STRONG><a name="[2dd]"></a>PalBbBleInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleInit))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleInit
</UL>

<P><STRONG><a name="[616]"></a>PalBbBleLowPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleLowPower
</UL>

<P><STRONG><a name="[2fc]"></a>PalBbBleRxData</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, pal_bb_ble.o(i.PalBbBleRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_phy
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_crc_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_channel
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_acc_addr
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_set_buffer
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_register_callback
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_rx_params
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_rx
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_rx
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_rx_start
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFSRestore
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFS
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestRxOp
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[4fc]"></a>PalBbBleRxTifsData</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pal_bb_ble.o(i.PalBbBleRxTifsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PalBbBleRxTifsData &rArr; llc_api_crypto_set_rx_params &rArr; dbb_crypto_set_txrx_params
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_set_buffer
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_register_callback
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_rx_params
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_rx
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_rx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFS
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
</UL>

<P><STRONG><a name="[4fd]"></a>PalBbBleSetChannelParam</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleSetChannelParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PalBbBleSetChannelParam &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestTxOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestRxOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteConnOp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteConnOp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
</UL>

<P><STRONG><a name="[622]"></a>PalBbBleSetDataParams</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pal_bb_ble.o(i.PalBbBleSetDataParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PalBbBleSetDataParams
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestTxOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestRxOp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteConnOp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteConnOp
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[613]"></a>PalBbBleSetOpParams</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pal_bb_ble.o(i.PalBbBleSetOpParams))
<BR><BR>[Called By]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
</UL>

<P><STRONG><a name="[300]"></a>PalBbBleTxData</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, pal_bb_ble.o(i.PalBbBleTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_register_callback
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_setup
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_insert_data
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_phy
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_crc_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_channel
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_acc_addr
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_tx_params
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_tx
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_tx
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_tx_start
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFSRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestTxOp
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
</UL>

<P><STRONG><a name="[302]"></a>PalBbBleTxTifsData</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, pal_bb_ble.o(i.PalBbBleTxTifsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PalBbBleTxTifsData &rArr; llc_api_tx_start &rArr; dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_register_callback
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_setup
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_insert_data
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_data
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_tx_params
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_tx
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_tx
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_tx_start
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_now
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
</UL>

<P><STRONG><a name="[30d]"></a>PalBbDisable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pal_bb.o(i.PalBbDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
</UL>

<P><STRONG><a name="[304]"></a>PalBbEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pal_bb.o(i.PalBbEnable))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbExecuteBod
</UL>

<P><STRONG><a name="[301]"></a>PalBbGetCurrentTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pal_bb.o(i.PalBbGetCurrentTime))
<BR><BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_now
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnTxCompCback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvConnRxCompCback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnTxCompCback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstConnRxCompCback
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandler
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAbortSlvLatency
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckAbortSlvLatency
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schGetTimeToExecBod
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schDueTimeInFuture
</UL>

<P><STRONG><a name="[30a]"></a>PalBbInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pal_bb.o(i.PalBbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = PalBbInit &rArr; llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbDisable
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_setup
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_txpower
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbInit
</UL>

<P><STRONG><a name="[7dc]"></a>PalBbLoadCfg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pal_bb.o(i.PalBbLoadCfg))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[625]"></a>PalBbSetProtId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pal_bb.o(i.PalBbSetProtId))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbProtStart
</UL>

<P><STRONG><a name="[50d]"></a>PalCfgLoadData</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pal_cfg.o(i.PalCfgLoadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PalCfgLoadData &rArr; palCfgLoadExtMac154Address &rArr; MXC_SYS_GetUSN &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadLlParams
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadExtMac154Address
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadBdAddress
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgGetBlePhyFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f6]"></a>PalCryptoAesEcb</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, pal_crypto.o(i.PalCryptoAesEcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCryptoAesEcb
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEncrypt
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateHash
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcSessionKey
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoInit
</UL>

<P><STRONG><a name="[ad]"></a>PalCryptoAesEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pal_bb_ble.o(i.PalCryptoAesEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PalCryptoAesEnable &rArr; llc_api_crypto_set_key_iv &rArr; dbb_crypto_set_key_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_key_iv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
<LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[3fe]"></a>PalCryptoGenerateRandomNumber</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pal_crypto.o(i.PalCryptoGenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PalCryptoGenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRandNum
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateRpa
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateMstVectors
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateSlvVectors
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRng
</UL>

<P><STRONG><a name="[515]"></a>PalCryptoInit</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, pal_crypto.o(i.PalCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Shutdown
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Random
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TRNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[af]"></a>PalCryptoSetDecryptPacketCount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pal_bb_ble.o(i.PalCryptoSetDecryptPacketCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PalCryptoSetDecryptPacketCount &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
<LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[ae]"></a>PalCryptoSetEncryptPacketCount</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pal_bb_ble.o(i.PalCryptoSetEncryptPacketCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PalCryptoSetEncryptPacketCount &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
<LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[51b]"></a>PalEnterCs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pal_sys.o(i.PalEnterCs))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysIsBusy
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>

<P><STRONG><a name="[51c]"></a>PalExitCs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pal_sys.o(i.PalExitCs))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysIsBusy
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>

<P><STRONG><a name="[516]"></a>PalFlashEraseSector</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pal_flash.o(i.PalFlashEraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PalFlashEraseSector &rArr; MXC_FLC_PageErase &rArr; MXC_FLC_ME17_PageErase &rArr; MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_PageErase
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseDataAll
</UL>

<P><STRONG><a name="[5af]"></a>PalFlashInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pal_flash.o(i.PalFlashInit))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
</UL>

<P><STRONG><a name="[518]"></a>PalFlashRead</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pal_flash.o(i.PalFlashRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PalFlashRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalNvmGetState
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmReadData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseData
</UL>

<P><STRONG><a name="[51a]"></a>PalFlashWrite</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pal_flash.o(i.PalFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_Write
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalNvmGetState
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmWriteData
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseData
</UL>

<P><STRONG><a name="[51d]"></a>PalLedInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pal_led.o(i.PalLedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PalLedInit &rArr; LED_Init &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_Init &rArr; MXC_GPIO_Common_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[51e]"></a>PalLedOff</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pal_led.o(i.PalLedOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PalLedOff &rArr; LED_Off &rArr; MXC_GPIO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[316]"></a>PalLedOn</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pal_led.o(i.PalLedOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUT_IRQHandler
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[5b1]"></a>PalNvmGetSectorSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pal_flash.o(i.PalNvmGetSectorSize))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
</UL>

<P><STRONG><a name="[519]"></a>PalNvmGetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pal_flash.o(i.PalNvmGetState))
<BR><BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
</UL>

<P><STRONG><a name="[5b0]"></a>PalNvmGetTotalSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pal_flash.o(i.PalNvmGetTotalSize))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
</UL>

<P><STRONG><a name="[51f]"></a>PalRtcCompareSet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pal_rtc.o(i.PalRtcCompareSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PalRtcCompareSet &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_SetCompare
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[521]"></a>PalRtcCounterGet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pal_rtc.o(i.PalRtcCounterGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PalRtcCounterGet &rArr; MXC_WUT_GetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerInit
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleepUpdate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[522]"></a>PalRtcDisableCompareIrq</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pal_rtc.o(i.PalRtcDisableCompareIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PalRtcDisableCompareIrq &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUT_IRQHandler
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[523]"></a>PalRtcEnableCompareIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pal_rtc.o(i.PalRtcEnableCompareIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PalRtcEnableCompareIrq &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[524]"></a>PalRtcInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pal_rtc.o(i.PalRtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PalRtcInit &rArr; MXC_WUT_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Init
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Enable
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_Config
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_LP_EnableWUTAlarmWakeup
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[517]"></a>PalSysAssertTrap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pal_sys.o(i.PalSysAssertTrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcEnableCompareIrq
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcDisableCompareIrq
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCompareSet
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashEraseSector
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadExtMac154Address
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palCfgLoadBdAddress
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palUartGetNum
</UL>

<P><STRONG><a name="[527]"></a>PalSysInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, pal_sys.o(i.PalSysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = PalSysInit &rArr; PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOff
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedInit
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoInit
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DMA_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[529]"></a>PalSysIsBusy</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, pal_sys.o(i.PalSysIsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PalSysIsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[52a]"></a>PalSysSleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pal_sys.o(i.PalSysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PalSysSleep &rArr; MXC_LP_EnterSleepMode
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_LP_EnterSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[52b]"></a>PalTimerInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, pal_timer.o(i.PalTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PalTimerInit &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Stop
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInit
</UL>

<P><STRONG><a name="[52e]"></a>PalTimerSleep</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, pal_timer.o(i.PalTimerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PalTimerSleep &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOff
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Stop
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Start
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Shutdown
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCount
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCompare
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Init
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_EnableInt
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_LP_EnterSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[530]"></a>PalTimerStart</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pal_timer.o(i.PalTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PalTimerStart &rArr; MXC_TMR_SetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Start
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCount
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_SetCompare
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_EnableInt
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[531]"></a>PalTimerStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pal_timer.o(i.PalTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PalTimerStop &rArr; MXC_TMR_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Stop
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReload
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[532]"></a>PalUartGetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pal_uart.o(i.PalUartGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PalUartGetState &rArr; palUartGetNum &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palUartGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
</UL>

<P><STRONG><a name="[534]"></a>PalUartInit</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, pal_uart.o(i.PalUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = PalUartInit &rArr; MXC_UART_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetStopBits
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetParity
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFlowCtrl
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetDataSize
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palUartGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoUartInit
</UL>

<P><STRONG><a name="[535]"></a>PalUartReadData</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pal_uart.o(i.PalUartReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PalUartReadData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_TransactionAsync
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palUartGetNum
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoUartInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartRxHandler
</UL>

<P><STRONG><a name="[538]"></a>PalUartWriteData</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, pal_uart.o(i.PalUartWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PalUartWriteData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_TransactionAsync
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palUartGetNum
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxStart
</UL>

<P><STRONG><a name="[81]"></a>PreInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_max32655.o(i.PreInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(.text)
</UL>
<P><STRONG><a name="[539]"></a>PrintVsn</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, print.o(i.PrintVsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printParseInt
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printFmtInt
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxPrint
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTraceOverFlowMessage
</UL>

<P><STRONG><a name="[53c]"></a>SchBleCalcAdvOpDuration</STRONG> (Thumb, 790 bytes, Stack size 48 bytes, sch_ble.o(i.SchBleCalcAdvOpDuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SchBleCalcAdvOpDuration &rArr; SchBleCalcPerAdvDurationUsec &rArr; SchBleCalcAdvPktDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleGetAlignedAuxOffsUsec
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvPktDurationUsec
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcPerAdvDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
</UL>

<P><STRONG><a name="[53d]"></a>SchBleCalcAdvPktDurationUsec</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sch_ble.o(i.SchBleCalcAdvPktDurationUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchBleCalcAdvPktDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcPerAdvDurationUsec
</UL>

<P><STRONG><a name="[7bc]"></a>SchBleCalcDataPktDurationUsec</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sch_ble.o(i.SchBleCalcDataPktDurationUsec))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
</UL>

<P><STRONG><a name="[540]"></a>SchBleCalcPerAdvDurationUsec</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, sch_ble.o(i.SchBleCalcPerAdvDurationUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SchBleCalcPerAdvDurationUsec &rArr; SchBleCalcAdvPktDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvPktDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
</UL>

<P><STRONG><a name="[53f]"></a>SchBleGetAlignedAuxOffsUsec</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sch_ble.o(i.SchBleGetAlignedAuxOffsUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SchBleGetAlignedAuxOffsUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
</UL>

<P><STRONG><a name="[cf]"></a>SchHandler</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, sch_main.o(i.SchHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SchHandler &rArr; schBodLoadHandler &rArr; schTryLoadHead &rArr; schLoadBod &rArr; BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveHead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(i.LlInitSchInit)
</UL>
<P><STRONG><a name="[40f]"></a>SchHandlerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sch_main.o(i.SchHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SchHandlerInit &rArr; SchInit &rArr; PalTimerInit &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbRegister
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSchInit
</UL>

<P><STRONG><a name="[543]"></a>SchInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sch_main.o(i.SchInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SchInit &rArr; PalTimerInit &rArr; MXC_TMR_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReset
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandlerInit
</UL>

<P><STRONG><a name="[546]"></a>SchInsertAtDueTime</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, sch_list.o(i.SchInsertAtDueTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchIsConflictResolvable
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertToEmptyList
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertBefore
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertAfter
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schDueTimeInFuture
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateEndOp
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[54f]"></a>SchInsertEarlyAsPossible</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sch_list.o(i.SchInsertEarlyAsPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SchInsertEarlyAsPossible &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBbTimerBoundaryUs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertToEmptyList
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertBefore
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertAfter
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schDueTimeInFuture
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
</UL>

<P><STRONG><a name="[551]"></a>SchInsertLateAsPossible</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, sch_list.o(i.SchInsertLateAsPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SchInsertLateAsPossible &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertToEmptyList
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertBefore
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertAfter
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schDueTimeInFuture
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
</UL>

<P><STRONG><a name="[552]"></a>SchInsertNextAvailable</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sch_list.o(i.SchInsertNextAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SchInsertNextAvailable &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertToEmptyList
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertBefore
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateOpCommit
</UL>

<P><STRONG><a name="[554]"></a>SchLoadHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sch_main.o(i.SchLoadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
</UL>

<P><STRONG><a name="[556]"></a>SchReload</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sch_list.o(i.SchReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SchReload &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstReloadDataPdu
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstSetEstablishConn
</UL>

<P><STRONG><a name="[557]"></a>SchRemove</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, sch_list.o(i.SchRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveHead
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveMiddle
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schGetTimeToExecBod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActShutdown
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActShutdown
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActShutdown
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckAbortSlvLatency
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFlagLinkTerm
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFlagLinkTerm
</UL>

<P><STRONG><a name="[545]"></a>SchReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sch_main.o(i.SchReset))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInit
</UL>

<P><STRONG><a name="[55b]"></a>SchRmAdd</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, sch_rm.o(i.SchRmAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SchRmAdd &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmSelectPreferredIntervalUsec
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmCheckRsvnCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[7a2]"></a>SchRmCalcCommonPeriodicityUsec</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sch_rm.o(i.SchRmCalcCommonPeriodicityUsec))
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
</UL>

<P><STRONG><a name="[774]"></a>SchRmCommitUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sch_rm.o(i.SchRmCommitUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnUpdateOp
</UL>

<P><STRONG><a name="[55f]"></a>SchRmGetOffsetUsec</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, sch_rm.o(i.SchRmGetOffsetUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = SchRmGetOffsetUsec &rArr; SchTmGetFirstAnchor &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmGetFirstAnchor
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[561]"></a>SchRmInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sch_rm.o(i.SchRmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SchRmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnResetHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[562]"></a>SchRmRemove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sch_rm.o(i.SchRmRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SchRmRemove &rArr; schRmIntRemoveRmOffset &rArr; schRmIntCheckDecOffsetDepth
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntRemoveRmOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[564]"></a>SchRmStartUpdate</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, sch_rm.o(i.SchRmStartUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SchRmStartUpdate &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmSelectPreferredIntervalUsec
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntRemoveRmOffset
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmCheckRsvnCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
</UL>

<P><STRONG><a name="[7b4]"></a>SchTmAdd</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sch_tm.o(i.SchTmAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SchTmAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[565]"></a>SchTmCheckConflict</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, sch_tm.o(i.SchTmCheckConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCalculateDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntAddRmOffset
</UL>

<P><STRONG><a name="[560]"></a>SchTmGetFirstAnchor</STRONG> (Thumb, 668 bytes, Stack size 200 bytes, sch_tm.o(i.SchTmGetFirstAnchor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SchTmGetFirstAnchor &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCalculateDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmGetOffsetUsec
</UL>

<P><STRONG><a name="[567]"></a>SchTmInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sch_tm.o(i.SchTmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SchTmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnResetHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[70f]"></a>SchTmRemove</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sch_tm.o(i.SchTmRemove))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[568]"></a>SecAes</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, sec_aes.o(i.SecAes))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextToken
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeEncryptCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActResolveAddr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActGenAddr
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcS1
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>

<P><STRONG><a name="[d5]"></a>SecAesHciCback</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sec_aes.o(i.SecAesHciCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SecAesHciCback &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_aes.o(i.SecAesInit)
</UL>
<P><STRONG><a name="[590]"></a>SecAesInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sec_aes.o(i.SecAesInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[2cf]"></a>SecCmac</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sec_cmac_hci.o(i.SecCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsHashDatabaseString
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
</UL>

<P><STRONG><a name="[d6]"></a>SecCmacHciCback</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sec_cmac_hci.o(i.SecCmacHciCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SecCmacHciCback &rArr; secCmacGenSubkey2 &rArr; secCmacProcessBlock &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey2
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_cmac_hci.o(i.SecCmacInit)
</UL>
<P><STRONG><a name="[591]"></a>SecCmacInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sec_cmac_hci.o(i.SecCmacInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[352]"></a>SecEccGenKey</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sec_ecc_hci.o(i.SecEccGenKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SecEccGenKey &rArr; HciLeReadLocalP256PubKey &rArr; LlGenerateP256KeyPair &rArr; LctrGenerateP256KeyPair &rArr; lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeReadLocalP256PubKey
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGenerateEccKeyReq
</UL>

<P><STRONG><a name="[56e]"></a>SecEccGenSharedSecret</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, sec_ecc_hci.o(i.SecEccGenSharedSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = SecEccGenSharedSecret &rArr; HciLeGenerateDHKey &rArr; LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeGenerateDHKey
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcSharedSecret
</UL>

<P><STRONG><a name="[d7]"></a>SecEccHciCback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sec_ecc_hci.o(i.SecEccHciCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SecEccHciCback &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_ecc_hci.o(i.SecEccInit)
</UL>
<P><STRONG><a name="[592]"></a>SecEccInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sec_ecc_hci.o(i.SecEccInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[570]"></a>SecInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sec_main.o(i.SecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSecRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[572]"></a>SecLeEncryptCmd</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, sec_main.o(i.SecLeEncryptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeEncryptCmd
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey1
</UL>

<P><STRONG><a name="[278]"></a>SecRand</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sec_main.o(i.SecRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SecRand &rArr; HciLeRandCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRandCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlePasskey
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActGenAddr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfCalc1
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobSendRand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSetup
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGenerateLtk
</UL>

<P><STRONG><a name="[573]"></a>SmpDbGetFailureCount</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbGetFailureCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmpDbGetFailureCount &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
</UL>

<P><STRONG><a name="[575]"></a>SmpDbGetPairingDisabledTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbGetPairingDisabledTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmpDbGetPairingDisabledTime &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResumeAttemptsState
</UL>

<P><STRONG><a name="[576]"></a>SmpDbInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, smp_db.o(i.SmpDbInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SmpDbInit &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandlerInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecReset
</UL>

<P><STRONG><a name="[578]"></a>SmpDbMaxAttemptReached</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbMaxAttemptReached))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmpDbMaxAttemptReached &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbStartServiceTimer
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActMaxAttempts
</UL>

<P><STRONG><a name="[57a]"></a>SmpDbPairingFailed</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbPairingFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActCnfVerify
</UL>

<P><STRONG><a name="[57b]"></a>SmpDbService</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbService))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SmpDbService &rArr; smpDbStartServiceTimer &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbStartServiceTimer
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbRecordInUse
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
</UL>

<P><STRONG><a name="[57d]"></a>SmpDbSetFailureCount</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smp_db.o(i.SmpDbSetFailureCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmpDbSetFailureCount &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
</UL>

<P><STRONG><a name="[57e]"></a>SmpDmEncryptInd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, smp_main.o(i.SmpDmEncryptInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SmpDmEncryptInd &rArr; SmpHandler &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[57f]"></a>SmpDmGetStk</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smp_main.o(i.SmpDmGetStk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SmpDmGetStk
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGetScSecLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[582]"></a>SmpDmLescEnabled</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smp_main.o(i.SmpDmLescEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SmpDmLescEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[34e]"></a>SmpDmMsgSend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smp_main.o(i.SmpDmMsgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecPairReq
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecCompareRsp
</UL>

<P><STRONG><a name="[e3]"></a>SmpHandler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, smp_main.o(i.SmpHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SmpHandler &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbService
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmEncryptInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stack_datc.o(i.StackInitDatc)
</UL>
<P><STRONG><a name="[584]"></a>SmpHandlerInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, smp_main.o(i.SmpHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SmpHandlerInit &rArr; SmpDbInit &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRegister
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cRegister
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[585]"></a>SmpScAlloc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, smp_sc_main.o(i.SmpScAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SmpScAlloc &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcG2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[586]"></a>SmpScAllocScratchBuffers</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, smp_sc_main.o(i.SmpScAllocScratchBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmpScAllocScratchBuffers &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScProcPairing
</UL>

<P><STRONG><a name="[587]"></a>SmpScCalcF4</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, smp_sc_main.o(i.SmpScCalcF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = SmpScCalcF4 &rArr; SmpScCmac &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobCalcCb
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcF4
</UL>

<P><STRONG><a name="[588]"></a>SmpScCat</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smp_sc_main.o(i.SmpScCat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SmpScCat &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcG2
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[58a]"></a>SmpScCat128</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, smp_sc_main.o(i.SmpScCat128))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmpScCat128 &rArr; Calc128Cpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcG2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[589]"></a>SmpScCmac</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, smp_sc_main.o(i.SmpScCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SmpScCmac &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmac
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcG2
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[58b]"></a>SmpScFreeScratchBuffers</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, smp_sc_main.o(i.SmpScFreeScratchBuffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SmpScFreeScratchBuffers &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCleanup
</UL>

<P><STRONG><a name="[34f]"></a>SmpScGetCancelMsgWithReattempt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smp_sc_main.o(i.SmpScGetCancelMsgWithReattempt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SmpScGetCancelMsgWithReattempt &rArr; SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbPairingFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecCompareRsp
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScFailWithReattempt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
</UL>

<P><STRONG><a name="[58e]"></a>SmpScInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, smp_sc_main.o(i.SmpScInit))
<BR><BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpiScInit
</UL>

<P><STRONG><a name="[356]"></a>SmpScSetOobCfg</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, smp_sc_main.o(i.SmpScSetOobCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = SmpScSetOobCfg &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetOob
</UL>

<P><STRONG><a name="[599]"></a>SmpiInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, smpi_sm.o(i.SmpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[58d]"></a>SmpiScInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smpi_sc_sm.o(i.SmpiScInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SmpiScInit
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScInit
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
</UL>

<P><STRONG><a name="[58f]"></a>StackInitDatc</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stack_datc.o(i.StackInitDatc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StackInitDatc &rArr; SmpHandlerInit &rArr; SmpDbInit &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsSetNextHandler
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpiScInit
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpiInit
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandlerInit
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecInit
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccInit
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmacInit
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAesInit
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cMasterInit
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cInit
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSetMaxRxAclLen
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciHandlerInit
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecLescInit
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecInit
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivInit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHandlerInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevVsInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnMasterInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInit
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandlerInit
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsInit
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsIndInit
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcInit
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttHandlerInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[322]"></a>SvcCoreAddGroup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, svc_core.o(i.SvcCoreAddGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = SvcCoreAddGroup &rArr; AttsAddGroup &rArr; attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsAddGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[653]"></a>SvcCoreGapAddRpaoCh</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, svc_core.o(i.SvcCoreGapAddRpaoCh))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[5db]"></a>SvcCoreGapCentAddrResUpdate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, svc_core.o(i.SvcCoreGapCentAddrResUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appPrivSetAddrResEnableInd
</UL>

<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mxc_delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; MXC_DelayHandler &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[482]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, system_max32655.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_SetClockDiv
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[223]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_max32655.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SystemInit &rArr; PalSysInit &rArr; PalCryptoInit &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_ICC_Enable
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_SetClockDiv
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>

<P><STRONG><a name="[21]"></a>TMR0_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pal_timer.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR0_IRQHandler &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TMR1_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pal_timer.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TMR1_IRQHandler &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_ClearFlags
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TerminalHandler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, terminal.o(i.TerminalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TerminalHandler &rArr; terminalExecute &rArr; TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_terminal.o(i.AppTerminalInit)
</UL>
<P><STRONG><a name="[2a4]"></a>TerminalInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, terminal.o(i.TerminalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TerminalInit &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRegisterCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
</UL>

<P><STRONG><a name="[2a5]"></a>TerminalRegisterCommand</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, terminal.o(i.TerminalRegisterCommand))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalInit
</UL>

<P><STRONG><a name="[2a2]"></a>TerminalRegisterUartTxFunc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal.o(i.TerminalRegisterUartTxFunc))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
</UL>

<P><STRONG><a name="[84]"></a>TerminalRx</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, terminal.o(i.TerminalRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TerminalRx &rArr; TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_terminal.o(i.AppTerminalInit)
</UL>
<P><STRONG><a name="[59e]"></a>TerminalTx</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, terminal.o(i.TerminalTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TerminalTx
</UL>
<BR>[Called By]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxPrint
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxChar
</UL>

<P><STRONG><a name="[59d]"></a>TerminalTxChar</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, terminal.o(i.TerminalTxChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TerminalTxChar &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTx
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRx
</UL>

<P><STRONG><a name="[59f]"></a>TerminalTxPrint</STRONG> (Thumb, 46 bytes, Stack size 288 bytes, terminal.o(i.TerminalTxPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TerminalTxPrint &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVsn
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalPinCodeHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appTerminalCommandBtnHandler
</UL>

<P><STRONG><a name="[59c]"></a>TerminalTxStr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, terminal.o(i.TerminalTxStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTx
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRx
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHandler
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalExecute
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalCommandHelpHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;terminalCommandEchoHandler
</UL>

<P><STRONG><a name="[2a]"></a>UART0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pal_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART0_IRQHandler &rArr; MXC_UART_AsyncHandler &rArr; MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pal_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART1_IRQHandler &rArr; MXC_UART_AsyncHandler &rArr; MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pal_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART2_IRQHandler &rArr; MXC_UART_AsyncHandler &rArr; MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>UART3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pal_uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART3_IRQHandler &rArr; MXC_UART_AsyncHandler &rArr; MXC_UART_RevB_AsyncHandler &rArr; MXC_UART_AsyncCallback &rArr; MXC_UART_RevB_AsyncCallback &rArr; MXC_UART_RevB_AsyncTxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_AsyncHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[3fd]"></a>Uint64ToBstream</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bstream.o(i.Uint64ToBstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uint64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetFeatures
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureRsp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureReq
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteFeatCnf
</UL>

<P><STRONG><a name="[60e]"></a>WStrReverse</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, wstr.o(i.WStrReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WStrReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secHciCback
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
</UL>

<P><STRONG><a name="[56f]"></a>WStrReverseCpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, wstr.o(i.WStrReverseCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WStrReverseCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLeEncryptCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccHciCback
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenSharedSecret
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkSendRand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobProcRand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSendRand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcF4
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckSend
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActAuthSelect
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>

<P><STRONG><a name="[51]"></a>WUT_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pal_rtc.o(i.WUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WUT_IRQHandler &rArr; PalRtcDisableCompareIrq &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_WUT_IntClear
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcDisableCompareIrq
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32655.o(RESET)
</UL>
<P><STRONG><a name="[5a1]"></a>WpcP1Discover</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wpc_main.o(i.WpcP1Discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = WpcP1Discover &rArr; AppDiscFindService &rArr; AttcDiscService &rArr; AttcFindByTypeValueReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[257]"></a>WsfBufAlloc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wsf_buf.o(i.WsfBufAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCalculateDbHash
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscConfigure
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActPairReq
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAllocScratchBuffers
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscFindService
</UL>

<P><STRONG><a name="[252]"></a>WsfBufFree</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wsf_buf.o(i.WsfBufFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attDmConnCback
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsClearPrepWrites
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecLescMsgHandler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScFreeScratchBuffers
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscConnClose
</UL>

<P><STRONG><a name="[5a2]"></a>WsfBufInit</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, wsf_buf.o(i.WsfBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WsfBufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapGetFreeStartAddress
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapCountAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[5a5]"></a>WsfBufIoUartInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wsf_bufio.o(i.WsfBufIoUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WsfBufIoUartInit &rArr; PalUartInit &rArr; MXC_UART_Init &rArr; MXC_SYS_ClockSourceEnable &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a1]"></a>WsfBufIoUartRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wsf_bufio.o(i.WsfBufIoUartRegister))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
</UL>

<P><STRONG><a name="[85]"></a>WsfBufIoWrite</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, wsf_bufio.o(i.WsfBufIoWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WsfBufIoWrite &rArr; wsfBufIoUartTxStart &rArr; PalUartWriteData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartGetState
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxStart
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxBufCount
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.mainWsfInit)
<LI> app_terminal.o(i.AppTerminalInit)
</UL>
<P><STRONG><a name="[3e5]"></a>WsfCsEnter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wsf_cs.o(i.WsfCsEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WsfCsEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRssi
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueCount
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueRemove
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsInc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsDec
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueuePush
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataTxIncAvailBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnTxCompletedHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataRxIncAvailBuf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivPendAddrRes
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskSetReady
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxHandler
</UL>

<P><STRONG><a name="[3e6]"></a>WsfCsExit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wsf_cs.o(i.WsfCsExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetRandAddr
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetRssi
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueCount
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueRemove
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsInc
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsDec
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueuePush
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataTxIncAvailBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnTxCompletedHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataRxIncAvailBuf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivPendAddrRes
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskSetReady
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxHandler
</UL>

<P><STRONG><a name="[7dd]"></a>WsfHeapAlloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wsf_heap.o(i.WsfHeapAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[5a4]"></a>WsfHeapCountAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wsf_heap.o(i.WsfHeapCountAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a3]"></a>WsfHeapGetFreeStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wsf_heap.o(i.WsfHeapGetFreeStartAddress))
<BR><BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7ca]"></a>WsfIsQueueDepthOne</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wsf_queue.o(i.WsfIsQueueDepthOne))
<BR><BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePeek
</UL>

<P><STRONG><a name="[327]"></a>WsfMsgAlloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wsf_msg.o(i.WsfMsgAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevReset
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivStart
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetDataLen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcAttCback
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlDisconnect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetScanParam
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConnCancel
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetDataLen
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRequestPeerSca
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadRemoteFeat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenSharedSecret
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenKey
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmac
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivClearResList
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqReply
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqNegReply
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnClose
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecPairReq
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecEncryptReq
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecCompareRsp
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStop
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStart
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetPrivacyMode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetAddrResEnable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvPostProcessHandler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanRspRxCompHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktPostProcessHandler
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduAlloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivPendAddrRes
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnChClassUpdate
</UL>

<P><STRONG><a name="[5a8]"></a>WsfMsgDataAlloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wsf_msg.o(i.WsfMsgDataAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WsfMsgDataAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMsgAlloc
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
</UL>

<P><STRONG><a name="[371]"></a>WsfMsgDeq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wsf_msg.o(i.WsfMsgDeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secHciCback
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvRxScanReq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxDirectAdvBPduHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxAdvBPduHandler
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueueClear
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxDeq
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnDeqAcl
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnClear
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
</UL>

<P><STRONG><a name="[3b1]"></a>WsfMsgEnq</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wsf_msg.o(i.WsfMsgEnq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLeEncryptCmd
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclRecvPending
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenSharedSecret
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenKey
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvPostProcessHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanRspRxCompHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktPostProcessHandler
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxEnq
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnEnq
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
</UL>

<P><STRONG><a name="[2ad]"></a>WsfMsgFree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wsf_msg.o(i.WsfMsgFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSendAclData
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclComplete
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnFree
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreHandler
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttMsgFree
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcFreePkt
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cHciAclCback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanCleanupOp
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePopCleanup
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduFree
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvRxScanReq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxDirectAdvBPduHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxAdvBPduHandler
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueueClear
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnClear
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
</UL>

<P><STRONG><a name="[7c9]"></a>WsfMsgPeek</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wsf_msg.o(i.WsfMsgPeek))
<BR><BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePop
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePeek
</UL>

<P><STRONG><a name="[328]"></a>WsfMsgSend</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wsf_msg.o(i.WsfMsgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskSetReady
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskMsgQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevReset
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivStart
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetDataLen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDmCback
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcAttCback
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlDisconnect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlConnUpdate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAesHciCback
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetScanParam
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlScanEnable
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConnCancel
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlCreateConn
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlStartEncryption
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqReply
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlLtkReqNegReply
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetDataLen
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReset
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRequestPeerSca
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadRemoteFeat
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccHciCback
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacComplete
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivClearResList
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqReply
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqNegReply
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnClose
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecEncryptReq
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmMsgSend
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStop
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanStart
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetPrivacyMode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetAddrResEnable
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivAddDevToResList
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivPendAddrRes
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnChClassUpdate
</UL>

<P><STRONG><a name="[243]"></a>WsfNvmEraseData</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, wsf_nvm.o(i.WsfNvmEraseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = WsfNvmEraseData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc32
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmDeleteAll
</UL>

<P><STRONG><a name="[5ae]"></a>WsfNvmEraseDataAll</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wsf_nvm.o(i.WsfNvmEraseDataAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WsfNvmEraseDataAll &rArr; PalFlashEraseSector &rArr; MXC_FLC_PageErase &rArr; MXC_FLC_ME17_PageErase &rArr; MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashEraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmInit
</UL>

<P><STRONG><a name="[323]"></a>WsfNvmInit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, wsf_nvm.o(i.WsfNvmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WsfNvmInit &rArr; WsfNvmEraseDataAll &rArr; PalFlashEraseSector &rArr; MXC_FLC_PageErase &rArr; MXC_FLC_ME17_PageErase &rArr; MXC_FLC_RevB_PageErase &rArr; MXC_FLC_RevA_PageErase &rArr; MXC_FLC_Busy &rArr; MXC_FLC_RevB_Busy &rArr; MXC_FLC_RevA_Busy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc32
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalNvmGetTotalSize
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalNvmGetSectorSize
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashInit
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfNvmEraseDataAll
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[245]"></a>WsfNvmReadData</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, wsf_nvm.o(i.WsfNvmReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WsfNvmReadData &rArr; PalFlashRead &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc32
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmReadAll
</UL>

<P><STRONG><a name="[248]"></a>WsfNvmWriteData</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, wsf_nvm.o(i.WsfNvmWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcCrc32
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashWrite
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalFlashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStorePeerRpao
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreHdlList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreCacheByHash
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreBond
</UL>

<P><STRONG><a name="[5b5]"></a>WsfOsActive</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wsf_os.o(i.WsfOsActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WsfOsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsEnterMainLoop
</UL>

<P><STRONG><a name="[5b2]"></a>WsfOsEnterMainLoop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wsf_os.o(i.WsfOsEnterMainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WsfOsEnterMainLoop &rArr; WsfTimerSleep &rArr; PalRtcCompareSet &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleepUpdate
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b7]"></a>WsfOsInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wsf_os.o(i.WsfOsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WsfOsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[2a3]"></a>WsfOsSetNextHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wsf_os.o(i.WsfOsSetNextHandler))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitSchInit
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInitLlInit
</UL>

<P><STRONG><a name="[5b8]"></a>WsfQueueCount</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueueCount &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
</UL>

<P><STRONG><a name="[5a9]"></a>WsfQueueDeq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueDeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsClearPrepWrites
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnTxBufDesc
</UL>

<P><STRONG><a name="[3af]"></a>WsfQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueueEmpty &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnResolveConflict
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnTxCompletedHandler
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnTxPendingHandler
</UL>

<P><STRONG><a name="[5aa]"></a>WsfQueueEnq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueEnq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnTxBufDesc
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxInitMem
</UL>

<P><STRONG><a name="[2c2]"></a>WsfQueueInsert</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueuePush
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsAddGroup
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
</UL>

<P><STRONG><a name="[5b9]"></a>WsfQueuePush</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueuePush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueuePush &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
</UL>

<P><STRONG><a name="[5ba]"></a>WsfQueueRemove</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wsf_queue.o(i.WsfQueueRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerRemove
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerServiceExpired
</UL>

<P><STRONG><a name="[3e9]"></a>WsfSetEvent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wsf_os.o(i.WsfSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclRecvPending
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtSendIntEvt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalRx
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvPostProcessHandler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanRspRxCompHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktPostProcessHandler
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePopCleanup
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxEnq
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodCurtailHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodCompHandler
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodAbortHandler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchLoadHandler
</UL>

<P><STRONG><a name="[2c1]"></a>WsfTaskLock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wsf_os.o(i.WsfTaskLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WsfTaskLock &rArr; WsfCsEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetLocalIrk
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRegister
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnMasterInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsSetAttr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsAddGroup
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmAdvSetAddrType
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnCheckIdle
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetAddrType
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetAddrType
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSetConnSpec
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanSetInterval
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerUpdate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerNextExpiration
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerServiceExpired
</UL>

<P><STRONG><a name="[5ab]"></a>WsfTaskMsgQueue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wsf_os.o(i.WsfTaskMsgQueue))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
</UL>

<P><STRONG><a name="[5ac]"></a>WsfTaskSetReady</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wsf_os.o(i.WsfTaskSetReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfTaskSetReady &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerUpdate
</UL>

<P><STRONG><a name="[2c4]"></a>WsfTaskUnlock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wsf_os.o(i.WsfTaskUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetLocalIrk
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRegister
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanInit
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnMasterInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInit
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsSetAttr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsAddGroup
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmAdvSetAddrType
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnCheckIdle
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetAddrType
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetAddrType
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSetConnSpec
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanSetInterval
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerUpdate
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerNextExpiration
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerServiceExpired
</UL>

<P><STRONG><a name="[5bb]"></a>WsfTimerInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wsf_timer.o(i.WsfTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WsfTimerInit &rArr; PalRtcCounterGet &rArr; MXC_WUT_GetCount
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCounterGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[5bc]"></a>WsfTimerServiceExpired</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wsf_timer.o(i.WsfTimerServiceExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WsfTimerServiceExpired &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsDispatcher
</UL>

<P><STRONG><a name="[5b6]"></a>WsfTimerSleep</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, wsf_timer.o(i.WsfTimerSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WsfTimerSleep &rArr; PalRtcCompareSet &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcEnableCompareIrq
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcDisableCompareIrq
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCounterGet
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCompareSet
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOn
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalLedOff
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysSleep
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysIsBusy
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerTicksToRtc
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerNextExpiration
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfOsReadyToSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsEnterMainLoop
</UL>

<P><STRONG><a name="[5b3]"></a>WsfTimerSleepUpdate</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wsf_timer.o(i.WsfTimerSleepUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WsfTimerSleepUpdate &rArr; WsfTimerUpdate &rArr; WsfTaskSetReady &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCounterGet
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsEnterMainLoop
</UL>

<P><STRONG><a name="[3de]"></a>WsfTimerStartMs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wsf_timer.o(i.WsfTimerStartMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimerHandler
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSetup
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanHciHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActMaxAttempts
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResumeAttemptsState
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbStartServiceTimer
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRestartAuthPayloadTimer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnUpdateOp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnUpdateOp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSetAuthPayloadTimeout
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstSetEstablishConn
</UL>

<P><STRONG><a name="[5c2]"></a>WsfTimerStartSec</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wsf_timer.o(i.WsfTimerStartSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendSimpleReq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendContinuingReq
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDiscBusy
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivTimerStart
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRestartResPrivAddrTimer
</UL>

<P><STRONG><a name="[577]"></a>WsfTimerStop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wsf_timer.o(i.WsfTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcRsp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndConnCback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsConnCback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivReset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStop
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActRpaStop
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanHciHandler
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[5c0]"></a>WsfTimerUpdate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wsf_timer.o(i.WsfTimerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WsfTimerUpdate &rArr; WsfTaskSetReady &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskSetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleepUpdate
</UL>

<P><STRONG><a name="[230]"></a>WsfTrace</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, wsf_trace.o(i.WsfTrace))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVsn
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTraceOverFlowMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiAction
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcValueNtf
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandler
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclComplete
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreSendAclData
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnFree
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnAlloc
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisFree
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisAlloc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByConnId
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscServiceCmpl
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharCmpl
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDescPair
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcCharDecl
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByConnId
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfSetHashUpdateStatus
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfActClientState
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfSetClientChangeAwareState
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMtuReq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDataCback
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByHandle
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmExecute
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdExecute
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbDealloc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByBdAddr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbAlloc
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCmplStates
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMasterRxSignalingPkt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cHciFlowCback
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cHciAclCback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cDefaultDataCidCback
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cDefaultDataCback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cRxSignalingPkt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cDataCback
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbSetFailureCount
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbPairingFailed
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetPairingDisabledTime
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetFailureCount
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbAddDevice
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbMaxAttemptReached
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appServerHandleDbHashUpdate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanMode
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanStop
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiDisplayPasskey
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiDisplayConfirmValue
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalInit
</UL>

<P><STRONG><a name="[7e1]"></a>WsfTraceEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wsf_trace.o(i.WsfTraceEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[7e0]"></a>WsfTraceRegisterHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wsf_trace.o(i.WsfTraceRegisterHandler))
<BR><BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
</UL>

<P><STRONG><a name="[5c6]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[830]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[662]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[831]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[832]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[833]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[834]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5ca]"></a>agc_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, agc_control.o(i.agc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = agc_init &rArr; set_ddc_active
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ddc_transparent
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ddc_active
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[62c]"></a>agc_restore_dc_offs</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, agc_control.o(i.agc_restore_dc_offs))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[5cb]"></a>agc_setup</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, agc_control.o(i.agc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = agc_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_agc_highspeed_gains
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_agc_default_gains
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_wake
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_init
</UL>

<P><STRONG><a name="[5d0]"></a>agc_wake</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, agc_control.o(i.agc_wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = agc_wake &rArr; agc_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[5d1]"></a>amp_bin_search</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, board_config.o(i.amp_bin_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_amp
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_err
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_amp
</UL>

<P><STRONG><a name="[238]"></a>appConnOpen</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_master.o(i.appConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = appConnOpen &rArr; DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbFindByAddr
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnOpen
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbRecordInUse
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnOpen
</UL>

<P><STRONG><a name="[25c]"></a>appDiscRestartDiscovery</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_disc.o(i.appDiscRestartDiscovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = appDiscRestartDiscovery &rArr; appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetHdlList
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetDiscStatus
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
</UL>

<P><STRONG><a name="[83]"></a>appMasterProcMsg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_master.o(i.appMasterProcMsg))
<BR>[Address Reference Count : 1]<UL><LI> app_master.o(i.AppMasterInit)
</UL>
<P><STRONG><a name="[29e]"></a>appServerHandleDbHashUpdate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_server.o(i.appServerHandleDbHashUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = appServerHandleDbHashUpdate &rArr; GattSendServiceChangedInd &rArr; AttsHandleValueInd &rArr; attsHandleValueIndNtf &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfSetClientChangeAwareState
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattSendServiceChangedInd
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetDbHash
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetClientChangeAwareState
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetDbHash
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppServerProcAttMsg
</UL>

<P><STRONG><a name="[29f]"></a>appServerHandleSvcChangeCnf</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_server.o(i.appServerHandleSvcChangeCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appServerHandleSvcChangeCnf &rArr; AppDbSetClientChangeAwareState
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetClientChangeAwareState
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppServerProcAttMsg
</UL>

<P><STRONG><a name="[5dc]"></a>appUiBtnPoll</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_ui.o(i.appUiBtnPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appUiBtnPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appProcMsg
</UL>

<P><STRONG><a name="[5dd]"></a>appUiTimerExpired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ui.o(i.appUiTimerExpired))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appProcMsg
</UL>

<P><STRONG><a name="[5e1]"></a>attCcbByConnId</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, att_main.o(i.attCcbByConnId))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cCtrlCback
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attDmConnCback
</UL>

<P><STRONG><a name="[607]"></a>attDecodeMsgParam</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, att_main.o(i.attDecodeMsgParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attDecodeMsgParam
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
</UL>

<P><STRONG><a name="[11a]"></a>attEmptyConnCback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_main.o(i.attEmptyConnCback))
<BR>[Address Reference Count : 1]<UL><LI> att_main.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>attEmptyDataCback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_main.o(i.attEmptyDataCback))
<BR>[Address Reference Count : 2]<UL><LI> att_main.o(.constdata)
<LI> atts_ind.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>attEmptyHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_main.o(i.attEmptyHandler))
<BR>[Address Reference Count : 2]<UL><LI> att_main.o(.constdata)
<LI> atts_main.o(i.AttsInit)
</UL>
<P><STRONG><a name="[11b]"></a>attEmptyL2cCocCback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, att_main.o(i.attEmptyL2cCocCback))
<BR>[Address Reference Count : 1]<UL><LI> att_main.o(.constdata)
</UL>
<P><STRONG><a name="[2b0]"></a>attExecCallback</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, att_main.o(i.attExecCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttRegister
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSetMtu
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcExecCallback
</UL>

<P><STRONG><a name="[5e2]"></a>attL2cDataReq</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, att_main.o(i.attL2cDataReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendSimpleReq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendContinuingReq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
</UL>

<P><STRONG><a name="[2b6]"></a>attMsgAlloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, att_main.o(i.attMsgAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attMsgAlloc &rArr; WsfMsgDataAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteCmd
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcInd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteReq
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadByTypeReq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindInfoReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindByTypeValueReq
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcMtuReq
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcIndConfirm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendContinuingReq
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
</UL>

<P><STRONG><a name="[60f]"></a>attMsgParam</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, att_main.o(i.attMsgParam))
<BR><BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
</UL>

<P><STRONG><a name="[5e3]"></a>attSetMtu</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, att_main.o(i.attSetMtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attSetMtu &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcMtuRsp
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
</UL>

<P><STRONG><a name="[5e4]"></a>attUuidCmp16to128</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, att_main.o(i.attUuidCmp16to128))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcUuidCmp
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuidCmp
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuid16Cmp
</UL>

<P><STRONG><a name="[5e5]"></a>attcCcbByConnId</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, attc_main.o(i.attcCcbByConnId))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInUse
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCtrlCback
</UL>

<P><STRONG><a name="[2ba]"></a>attcCcbByHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, attc_main.o(i.attcCcbByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attcCcbByHandle &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcIndConfirm
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDataCback
</UL>

<P><STRONG><a name="[5f1]"></a>attcExecCallback</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, attc_main.o(i.attcExecCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = attcExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcWriteCmdCallback
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMsg
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendWriteCmd
</UL>

<P><STRONG><a name="[5f2]"></a>attcFreePkt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, attc_main.o(i.attcFreePkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attcFreePkt &rArr; WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcRsp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMtuReq
</UL>

<P><STRONG><a name="[11e]"></a>attcMsgCback</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, attc_main.o(i.attcMsgCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attcMsgCback &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByConnId
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSetupReq
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcPendWriteCmd
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcFreePkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[5f3]"></a>attcPendWriteCmd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, attc_main.o(i.attcPendWriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attcPendWriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
</UL>

<P><STRONG><a name="[125]"></a>attcProcErrRsp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, attc_proc.o(i.attcProcErrRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attcProcErrRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>attcProcFindByTypeRsp</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, attc_read.o(i.attcProcFindByTypeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = attcProcFindByTypeRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>attcProcFindOrReadRsp</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, attc_proc.o(i.attcProcFindOrReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attcProcFindOrReadRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5ea]"></a>attcProcInd</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, attc_proc.o(i.attcProcInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = attcProcInd &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDataCback
</UL>

<P><STRONG><a name="[126]"></a>attcProcMtuRsp</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, attc_proc.o(i.attcProcMtuRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attcProcMtuRsp &rArr; attSetMtu &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxRxAclLen
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSetMtu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5eb]"></a>attcProcMultiVarNtf</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, attc_proc.o(i.attcProcMultiVarNtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attcProcMultiVarNtf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDataCback
</UL>

<P><STRONG><a name="[12c]"></a>attcProcPrepWriteRsp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, attc_write.o(i.attcProcPrepWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attcProcPrepWriteRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>attcProcReadLongRsp</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, attc_read.o(i.attcProcReadLongRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attcProcReadLongRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>attcProcReadMultVarRsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, attc_proc.o(i.attcProcReadMultVarRsp))
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>attcProcReadRsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, attc_proc.o(i.attcProcReadRsp))
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5e9]"></a>attcProcRsp</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, attc_proc.o(i.attcProcRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = attcProcRsp &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSetupReq
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendReq
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcFreePkt
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDataCback
</UL>

<P><STRONG><a name="[12b]"></a>attcProcWriteRsp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, attc_proc.o(i.attcProcWriteRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attcProcWriteRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_proc.o(.constdata)
</UL>
<P><STRONG><a name="[5e7]"></a>attcReqClear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, attc_main.o(i.attcReqClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = attcReqClear &rArr; attcExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcFreePkt
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendPrepWriteReq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendContinuingReq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
</UL>

<P><STRONG><a name="[2b7]"></a>attcSendMsg</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, attc_proc.o(i.attcSendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByConnId
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteCmd
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteReq
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadReq
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadByTypeReq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindInfoReq
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindByTypeValueReq
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcMtuReq
</UL>

<P><STRONG><a name="[5f5]"></a>attcSendReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, attc_main.o(i.attcSendReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attcSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcRsp
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSetupReq
</UL>

<P><STRONG><a name="[5f4]"></a>attcSetupReq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, attc_main.o(i.attcSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attcSetupReq &rArr; attcSendReq
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcRsp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcMsgCback
</UL>

<P><STRONG><a name="[5e8]"></a>attcWriteCmdCallback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, attc_main.o(i.attcWriteCmdCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = attcWriteCmdCallback &rArr; attcExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCtrlCback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcConnCback
</UL>

<P><STRONG><a name="[5f7]"></a>attsCcbByConnId</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, atts_main.o(i.attsCcbByConnId))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnInUse
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndCtrlCback
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
</UL>

<P><STRONG><a name="[5f8]"></a>attsCcbByHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, atts_main.o(i.attsCcbByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attsCcbByHandle &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDataCback
</UL>

<P><STRONG><a name="[5f9]"></a>attsCheckPendDbHashReadRsp</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, atts_main.o(i.attsCheckPendDbHashReadRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfSetHashUpdateStatus
</UL>

<P><STRONG><a name="[5fb]"></a>attsClearPrepWrites</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, atts_main.o(i.attsClearPrepWrites))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attsClearPrepWrites &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsConnCback
</UL>

<P><STRONG><a name="[5fc]"></a>attsCsfActClientState</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, atts_csf.o(i.attsCsfActClientState))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attsCsfActClientState &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDataCback
</UL>

<P><STRONG><a name="[60c]"></a>attsCsfGetHashUpdateStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atts_csf.o(i.attsCsfGetHashUpdateStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
</UL>

<P><STRONG><a name="[603]"></a>attsCsfIsClientChangeAware</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, atts_csf.o(i.attsCsfIsClientChangeAware))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
</UL>

<P><STRONG><a name="[2c3]"></a>attsCsfSetHashUpdateStatus</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, atts_csf.o(i.attsCsfSetHashUpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsAddGroup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
</UL>

<P><STRONG><a name="[5fd]"></a>attsDiscBusy</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, atts_main.o(i.attsDiscBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = attsDiscBusy &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
</UL>

<P><STRONG><a name="[5fa]"></a>attsErrRsp</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, atts_main.o(i.attsErrRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcMtuReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDataCback
</UL>

<P><STRONG><a name="[2d1]"></a>attsFindByHandle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, atts_proc.o(i.attsFindByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attsFindByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsSetAttr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCheckPendDbHashReadRsp
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecPrepWrite
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
</UL>

<P><STRONG><a name="[60a]"></a>attsFindInRange</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, atts_proc.o(i.attsFindInRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attsFindInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindInfoReq
</UL>

<P><STRONG><a name="[600]"></a>attsFindServiceGroupEnd</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, atts_read.o(i.attsFindServiceGroupEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = attsFindServiceGroupEnd &rArr; attsUuidCmp &rArr; attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuidCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
</UL>

<P><STRONG><a name="[602]"></a>attsFindUuidInRange</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, atts_read.o(i.attsFindUuidInRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = attsFindUuidInRange &rArr; attsUuidCmp &rArr; attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuidCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcFindTypeReq
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
</UL>

<P><STRONG><a name="[2ce]"></a>attsHandleValueIndNtf</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, atts_ind.o(i.attsHandleValueIndNtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = attsHandleValueIndNtf &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttMsgFree
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByConnId
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfIsClientChangeAware
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsHandleValueInd
</UL>

<P><STRONG><a name="[604]"></a>attsIndNtfCallback</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, atts_ind.o(i.attsIndNtfCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = attsIndNtfCallback &rArr; attsExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndCtrlCback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndConnCback
</UL>

<P><STRONG><a name="[2c6]"></a>attsIsHashableAttr</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, atts_main.o(i.attsIsHashableAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attsIsHashableAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCalculateDbHash
</UL>

<P><STRONG><a name="[133]"></a>attsMsgCback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, atts_main.o(i.attsMsgCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = attsMsgCback &rArr; attsProcessDatabaseHashUpdate &rArr; attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcessDatabaseHashUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.constdata)
</UL>
<P><STRONG><a name="[609]"></a>attsPermissions</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, atts_proc.o(i.attsPermissions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attsPermissions
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSecLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcWrite
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadTypeReq
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadReq
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultiVarReq
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadMultReq
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadBlobReq
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcPrepWriteReq
</UL>

<P><STRONG><a name="[a]"></a>attsProcExecWriteReq</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, atts_write.o(i.attsProcExecWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = attsProcExecWriteReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecPrepWrite
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsClearPrepWrites
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>attsProcFindInfoReq</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, atts_proc.o(i.attsProcFindInfoReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = attsProcFindInfoReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindInRange
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDiscBusy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>attsProcFindTypeReq</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, atts_read.o(i.attsProcFindTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = attsProcFindTypeReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindServiceGroupEnd
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindUuidInRange
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDiscBusy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>attsProcMtuReq</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, atts_proc.o(i.attsProcMtuReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = attsProcMtuReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxRxAclLen
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attSetMtu
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfGetFeatures
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>attsProcPrepWriteReq</STRONG> (Thumb, 388 bytes, Stack size 72 bytes, atts_write.o(i.attsProcPrepWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = attsProcPrepWriteReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueCount
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>attsProcReadBlobReq</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, atts_read.o(i.attsProcReadBlobReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = attsProcReadBlobReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>attsProcReadGroupTypeReq</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, atts_read.o(i.attsProcReadGroupTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = attsProcReadGroupTypeReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindServiceGroupEnd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsUuid16Cmp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindUuidInRange
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsDiscBusy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>attsProcReadMultReq</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, atts_read.o(i.attsProcReadMultReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = attsProcReadMultReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>attsProcReadMultiVarReq</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, atts_proc.o(i.attsProcReadMultiVarReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = attsProcReadMultiVarReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttMsgFree
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>attsProcReadReq</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, atts_proc.o(i.attsProcReadReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = attsProcReadReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>attsProcReadTypeReq</STRONG> (Thumb, 692 bytes, Stack size 80 bytes, atts_read.o(i.attsProcReadTypeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = attsProcReadTypeReq &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfGetHashUpdateStatus
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindUuidInRange
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>attsProcValueCnf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, atts_ind.o(i.attsProcValueCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = attsProcValueCnf &rArr; AttsCsfSetClientChangeAwareState &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfSetClientChangeAwareState
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCsfGetClientChangeAwareState
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>attsProcWrite</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, atts_write.o(i.attsProcWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = attsProcWrite &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPermissions
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.data)
</UL>
<P><STRONG><a name="[608]"></a>attsProcessDatabaseHashUpdate</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, atts_main.o(i.attsProcessDatabaseHashUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = attsProcessDatabaseHashUpdate &rArr; attsCsfSetHashUpdateStatus &rArr; attsCheckPendDbHashReadRsp &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsSetAttr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverse
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfSetHashUpdateStatus
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindUuidInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsMsgCback
</UL>

<P><STRONG><a name="[60b]"></a>attsUuid16Cmp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, atts_proc.o(i.attsUuid16Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attsUuid16Cmp &rArr; attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attUuidCmp16to128
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcReadGroupTypeReq
</UL>

<P><STRONG><a name="[601]"></a>attsUuidCmp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, atts_proc.o(i.attsUuidCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attsUuidCmp &rArr; attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attUuidCmp16to128
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindServiceGroupEnd
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindUuidInRange
</UL>

<P><STRONG><a name="[2d9]"></a>bbBleRegisterOp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bb_ble_main.o(i.bbBleRegisterOp))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTestInit
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnSlaveInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnMasterInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleAdvSlaveInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleScanMasterInit
</UL>

<P><STRONG><a name="[627]"></a>ble_coded_s2</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, pan2g_config.o(i.ble_coded_s2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_cmu_setup
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pan2g_afe_lpf
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_restore_dc_offs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_agc_default_gains
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s8
</UL>

<P><STRONG><a name="[62e]"></a>ble_coded_s8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pan2g_config.o(i.ble_coded_s8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
</UL>

<P><STRONG><a name="[62f]"></a>ble_high_speed</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, pan2g_config.o(i.ble_high_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ble_high_speed &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pan2g_afe_lpf
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_agc_highspeed_gains
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_restore_dc_offs
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_cmu_set_phy
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_cmu_set_dl
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
</UL>

<P><STRONG><a name="[632]"></a>ble_rx_init</STRONG> (Thumb, 488 bytes, Stack size 20 bytes, ble_rx_setup.o(i.ble_rx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_rx_init &rArr; set_ddc_active
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ddc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[672]"></a>ble_rx_post_setup</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ble_rx_setup.o(i.ble_rx_post_setup))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[7d6]"></a>ble_set_acc_addr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ble_ctrl.o(i.ble_set_acc_addr))
<BR><BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_acc_addr
</UL>

<P><STRONG><a name="[633]"></a>ble_set_channel</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ble_ctrl.o(i.ble_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_set_channel &rArr; dbb_seq_select_rf_channel &rArr; dbb_seq_update_channel_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_select_rf_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_channel
</UL>

<P><STRONG><a name="[7d7]"></a>ble_set_crc_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_ctrl.o(i.ble_set_crc_init))
<BR><BR>[Called By]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_crc_init
</UL>

<P><STRONG><a name="[635]"></a>ble_standard_speed</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, pan2g_config.o(i.ble_standard_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_standard_speed &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_cmu_setup
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pan2g_afe_lpf
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_restore_dc_offs
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_agc_default_gains
</UL>
<BR>[Called By]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
</UL>

<P><STRONG><a name="[676]"></a>ble_tx_init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, ble_tx_setup.o(i.ble_tx_init))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[636]"></a>calib_amp</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, board_config.o(i.calib_amp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_bin_search
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[115]"></a>cb_cfo_interrupt_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, llc_int_handlers.o(i.cb_cfo_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cb_cfo_interrupt_handler &rArr; dbb_prot_sfd_timeout &rArr; dbb_intc_manual_sfd_to &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timer_start
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timeout
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_check_cfo
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_cfo_enabled
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_agc_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[116]"></a>cb_gp_event_interrupt_handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, llc_int_handlers.o(i.cb_gp_event_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_gp_event_interrupt_handler &rArr; dbb_prot_sfd_timeout &rArr; dbb_intc_manual_sfd_to &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_is_tx
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_is_rx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_tx_start
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_rx_start
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timeout
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_data_timeout
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_agc_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[112]"></a>cb_rx_interrupt_handler</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, llc_int_handlers.o(i.cb_rx_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cb_rx_interrupt_handler &rArr; dbb_prot_rx_info
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_get
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_gp_trigger
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_get
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_info
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_crc
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_copy_data
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_get_phy
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_agc_rx
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_tx_cancel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[113]"></a>cb_rx_sfd_interrupt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, llc_int_handlers.o(i.cb_rx_sfd_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_rx_sfd_interrupt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timer_stop
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_agc_sfd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[114]"></a>cb_rx_timeout_interrupt_handler</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llc_int_handlers.o(i.cb_rx_timeout_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_rx_timeout_interrupt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_gp_trigger
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_agc_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[111]"></a>cb_tx_interrupt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llc_int_handlers.o(i.cb_tx_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_tx_interrupt_handler &rArr; dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_rx_cancel
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_api_setup.o(i.llc_api_setup)
</UL>
<P><STRONG><a name="[64b]"></a>create_ch_map</STRONG> (Thumb, 280 bytes, Stack size 464 bytes, board_config.o(i.create_ch_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_enable
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_disable
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_amp
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_amp
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_channel_map
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
</UL>

<P><STRONG><a name="[664]"></a>dbb_calibrate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sequencer_ext.o(i.dbb_calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[630]"></a>dbb_cmu_set_dl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dbb_cmu.o(i.dbb_cmu_set_dl))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
</UL>

<P><STRONG><a name="[631]"></a>dbb_cmu_set_phy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dbb_cmu.o(i.dbb_cmu_set_phy))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
</UL>

<P><STRONG><a name="[62b]"></a>dbb_cmu_setup</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dbb_cmu.o(i.dbb_cmu_setup))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[7cd]"></a>dbb_crypto_disable_rx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_crypto.o(i.dbb_crypto_disable_rx))
<BR><BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_rx
</UL>

<P><STRONG><a name="[7ce]"></a>dbb_crypto_disable_tx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_crypto.o(i.dbb_crypto_disable_tx))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_disable_tx
</UL>

<P><STRONG><a name="[7cf]"></a>dbb_crypto_enable_rx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_crypto.o(i.dbb_crypto_enable_rx))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_rx
</UL>

<P><STRONG><a name="[7d0]"></a>dbb_crypto_enable_tx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_crypto.o(i.dbb_crypto_enable_tx))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_enable_tx
</UL>

<P><STRONG><a name="[666]"></a>dbb_crypto_set_key_iv</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dbb_crypto.o(i.dbb_crypto_set_key_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dbb_crypto_set_key_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_key_iv
</UL>

<P><STRONG><a name="[7d1]"></a>dbb_crypto_set_txrx_params</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dbb_crypto.o(i.dbb_crypto_set_txrx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dbb_crypto_set_txrx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_tx_params
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_crypto_set_rx_params
</UL>

<P><STRONG><a name="[670]"></a>dbb_event_get_current_tstamp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_get_current_tstamp))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_now
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
</UL>

<P><STRONG><a name="[67b]"></a>dbb_event_set_gp_trigger_value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_set_gp_trigger_value))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timer_start
</UL>

<P><STRONG><a name="[7d5]"></a>dbb_event_set_rx_trigger_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_set_rx_trigger_value))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
</UL>

<P><STRONG><a name="[7db]"></a>dbb_event_set_tx_trigger_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_set_tx_trigger_value))
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
</UL>

<P><STRONG><a name="[63f]"></a>dbb_event_stop_gp_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_stop_gp_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_timeout_interrupt_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_cancel
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timer_stop
</UL>

<P><STRONG><a name="[7d3]"></a>dbb_event_stop_rx_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_stop_rx_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_cancel
</UL>

<P><STRONG><a name="[7da]"></a>dbb_event_stop_tx_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_stop_tx_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
</UL>

<P><STRONG><a name="[66f]"></a>dbb_event_timer_setup</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dbb_event.o(i.dbb_event_timer_setup))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration_restore
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
</UL>

<P><STRONG><a name="[668]"></a>dbb_intc_attach_cb</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dbb_intc.o(i.dbb_intc_attach_cb))
<BR><BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_setup
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_detach_all
</UL>

<P><STRONG><a name="[667]"></a>dbb_intc_detach_all</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, dbb_intc.o(i.dbb_intc_detach_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dbb_intc_detach_all
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_attach_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_setup
</UL>

<P><STRONG><a name="[669]"></a>dbb_intc_enable</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dbb_intc.o(i.dbb_intc_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_intc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_setup
</UL>

<P><STRONG><a name="[66a]"></a>dbb_intc_manual_sfd_to</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dbb_intc.o(i.dbb_intc_manual_sfd_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_intc_manual_sfd_to &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_deassert
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_dbg_pin_assert
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_clear_pending_rx_ints
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timeout
</UL>

<P><STRONG><a name="[66b]"></a>dbb_intc_setup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dbb_intc.o(i.dbb_intc_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_intc_setup &rArr; dbb_intc_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_enable
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_detach_all
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[685]"></a>dbb_pmu_rffe_ifc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dbb_pmu.o(i.dbb_pmu_rffe_ifc))
<BR><BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_afe
</UL>

<P><STRONG><a name="[66e]"></a>dbb_pmu_setup</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dbb_pmu.o(i.dbb_pmu_setup))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[644]"></a>dbb_prot_agc_rx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_agc_rx))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[649]"></a>dbb_prot_agc_sfd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_agc_sfd))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_sfd_interrupt_handler
</UL>

<P><STRONG><a name="[63b]"></a>dbb_prot_agc_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_agc_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_timeout_interrupt_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
</UL>

<P><STRONG><a name="[637]"></a>dbb_prot_cfo_enabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_cfo_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
</UL>

<P><STRONG><a name="[638]"></a>dbb_prot_check_cfo</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_check_cfo))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
</UL>

<P><STRONG><a name="[642]"></a>dbb_prot_get_phy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_get_phy))
<BR><BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_get_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[66d]"></a>dbb_prot_init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ble_prot_init.o(i.dbb_prot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_channel
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rffe_startup
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_setup
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_pmu_setup
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_cmu_setup
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_init
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rx_post_setup
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rx_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_wake
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_init
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_restore_calibration
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_setup
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_timer_setup
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_setup
</UL>

<P><STRONG><a name="[647]"></a>dbb_prot_rx_copy_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_rx_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_prot_rx_copy_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[645]"></a>dbb_prot_rx_crc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_prot_trx.o(i.dbb_prot_rx_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_prot_rx_crc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[63e]"></a>dbb_prot_rx_data_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_rx_data_timeout))
<BR><BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_rx_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
</UL>

<P><STRONG><a name="[643]"></a>dbb_prot_rx_info</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ble_prot_trx.o(i.dbb_prot_rx_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_prot_rx_info
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_get_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[679]"></a>dbb_prot_set_phy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_set_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_set_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_phy
</UL>

<P><STRONG><a name="[63a]"></a>dbb_prot_sfd_timeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_prot_trx.o(i.dbb_prot_sfd_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dbb_prot_sfd_timeout &rArr; dbb_intc_manual_sfd_to &rArr; dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_rx_disable
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_manual_sfd_to
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
</UL>

<P><STRONG><a name="[639]"></a>dbb_prot_sfd_timer_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_sfd_timer_start))
<BR><BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_set_gp_trigger_value
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
</UL>

<P><STRONG><a name="[648]"></a>dbb_prot_sfd_timer_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_sfd_timer_stop))
<BR><BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_gp_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_sfd_interrupt_handler
</UL>

<P><STRONG><a name="[67c]"></a>dbb_prot_shutdown</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_prot_init.o(i.dbb_prot_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dbb_prot_shutdown &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_shutdown
</UL>

<P><STRONG><a name="[67d]"></a>dbb_prot_tx_copy_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_tx_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_prot_tx_copy_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_data
</UL>

<P><STRONG><a name="[67e]"></a>dbb_prot_tx_insert_data</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_prot_trx.o(i.dbb_prot_tx_insert_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_prot_tx_insert_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_insert_data
</UL>

<P><STRONG><a name="[673]"></a>dbb_restore_calibration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sequencer_ext.o(i.dbb_restore_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dbb_restore_calibration &rArr; full_calibration_restore &rArr; restore_afe &rArr; dbb_spim_write_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[684]"></a>dbb_seq_get_rfpower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sequencer_ext.o(i.dbb_seq_get_rfpower))
<BR><BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_tx_enable_setup
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_set_rfpower
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_enable
</UL>

<P><STRONG><a name="[674]"></a>dbb_seq_init</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, sequencer_ext.o(i.dbb_seq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dbb_seq_init &rArr; dbb_set_rfpower &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update_channel_rx
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_tx_enable_setup
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_set_rfpower
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[634]"></a>dbb_seq_select_rf_channel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sequencer_ext.o(i.dbb_seq_select_rf_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dbb_seq_select_rf_channel &rArr; dbb_seq_update_channel_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update_channel_tx
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update_channel_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_channel
</UL>

<P><STRONG><a name="[628]"></a>dbb_seq_update</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sequencer_ext.o(i.dbb_seq_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_seq_update
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[682]"></a>dbb_set_rfpower</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sequencer_ext.o(i.dbb_set_rfpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbb_set_rfpower &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_get_rfpower
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_txpower
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_init
</UL>

<P><STRONG><a name="[5d2]"></a>dbb_spim_read</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, dbb_spim.o(i.dbb_spim_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dbb_spim_read
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_pmu_rffe_ifc
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_init
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pan2g_afe_lpf
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ch
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_afe
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_enable
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_disable
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_amp
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_amp
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_bin_search
</UL>

<P><STRONG><a name="[671]"></a>dbb_spim_setup</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dbb_spim.o(i.dbb_spim_setup))
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[5d3]"></a>dbb_spim_write</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, dbb_spim.o(i.dbb_spim_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_pmu_rffe_ifc
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_shutdown
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rffe_startup
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_set_rfpower
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pan2g_afe_lpf
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ch
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_enable
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_disable
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_amp
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_delta_f
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_amp
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_bin_search
</UL>

<P><STRONG><a name="[7e5]"></a>dbb_spim_write_fast</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dbb_spim.o(i.dbb_spim_write_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_spim_write_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_afe
</UL>

<P><STRONG><a name="[629]"></a>dbb_time_corr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_time_corr.o(i.dbb_time_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_get_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_tx_interrupt_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[64a]"></a>dbb_trx_rx_cancel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_trx_timers.o(i.dbb_trx_rx_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_tx_interrupt_handler
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_cancel
</UL>

<P><STRONG><a name="[678]"></a>dbb_trx_rx_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_trx_timers.o(i.dbb_trx_rx_disable))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_sfd_timeout
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_data_timeout
</UL>

<P><STRONG><a name="[7d4]"></a>dbb_trx_timer_config</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, dbb_trx_timers.o(i.dbb_trx_timer_config))
<BR><BR>[Called By]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_start
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_data
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_start
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_cancel
</UL>

<P><STRONG><a name="[640]"></a>dbb_trx_timer_get</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, dbb_trx_timers.o(i.dbb_trx_timer_get))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_tx_interrupt_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[641]"></a>dbb_trx_tx_cancel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbb_trx_timers.o(i.dbb_trx_tx_cancel))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
</UL>

<P><STRONG><a name="[140]"></a>dmConn2HciHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dm_conn.o(i.dmConn2HciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmConn2HciHandler &rArr; dmConnCcbByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByHandle
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActWriteAuthToCmpl
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActRssiRead
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActReqPeerSca
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActRemoteConnParamReq
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActReadRemoteVerInfoCmpl
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActReadRemoteFeaturesCmpl
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActDataLenChange
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2ActAuthToExpired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>dmConn2MsgHandler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dm_conn.o(i.dmConn2MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmConn2MsgHandler &rArr; HciWriteAuthPayloadTimeout &rArr; LlWriteAuthPayloadTimeout &rArr; LctrSetAuthPayloadTimeout &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciWriteAuthPayloadTimeout
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciReadRssiCmd
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetDataLen
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRequestPeerScaCmd
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoteConnParamReqReply
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoteConnParamReqNegReply
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[68e]"></a>dmConnCcbAlloc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnCcbAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmConnCcbAlloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
</UL>

<P><STRONG><a name="[68f]"></a>dmConnCcbByBdAddr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnCcbByBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
</UL>

<P><STRONG><a name="[33e]"></a>dmConnCcbByHandle</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnCcbByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmConnCcbByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmL2cConnUpdateInd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecHciHandler
</UL>

<P><STRONG><a name="[344]"></a>dmConnCcbById</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dm_conn.o(i.dmConnCcbById))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdMsgHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnMsgHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2MsgHandler
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmReadRemoteFeatures
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpEncryptReq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmSecMsgHandler
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>

<P><STRONG><a name="[690]"></a>dmConnCcbDealloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_conn.o(i.dmConnCcbDealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dmConnCcbDealloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnFailed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnClosed
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpenAccept
</UL>

<P><STRONG><a name="[698]"></a>dmConnExecCback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnExecCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmConnExecCback
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnFailed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnClosed
</UL>

<P><STRONG><a name="[13d]"></a>dmConnHciHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmConnHciHandler &rArr; dmConnSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByHandle
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmExecute
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByBdAddr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbAlloc
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCmplStates
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>dmConnMsgHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmConnMsgHandler &rArr; dmConnSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmExecute
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[697]"></a>dmConnNum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dm_conn.o(i.dmConnNum))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnFailed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnClosed
</UL>

<P><STRONG><a name="[32d]"></a>dmConnOpenAccept</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, dm_conn.o(i.dmConnOpenAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbDealloc
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByBdAddr
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnOpen
</UL>

<P><STRONG><a name="[13c]"></a>dmConnReset</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dm_conn.o(i.dmConnReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dmConnReset &rArr; dmConnHciHandler &rArr; dmConnSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>dmConnSmActCancelOpen</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dm_conn_master.o(i.dmConnSmActCancelOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dmConnSmActCancelOpen &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeCreateConnCancelCmd
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn_master_leg.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>dmConnSmActClose</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSmActClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmConnSmActClose &rArr; HciDisconnectCmd &rArr; LlDisconnect &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciDisconnectCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>dmConnSmActConnClosed</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSmActConnClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dmConnSmActConnClosed &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToConnCte
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnNum
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnExecCback
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbDealloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>dmConnSmActConnFailed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSmActConnFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dmConnSmActConnFailed &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnNum
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnExecCback
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbDealloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>dmConnSmActConnOpened</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSmActConnOpened))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dmConnSmActConnOpened &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHostAddrType
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetBdAddr
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToConnCte
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnNum
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnExecCback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>dmConnSmActHciUpdated</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSmActHciUpdated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmConnSmActHciUpdated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>dmConnSmActNone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dm_conn.o(i.dmConnSmActNone))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>dmConnSmActOpen</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dm_conn_master_leg.o(i.dmConnSmActOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dmConnSmActOpen &rArr; dmConnOpen &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn_master_leg.o(.constdata)
</UL>
<P><STRONG><a name="[692]"></a>dmConnSmExecute</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dm_conn_sm.o(i.dmConnSmExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmConnSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActNone
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnMsgHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
</UL>

<P><STRONG><a name="[145]"></a>dmConnUpdActL2cUpdateInd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dm_conn_master.o(i.dmConnUpdActL2cUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dmConnUpdActL2cUpdateInd &rArr; L2cDmConnUpdateRsp &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeConnUpdateCmd
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDmConnUpdateRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>dmConnUpdActNone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dm_conn.o(i.dmConnUpdActNone))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>dmConnUpdActUpdateMaster</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dm_conn_master.o(i.dmConnUpdActUpdateMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dmConnUpdActUpdateMaster &rArr; HciLeConnUpdateCmd &rArr; LlConnUpdate &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeConnUpdateCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[33f]"></a>dmConnUpdExecute</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dm_conn.o(i.dmConnUpdExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmConnUpdExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdActNone
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmL2cConnUpdateInd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdMsgHandler
</UL>

<P><STRONG><a name="[143]"></a>dmConnUpdMsgHandler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnUpdMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmConnUpdMsgHandler &rArr; dmConnUpdExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnUpdExecute
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_conn.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>dmDevActReset</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dm_dev.o(i.dmDevActReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmDevActReset &rArr; HciResetSequence &rArr; hciCoreResetStart &rArr; HciResetCmd &rArr; LlReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciResetSequence
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>dmDevHciHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dm_dev.o(i.dmDevHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmDevHciHandler &rArr; dmDevHciEvtVendorSpec
</UL>
<BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciEvtVendorSpec
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciEvtReset
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciEvtHwError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>dmDevMsgHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_dev.o(i.dmDevMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmDevMsgHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev.o(.constdata)
</UL>
<P><STRONG><a name="[696]"></a>dmDevPassEvtToConnCte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dm_dev.o(i.dmDevPassEvtToConnCte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmDevPassEvtToConnCte
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnClosed
</UL>

<P><STRONG><a name="[695]"></a>dmDevPassEvtToDevPriv</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, dm_dev.o(i.dmDevPassEvtToDevPriv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnOpen
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActCancelOpen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnOpened
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnFailed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActConnClosed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanHciHandler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivHciHandler
</UL>

<P><STRONG><a name="[14e]"></a>dmDevPrivActAesCmpl</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dm_dev_priv.o(i.dmDevPrivActAesCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmDevPrivActAesCmpl &rArr; dmDevPrivSetRpa &rArr; HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetRpa
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAdvertising
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>dmDevPrivActCtrl</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmDevPrivActCtrl &rArr; dmDevPrivSetPendingRpa &rArr; dmDevPrivSetRpa &rArr; HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetPendingRpa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>dmDevPrivActRpaStart</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActRpaStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmDevPrivActRpaStart &rArr; dmDevPrivTimerStart &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivTimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>dmDevPrivActRpaStop</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActRpaStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmDevPrivActRpaStop &rArr; dmDevPrivSetPendingRpa &rArr; dmDevPrivSetRpa &rArr; HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetPendingRpa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>dmDevPrivActStart</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dmDevPrivActStart &rArr; dmDevPrivAddrCalc &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLlPrivacySupported
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmAdvSetAddrType
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetAddrType
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivSetResolvablePrivateAddrTimeout
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivTimerStart
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetAddrType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>dmDevPrivActStop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dmDevPrivActStop &rArr; DmPrivClearResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLlPrivacySupported
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmAdvSetAddrType
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetAddrType
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivClearResList
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetAddrType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>dmDevPrivActTimeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivActTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dmDevPrivActTimeout &rArr; dmDevPrivAddrCalc &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivTimerStart
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAddrCalc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>dmDevPrivHciHandler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dm_dev_priv.o(i.dmDevPrivHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmDevPrivHciHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>dmDevPrivMsgHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmDevPrivMsgHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>dmDevPrivReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dmDevPrivReset &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_dev_priv.o(.constdata)
</UL>
<P><STRONG><a name="[336]"></a>dmDevSetFilterPolicy</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, dm_dev.o(i.dmDevSetFilterPolicy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dmDevSetFilterPolicy
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevSetFilterPolicy
</UL>

<P><STRONG><a name="[142]"></a>dmEmptyHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dm_main.o(i.dmEmptyHandler))
<BR>[Address Reference Count : 4]<UL><LI> dm_conn.o(.constdata)
<LI> dm_main.o(.constdata)
<LI> dm_priv.o(.constdata)
<LI> dm_sec_lesc.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>dmEmptyReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dm_main.o(i.dmEmptyReset))
<BR>[Address Reference Count : 5]<UL><LI> dm_conn.o(.constdata)
<LI> dm_dev.o(.constdata)
<LI> dm_main.o(.constdata)
<LI> dm_priv.o(.constdata)
<LI> dm_sec_lesc.o(.constdata)
</UL>
<P><STRONG><a name="[33c]"></a>dmInitPhyToIdx</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dm_main.o(i.dmInitPhyToIdx))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmInitPhyToIdx
</UL>

<P><STRONG><a name="[156]"></a>dmPrivActAddDevToResList</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivActAddDevToResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dmPrivActAddDevToResList &rArr; HciLeAddDeviceToResolvingListCmd &rArr; LlAddDeviceToResolvingList &rArr; BbBleResListAdd &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeAddDeviceToResolvingListCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>dmPrivActClearResList</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivActClearResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dmPrivActClearResList &rArr; HciLeClearResolvingList &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeClearResolvingList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>dmPrivActGenAddr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivActGenAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dmPrivActGenAddr &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>dmPrivActRemDevFromResList</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivActRemDevFromResList))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmPrivActRemDevFromResList &rArr; HciLeRemoveDeviceFromResolvingList &rArr; LlRemoveDeviceFromResolvingList &rArr; BbBleResListRemove &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoveDeviceFromResolvingList
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>dmPrivActResolveAddr</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dm_priv.o(i.dmPrivActResolveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dmPrivActResolveAddr &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>dmPrivActSetAddrResEnable</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivActSetAddrResEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmPrivActSetAddrResEnable &rArr; dmPrivSetAddrResEnable &rArr; HciLeSetAddrResolutionEnable &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivSetAddrResEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>dmPrivActSetPrivacyMode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivActSetPrivacyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dmPrivActSetPrivacyMode &rArr; HciLeSetPrivacyModeCmd &rArr; LlSetPrivacyMode &rArr; BbBleResListSetPrivacyMode &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetPrivacyModeCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>dmPrivAesActGenAddrAesCmpl</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dm_priv.o(i.dmPrivAesActGenAddrAesCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmPrivAesActGenAddrAesCmpl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>dmPrivAesActResAddrAesCmpl</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivAesActResAddrAesCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dmPrivAesActResAddrAesCmpl &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>dmPrivAesMsgHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivAesMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmPrivAesMsgHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>dmPrivHciHandler</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmPrivHciHandler &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivSetAddrResEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>dmPrivMsgHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmPrivMsgHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>dmPrivReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dm_priv.o(i.dmPrivReset))
<BR>[Address Reference Count : 1]<UL><LI> dm_priv.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>dmScanActStart</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dm_scan_leg.o(i.dmScanActStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmScanActStart &rArr; HciLeSetScanParamCmd &rArr; LlSetScanParam &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetScanParamCmd
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetScanEnableCmd
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmLlAddrType
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanPhyToIdx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>dmScanActStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dm_scan_leg.o(i.dmScanActStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmScanActStop &rArr; HciLeSetScanEnableCmd &rArr; LlScanEnable &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetScanEnableCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>dmScanActTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dm_scan_leg.o(i.dmScanActTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dmScanActTimeout &rArr; dmScanActStop &rArr; HciLeSetScanEnableCmd &rArr; LlScanEnable &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>dmScanHciHandler</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, dm_scan_leg.o(i.dmScanHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmScanHciHandler &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanActHciReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>dmScanInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dm_scan.o(i.dmScanInit))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanReset
</UL>

<P><STRONG><a name="[167]"></a>dmScanMsgHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dm_scan_leg.o(i.dmScanMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmScanMsgHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>dmScanReset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dm_scan_leg.o(i.dmScanReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dmScanReset &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_scan_leg.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>dmSecHciHandler</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, dm_sec.o(i.dmSecHciHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = dmSecHciHandler &rArr; SmpDmEncryptInd &rArr; SmpHandler &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqReplCmd
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqNegReplCmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbByHandle
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmLescEnabled
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmGetStk
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmEncryptInd
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_sec.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>dmSecLescMsgHandler</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, dm_sec_lesc.o(i.dmSecLescMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dmSecLescMsgHandler &rArr; Calc128Cpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_sec_lesc.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>dmSecMsgHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dm_sec.o(i.dmSecMsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dmSecMsgHandler &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeStartEncryptionCmd
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqReplCmd
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeLtkReqNegReplCmd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_sec.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>dmSecReset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dm_sec.o(i.dmSecReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dmSecReset &rArr; SmpDbInit &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_sec.o(.constdata)
</UL>
<P><STRONG><a name="[6a5]"></a>fm_gain_cal</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, board_config.o(i.fm_gain_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fm_gain_cal &rArr; fm_gain_cal_ch &rArr; get_delta_f &rArr; meas_freq &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
</UL>

<P><STRONG><a name="[6a6]"></a>fm_gain_cal_ch</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, board_config.o(i.fm_gain_cal_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fm_gain_cal_ch &rArr; get_delta_f &rArr; meas_freq &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ch
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_enable
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_disable
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_delta_f
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal
</UL>

<P><STRONG><a name="[e8]"></a>fputc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stdio.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; MXC_UART_WriteCharacter &rArr; MXC_UART_Common_WriteCharacter &rArr; MXC_UART_WriteCharacterRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_WriteCharacter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[665]"></a>full_calibration</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, board_config.o(i.full_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_timer_setup
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ch
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_afe
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calib_amp
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_calibrate
</UL>

<P><STRONG><a name="[67f]"></a>full_calibration_restore</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, board_config.o(i.full_calibration_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = full_calibration_restore &rArr; restore_afe &rArr; dbb_spim_write_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_timer_setup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_afe
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_restore_calibration
</UL>

<P><STRONG><a name="[6a8]"></a>get_delta_f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, board_config.o(i.get_delta_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_delta_f &rArr; meas_freq &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
</UL>

<P><STRONG><a name="[370]"></a>hciCoreAclReassembly</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, hci_core.o(i.hciCoreAclReassembly))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hciCoreAclReassembly &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnByHandle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreHandler
</UL>

<P><STRONG><a name="[f4]"></a>hciCoreAclRecvPending</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hci_core_ps.o(i.hciCoreAclRecvPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hciCoreAclRecvPending &rArr; LlRecvAclData &rArr; LctrRxAcl &rArr; lctrRxConnDeqAcl &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRecvAclDataComplete
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRecvAclData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_core_ps.o(i.hciCoreInit)
</UL>
<P><STRONG><a name="[6c2]"></a>hciCoreCisByHandle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_core.o(i.hciCoreCisByHandle))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[6ac]"></a>hciCoreCisClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_core.o(i.hciCoreCisClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hciCoreCisClose &rArr; hciCoreCisFree &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisFree
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[6ae]"></a>hciCoreCisOpen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_core.o(i.hciCoreCisOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hciCoreCisOpen &rArr; hciCoreCisAlloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[3ae]"></a>hciCoreConnByHandle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_core.o(i.hciCoreConnByHandle))
<BR><BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreAclReassembly
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreNumCmplPkts
</UL>

<P><STRONG><a name="[6b0]"></a>hciCoreConnClose</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_core.o(i.hciCoreConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hciCoreConnClose &rArr; hciCoreConnFree &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnFree
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[6b3]"></a>hciCoreConnOpen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci_core.o(i.hciCoreConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hciCoreConnOpen &rArr; hciCoreConnAlloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[f3]"></a>hciCoreEvtProcessLlEvt</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, hci_core_ps.o(i.hciCoreEvtProcessLlEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hciCoreEvtProcessLlEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreSizeOfEvt
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_core_ps.o(i.hciCoreInit)
</UL>
<P><STRONG><a name="[37b]"></a>hciCoreEvtSendIntEvt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hci_core_ps.o(i.hciCoreEvtSendIntEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciWriteAuthPayloadTimeout
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciReadRssiCmd
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetRandAddrCmd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetAddrResolutionEnable
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRemoveDeviceFromResolvingList
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRandCmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeGenerateDHKey
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeClearResolvingList
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeAddDeviceToResolvingListCmd
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeEncryptCmd
</UL>

<P><STRONG><a name="[373]"></a>hciCoreInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hci_core_ps.o(i.hciCoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hciCoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetAclTxBufs
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetAclMaxSize
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEvtRegister
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlAclRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreInit
</UL>

<P><STRONG><a name="[f5]"></a>hciCoreNumCmplPkts</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hci_core_ps.o(i.hciCoreNumCmplPkts))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hciCoreNumCmplPkts &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnByHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_core_ps.o(i.hciCoreInit)
</UL>
<P><STRONG><a name="[3ac]"></a>hciCoreResetStart</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hci_vs.o(i.hciCoreResetStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hciCoreResetStart &rArr; HciResetCmd &rArr; LlReset &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciResetSequence
</UL>

<P><STRONG><a name="[6b9]"></a>hciCoreSendAclData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreSendAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclStart
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
</UL>

<P><STRONG><a name="[6b4]"></a>hciCoreSizeOfEvt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_core_ps.o(i.hciCoreSizeOfEvt))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreEvtProcessLlEvt
</UL>

<P><STRONG><a name="[6bb]"></a>hciCoreTxAclComplete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreTxAclComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
</UL>

<P><STRONG><a name="[6bc]"></a>hciCoreTxAclContinue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreTxAclContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetBufSize
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreSendAclData
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreNextConnFragment
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclStart
</UL>

<P><STRONG><a name="[6c3]"></a>hciCoreTxAclDataFragmented</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_core.o(i.hciCoreTxAclDataFragmented))
<BR><BR>[Called By]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciTrSendAclData
</UL>

<P><STRONG><a name="[3b0]"></a>hciCoreTxAclStart</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hci_core.o(i.hciCoreTxAclStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetBufSize
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreSendAclData
</UL>
<BR>[Called By]<UL><LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciSendAclData
</UL>

<P><STRONG><a name="[6b2]"></a>hciCoreTxReady</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, hci_core.o(i.hciCoreTxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclStart
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnFree
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreNumCmplPkts
</UL>

<P><STRONG><a name="[36f]"></a>hciEvtProcessMsg</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, hci_evt.o(i.hciEvtProcessMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = hciEvtProcessMsg &rArr; hciCoreConnClose &rArr; hciCoreConnFree &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetBdAddr
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRandCmd
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnOpen
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnClose
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisOpen
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisClose
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisByHandle
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadResolvingListSize
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlReadMaximumDataLen
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetVersion
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessIntEvt
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetLeSupFeat
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlWriteDefaultDataLen
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetHostFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciCoreHandler
</UL>

<P><STRONG><a name="[6ba]"></a>hciTrSendAclData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hci_tr.o(i.hciTrSendAclData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSendAclData
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclDataFragmented
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclComplete
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreSendAclData
</UL>

<P><STRONG><a name="[3b7]"></a>l2cMsgAlloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, l2c_main.o(i.l2cMsgAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cMsgAlloc &rArr; WsfMsgDataAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDmConnUpdateRsp
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cSendCmdReject
</UL>

<P><STRONG><a name="[a4]"></a>l2cRxSignalingPkt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, l2c_main.o(i.l2cRxSignalingPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = l2cRxSignalingPkt &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[6c4]"></a>l2cSendCmdReject</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, l2c_main.o(i.l2cSendCmdReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = l2cSendCmdReject &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cMasterRxSignalingPkt
</UL>

<P><STRONG><a name="[1d8]"></a>lctrActHostNegReply</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActHostNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrActHostNegReply &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
<LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>lctrActNotifyHostConnUpdSuccess</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActNotifyHostConnUpdSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActNotifyHostConnUpdSuccess &rArr; lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
<LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>lctrActPeerRejectConnParam</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActPeerRejectConnParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActPeerRejectConnParam &rArr; lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
<LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>lctrActReceivePeriodicSyncInd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrActReceivePeriodicSyncInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrActReceivePeriodicSyncInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>lctrActSendPeriodicSyncInd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrActSendPeriodicSyncInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrActSendPeriodicSyncInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>lctrActStorePeriodicSyncTrsf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrActStorePeriodicSyncTrsf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrActStorePeriodicSyncTrsf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>lctrAdvActAdvCnf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActAdvCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrAdvActAdvCnf &rArr; LmgrSendAdvEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>lctrAdvActAdvTerm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActAdvTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrAdvActAdvTerm &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvCleanupOp
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvEnableCnf
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>lctrAdvActDisallowAdvCnf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActDisallowAdvCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrAdvActDisallowAdvCnf &rArr; LmgrSendAdvEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>lctrAdvActResetTerm</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActResetTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrAdvActResetTerm &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvCleanupOp
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>lctrAdvActSelfStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActSelfStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lctrAdvActSelfStart &rArr; lctrSlvAdvBuildOp &rArr; lctrChoosePeerAddr &rArr; BbBleResListGeneratePeer &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncWhitelistRefCount
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncResetRefCount
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>lctrAdvActSelfTerm</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, lctr_act_adv_slave.o(i.lctrAdvActSelfTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lctrAdvActSelfTerm &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidateConnIndPdu
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackConnIndPdu
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvCleanupOp
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDirectConnectTimeout
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>lctrAdvActShutdown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrAdvActShutdown &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>lctrAdvActStart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = lctrAdvActStart &rArr; lctrSlvAdvBuildOp &rArr; lctrChoosePeerAddr &rArr; BbBleResListGeneratePeer &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncWhitelistRefCount
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncResetRefCount
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>lctrAdvActUpdateAdvParam</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvActUpdateAdvParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrAdvActUpdateAdvParam &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_slave.o(.constdata)
</UL>
<P><STRONG><a name="[6f2]"></a>lctrAdvReportsDec</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.lctrAdvReportsDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrAdvReportsDec &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxDirectAdvBPduHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxAdvBPduHandler
</UL>

<P><STRONG><a name="[6f3]"></a>lctrAdvReportsInc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.lctrAdvReportsInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrAdvReportsInc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanRspRxCompHandler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktPostProcessHandler
</UL>

<P><STRONG><a name="[78a]"></a>lctrAdvRptAddEntry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lctr_main_adv_master.o(i.lctrAdvRptAddEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrAdvRptAddEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
</UL>

<P><STRONG><a name="[789]"></a>lctrAdvRptCheckDuplicate</STRONG> (Thumb, 222 bytes, Stack size 28 bytes, lctr_main_adv_master.o(i.lctrAdvRptCheckDuplicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lctrAdvRptCheckDuplicate
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
</UL>

<P><STRONG><a name="[6f4]"></a>lctrAdvRptEnable</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lctr_main_adv_master.o(i.lctrAdvRptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrAdvRptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActUpdateScanFilt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
</UL>

<P><STRONG><a name="[788]"></a>lctrAdvRptGenerateLegacyHash</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, lctr_main_adv_master.o(i.lctrAdvRptGenerateLegacyHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lctrAdvRptGenerateLegacyHash
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
</UL>

<P><STRONG><a name="[6f5]"></a>lctrAllocConnCtx</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrAllocConnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lctrAllocConnCtx &rArr; lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncResetRefCount
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessConnInd
</UL>

<P><STRONG><a name="[6fb]"></a>lctrBuildRemapTable</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lctr_main_conn.o(i.lctrBuildRemapTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrBuildRemapTable
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvChanMapUpdateOp
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstChanMapUpdateOp
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[6fc]"></a>lctrCalcAdvDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_isr_adv_slave.o(i.lctrCalcAdvDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrCalcAdvDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvEndOp
</UL>

<P><STRONG><a name="[6f6]"></a>lctrCalcConnDurationUsec</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrCalcConnDurationUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetMaxConnDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreRemoteDataLength
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLocalDataLength
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvPhyUpdateOp
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstPhyUpdateOp
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[3dd]"></a>lctrCalcPingPeriodMs</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrCalcPingPeriodMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrCalcPingPeriodMs
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSetAuthPayloadTimeout
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[6ce]"></a>lctrCalcSessionKey</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrCalcSessionKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lctrCalcSessionKey &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkReply
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncRsp
</UL>

<P><STRONG><a name="[6ff]"></a>lctrCalcTotalAccuracy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lctr_main_conn_slave.o(i.lctrCalcTotalAccuracy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrCalcTotalAccuracy
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetClockAccuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStorePeerSca
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[7b3]"></a>lctrCalcWindowWideningUsec</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lctr_main.o(i.lctrCalcWindowWideningUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lctrCalcWindowWideningUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnUpdateOp
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[6db]"></a>lctrCheckPauseComplete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrCheckPauseComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrCheckPauseComplete &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncReq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartEnc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActRefreshEncKey
</UL>

<P><STRONG><a name="[702]"></a>lctrChooseAdvA</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lctr_main_adv_slave.o(i.lctrChooseAdvA))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lctrChooseAdvA &rArr; BbBleResListReadLocal &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadLocal
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
</UL>

<P><STRONG><a name="[703]"></a>lctrChoosePeerAddr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lctr_main_adv_slave.o(i.lctrChoosePeerAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lctrChoosePeerAddr &rArr; BbBleResListGeneratePeer &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGeneratePeer
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
</UL>

<P><STRONG><a name="[704]"></a>lctrComputeAccessAddr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_main.o(i.lctrComputeAccessAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrComputeAccessAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[706]"></a>lctrComputeCrcInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_main_conn_master.o(i.lctrComputeCrcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrComputeCrcInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[707]"></a>lctrComputeHopInc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lctr_main_conn_master.o(i.lctrComputeHopInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrComputeHopInc
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[708]"></a>lctrComputeSca</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrComputeSca))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrComputeSca
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetClockAccuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[3cf]"></a>lctrConnDefaults</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_main_conn_slave.o(i.lctrConnDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrConnDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvConnInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnResetHandler
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstConnInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnResetHandler
</UL>

<P><STRONG><a name="[709]"></a>lctrConnIndHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lctr_isr_adv_slave.o(i.lctrConnIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrConnIndHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvHandler
</UL>

<P><STRONG><a name="[fe]"></a>lctrConnResolveConflict</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lctr_main_conn.o(i.lctrConnResolveConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrConnResolveConflict &rArr; WsfQueueEmpty &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lctr_isr_conn_slave.o(i.lctrSlvConnEndOp)
<LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
<LI> lctr_isr_conn_master.o(i.lctrMstConnEndOp)
<LI> lctr_isr_init_master.o(i.lctrMstInitiateEndOp)
</UL>
<P><STRONG><a name="[b2]"></a>lctrConnRxPendingHandler</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, lctr_main_conn.o(i.lctrConnRxPendingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lctrConnRxPendingHandler &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataPduHdr
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduFree
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxDeq
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnEnq
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataRxIncAvailBuf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
<LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[70e]"></a>lctrConnStatelessEventHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lctr_sm_conn_slave.o(i.lctrConnStatelessEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lctrConnStatelessEventHandler &rArr; lctrFreeConnCtx &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmRemove
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreResetTerminateReason
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreMicFailedTerminateReason
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDisconnectInd
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFlagLinkTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[b4]"></a>lctrConnTxCompletedHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrConnTxCompletedHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrConnTxCompletedHandler &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
<LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[716]"></a>lctrDecodeCtrlPdu</STRONG> (Thumb, 1250 bytes, Stack size 32 bytes, lctr_pdu_conn.o(i.lctrDecodeCtrlPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lctrDecodeCtrlPdu &rArr; lctrUnpackPerSyncIndPdu &rArr; BstreamToBda64
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataPduHdr
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathGetNumBitsSet
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackVersionIndPdu
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackUnknownRspPdu
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackTerminateIndPdu
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackRejectIndPdu
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackRejectExtIndPdu
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPhyUpdateIndPdu
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPhyPdu
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPerSyncIndPdu
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPeerScaPdu
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackMinUsedChanIndPdu
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackFeaturePdu
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataLengthPdu
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackConnUpdateIndPdu
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackConnParamPdu
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackCisTermPdu
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackCisRspPdu
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackCisReqPdu
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackCisIndPdu
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackChanMapIndPdu
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPwrCtrlRspPdu
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPwrCtrlReqPdu
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackPwrChngIndPdu
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrIsConnUpdateParamValid
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvEncProcessDataPdu
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstEncProcessDataPdu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessDataPdu
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstProcessDataPdu
</UL>

<P><STRONG><a name="[72f]"></a>lctrDecodeEncPdu</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, lctr_pdu_enc.o(i.lctrDecodeEncPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lctrDecodeEncPdu &rArr; lctrUnpackDataPduHdr
</UL>
<BR>[Calls]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataPduHdr
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackEncRspPdu
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackEncReqPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvEncProcessDataPdu
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstEncProcessDataPdu
</UL>

<P><STRONG><a name="[6dd]"></a>lctrDisableRxDataEnc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lctr_act_enc.o(i.lctrDisableRxDataEnc))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncReq
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
</UL>

<P><STRONG><a name="[1fb]"></a>lctrDisableTxDataEnc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lctr_act_enc.o(i.lctrDisableTxDataEnc))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[6cf]"></a>lctrEnableRxDataEnc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_act_enc.o(i.lctrEnableRxDataEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrEnableRxDataEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrModifyEncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkReply
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncReq
</UL>

<P><STRONG><a name="[6e0]"></a>lctrEnableTxDataEnc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_act_enc.o(i.lctrEnableTxDataEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrEnableTxDataEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrModifyEncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncReq
</UL>

<P><STRONG><a name="[6e8]"></a>lctrEncNotifyHostLtkReqInd</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lctr_act_enc.o(i.lctrEncNotifyHostLtkReqInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrEncNotifyHostLtkReqInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
</UL>

<P><STRONG><a name="[733]"></a>lctrExceededMaxDur</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lctr_isr_conn.o(i.lctrExceededMaxDur))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lctrExceededMaxDur &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
</UL>

<P><STRONG><a name="[ab]"></a>lctrExecutePingSm</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_slave.o(i.lctrExecutePingSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrExecutePingSm &rArr; lctrPingSm &rArr; lctrSendPingRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRemapPingEvent
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckActiveOrPend
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
<LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[711]"></a>lctrFreeConnCtx</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lctr_main_conn.o(i.lctrFreeConnCtx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrFreeConnCtx &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecResetRefCount
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueueClear
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnClear
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataRxIncAvailBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[73d]"></a>lctrGenerateDhKeyComplete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_main_sc.o(i.lctrGenerateDhKeyComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lctrGenerateDhKeyComplete &rArr; uECC_shared_secret_complete &rArr; vli_nativeToBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_complete
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateDhKeyContinue
</UL>

<P><STRONG><a name="[740]"></a>lctrGenerateDhKeyContinue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_sc.o(i.lctrGenerateDhKeyContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lctrGenerateDhKeyContinue &rArr; uECC_shared_secret_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_continue
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateDhKeyContinue
</UL>

<P><STRONG><a name="[3c1]"></a>lctrGenerateDhKeyStart</STRONG> (Thumb, 64 bytes, Stack size 112 bytes, lctr_main_sc.o(i.lctrGenerateDhKeyStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrGenerateDhKeyStart &rArr; uECC_shared_secret_start &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_start
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng_ll
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrReverseCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateDhKey
</UL>

<P><STRONG><a name="[746]"></a>lctrGenerateMstVectors</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lctr_act_enc_master.o(i.lctrGenerateMstVectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrGenerateMstVectors &rArr; PalCryptoGenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstExecuteEncryptSm
</UL>

<P><STRONG><a name="[747]"></a>lctrGenerateP256KeyPairComplete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lctr_main_sc.o(i.lctrGenerateP256KeyPairComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lctrGenerateP256KeyPairComplete &rArr; uECC_make_key_complete &rArr; vli_nativeToBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_complete
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateP256KeyPairContinue
</UL>

<P><STRONG><a name="[749]"></a>lctrGenerateP256KeyPairContinue</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_sc.o(i.lctrGenerateP256KeyPairContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lctrGenerateP256KeyPairContinue &rArr; uECC_make_key_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateP256KeyPairContinue
</UL>

<P><STRONG><a name="[3c4]"></a>lctrGenerateP256KeyPairStart</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, lctr_main_sc.o(i.lctrGenerateP256KeyPairStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrGenerateP256KeyPairStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng_ll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_start
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRng
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateP256KeyPair
</UL>

<P><STRONG><a name="[3c3]"></a>lctrGenerateP256PublicKeyStart</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, lctr_main_sc.o(i.lctrGenerateP256PublicKeyStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrGenerateP256PublicKeyStart &rArr; lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng_ll
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_start
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrReverseCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateP256KeyPair
</UL>

<P><STRONG><a name="[6e6]"></a>lctrGenerateSlvVectors</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lctr_act_enc.o(i.lctrGenerateSlvVectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrGenerateSlvVectors &rArr; PalCryptoGenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
</UL>

<P><STRONG><a name="[f7]"></a>lctrGetConnRefTime</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lctr_main_conn.o(i.lctrGetConnRefTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrGetConnRefTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_act_init_master.o(i.lctrInitActInitiate)
</UL>
<P><STRONG><a name="[1b8]"></a>lctrInitActConnect</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, lctr_act_init_master.o(i.lctrInitActConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrInitActConnect &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActShutdown
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>lctrInitActDisallowCancel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lctr_act_init_master.o(i.lctrInitActDisallowCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrInitActDisallowCancel &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>lctrInitActDisallowInitiate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lctr_act_init_master.o(i.lctrInitActDisallowInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrInitActDisallowInitiate &rArr; lctrScanNotifyHostInitiateError &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>lctrInitActInitiate</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, lctr_act_init_master.o(i.lctrInitActInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lctrInitActInitiate &rArr; SchRmAdd &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncWhitelistRefCount
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncResetRefCount
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmAdd
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateOpCommit
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>lctrInitActResetTerm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lctr_act_init_master.o(i.lctrInitActResetTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrInitActResetTerm &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>lctrInitActScanTerm</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lctr_act_init_master.o(i.lctrInitActScanTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lctrInitActScanTerm &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanNotifyHostInitiateError
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>lctrInitActShutdown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_act_init_master.o(i.lctrInitActShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrInitActShutdown &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_init_master.o(.constdata)
</UL>
<P><STRONG><a name="[753]"></a>lctrInitPhyTxPower</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrInitPhyTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lctrInitPhyTxPower &rArr; llGetSupportedPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llGetSupportedPhys
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBuildOp
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
</UL>

<P><STRONG><a name="[1ea]"></a>lctrInvalidEncPduSeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_enc.o(i.lctrInvalidEncPduSeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrInvalidEncPduSeq &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstExecuteEncryptSm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
<LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>lctrLlcpExecuteCommonSm</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, lctr_sm_llcp_conn.o(i.lctrLlcpExecuteCommonSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lctrLlcpExecuteCommonSm &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRemapCmnProcEvent
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostSuccess
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReject
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetCmnProcId
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFeatureAvail
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecAction
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
<LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[75a]"></a>lctrLlcpStatelessEventHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrLlcpStatelessEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrLlcpStatelessEventHandler &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLlcpTimeoutTerminateReason
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreInstantPassedTerminateReason
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendUnknownRsp
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFlagLinkTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteSm
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteSm
</UL>

<P><STRONG><a name="[f9]"></a>lctrMstConnAbortOp</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lctr_isr_conn_master.o(i.lctrMstConnAbortOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lctrMstConnAbortOp &rArr; lctrMstConnEndOp &rArr; SchRmGetOffsetUsec &rArr; SchTmGetFirstAnchor &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[fa]"></a>lctrMstConnBeginOp</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lctr_isr_conn_master.o(i.lctrMstConnBeginOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lctrMstConnBeginOp &rArr; lctrSetupForTx &rArr; BbBleTxData &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduAlloc
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[751]"></a>lctrMstConnBuildOp</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, lctr_main_conn_master.o(i.lctrMstConnBuildOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrMstConnBuildOp &rArr; lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrBuildRemapTable
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitPhyTxPower
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcPingPeriodMs
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[fb]"></a>lctrMstConnCleanupOp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_isr_conn_master.o(i.lctrMstConnCleanupOp))
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[f8]"></a>lctrMstConnEndOp</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, lctr_isr_conn_master.o(i.lctrMstConnEndOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lctrMstConnEndOp &rArr; SchRmGetOffsetUsec &rArr; SchTmGetFirstAnchor &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmGetOffsetUsec
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnUpdInd
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstPhyUpdateOp
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnUpdateOp
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstChanMapUpdateOp
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnAbortOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[768]"></a>lctrMstConnExecuteSm</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, lctr_sm_conn_master.o(i.lctrMstConnExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lctrMstConnExecuteSm &rArr; lctrMstLlcpExecuteSm &rArr; lctrLlcpStatelessEventHandler &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmRemove
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstReloadDataPdu
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLlcpTimeoutTerminateReason
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnFailEstablishTerminateReason
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDisconnectInd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstSetEstablishConn
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteSm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstEncProcessDataPdu
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstProcessDataPdu
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnTxPendingHandler
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecute
</UL>

<P><STRONG><a name="[106]"></a>lctrMstConnIndTxCompHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lctr_isr_init_master.o(i.lctrMstConnIndTxCompHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstConnIndTxCompHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
</UL>
<P><STRONG><a name="[fd]"></a>lctrMstConnRxCompletion</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, lctr_isr_conn_master.o(i.lctrMstConnRxCompletion))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lctrMstConnRxCompletion &rArr; lctrSetupForTx &rArr; BbBleTxData &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataPduHdr
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduFree
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPostProcessing
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAckCleanup
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAck
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessRxAck
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[fc]"></a>lctrMstConnTxCompletion</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lctr_isr_conn_master.o(i.lctrMstConnTxCompletion))
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.lctrMstConnBuildOp)
</UL>
<P><STRONG><a name="[100]"></a>lctrMstDiscoverAdvPktHandler</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, lctr_isr_adv_master.o(i.lctrMstDiscoverAdvPktHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lctrMstDiscoverAdvPktHandler &rArr; BbBleResListReadLocal &rArr; bbBleFindResolvingListEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadLocal
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvbPduHdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
</UL>
<P><STRONG><a name="[101]"></a>lctrMstDiscoverAdvPktPostProcessHandler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lctr_isr_adv_master.o(i.lctrMstDiscoverAdvPktPostProcessHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrMstDiscoverAdvPktPostProcessHandler &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
</UL>
<P><STRONG><a name="[778]"></a>lctrMstDiscoverBuildOp</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lctrMstDiscoverBuildOp &rArr; SchInsertNextAvailable &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackScanReqPdu
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanChanSelectInit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActDiscover
</UL>

<P><STRONG><a name="[ff]"></a>lctrMstDiscoverEndOp</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, lctr_isr_adv_master.o(i.lctrMstDiscoverEndOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lctrMstDiscoverEndOp &rArr; SchInsertEarlyAsPossible &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanChanSelectNext
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateEndOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
</UL>
<P><STRONG><a name="[aa]"></a>lctrMstExecuteEncryptSm</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_master.o(i.lctrMstExecuteEncryptSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lctrMstExecuteEncryptSm &rArr; lctrStartPendingLlcp &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateMstVectors
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInvalidEncPduSeq
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRemapEncryptEvent
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstEncryptSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[77e]"></a>lctrMstInitExecuteSm</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lctr_sm_init_master.o(i.lctrMstInitExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrMstInitExecuteSm
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitDisp
</UL>

<P><STRONG><a name="[105]"></a>lctrMstInitiateAdvPktHandler</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, lctr_isr_init_master.o(i.lctrMstInitiateAdvPktHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lctrMstInitiateAdvPktHandler &rArr; SchRmGetOffsetUsec &rArr; SchTmGetFirstAnchor &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListUpdateLocal
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadLocal
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmGetOffsetUsec
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvbPduHdr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
</UL>
<P><STRONG><a name="[750]"></a>lctrMstInitiateBuildOp</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, lctr_main_init_master.o(i.lctrMstInitiateBuildOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrMstInitiateBuildOp &rArr; lctrPackConnIndPdu &rArr; lctrPackConnIndPduAddr &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeAccessAddr
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeSca
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvbPduHdr
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanChanSelectInit
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeHopInc
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeCrcInit
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnIndPdu
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[104]"></a>lctrMstInitiateEndOp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lctr_isr_init_master.o(i.lctrMstInitiateEndOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lctrMstInitiateEndOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_init_master.o(i.lctrMstInitiateBuildOp)
</UL>
<P><STRONG><a name="[752]"></a>lctrMstInitiateOpCommit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lctr_main_init_master.o(i.lctrMstInitiateOpCommit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrMstInitiateOpCommit &rArr; SchInsertNextAvailable &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
</UL>

<P><STRONG><a name="[b5]"></a>lctrMstLlcpExecuteConnUpdSm</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_master.o(i.lctrMstLlcpExecuteConnUpdSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrMstLlcpExecuteConnUpdSm &rArr; lctrResolveCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnUpdRemapEvent
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCheckProcOverride
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[76b]"></a>lctrMstLlcpExecuteSm</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_master.o(i.lctrMstLlcpExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrMstLlcpExecuteSm &rArr; lctrLlcpStatelessEventHandler &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteVerCnf
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[76a]"></a>lctrMstReloadDataPdu</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_conn_master.o(i.lctrMstReloadDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrMstReloadDataPdu &rArr; SchReload &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReload
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[be]"></a>lctrMstRxAdvBPduHandler</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, lctr_main_adv_master.o(i.lctrMstRxAdvBPduHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lctrMstRxAdvBPduHandler &rArr; lctrMstCreateAdvRpt &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsDec
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCreateAdvRpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.LctrMstScanInit)
</UL>
<P><STRONG><a name="[bf]"></a>lctrMstRxDirectAdvBPduHandler</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, lctr_main_adv_master.o(i.lctrMstRxDirectAdvBPduHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lctrMstRxDirectAdvBPduHandler &rArr; lctrMstCreateAdvRpt &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsDec
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanAdvRptNotify
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCreateAdvRpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.LctrMstScanInit)
</UL>
<P><STRONG><a name="[78b]"></a>lctrMstScanCleanupOp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lctr_main_adv_master.o(i.lctrMstScanCleanupOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrMstScanCleanupOp &rArr; WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
</UL>

<P><STRONG><a name="[78c]"></a>lctrMstScanExecuteSm</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lctr_sm_adv_master.o(i.lctrMstScanExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrMstScanExecuteSm
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanDisp
</UL>

<P><STRONG><a name="[102]"></a>lctrMstScanReqTxCompHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_isr_adv_master.o(i.lctrMstScanReqTxCompHandler))
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
</UL>
<P><STRONG><a name="[103]"></a>lctrMstScanRspRxCompHandler</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, lctr_isr_adv_master.o(i.lctrMstScanRspRxCompHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrMstScanRspRxCompHandler &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvReportsInc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.lctrMstDiscoverBuildOp)
</UL>
<P><STRONG><a name="[76c]"></a>lctrMstSetEstablishConn</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lctr_main_conn_master.o(i.lctrMstSetEstablishConn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lctrMstSetEstablishConn &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReload
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[78d]"></a>lctrNotifyAuthPayloadTimeout</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lctr_act_enc.o(i.lctrNotifyAuthPayloadTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrNotifyAuthPayloadTimeout &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
</UL>

<P><STRONG><a name="[6c6]"></a>lctrNotifyEncChangeInd</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lctr_act_enc.o(i.lctrNotifyEncChangeInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrNotifyEncChangeInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReject
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActEncChangeDisallow
</UL>

<P><STRONG><a name="[6e2]"></a>lctrNotifyEncKeyRefreshInd</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lctr_act_enc.o(i.lctrNotifyEncKeyRefreshInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrNotifyEncKeyRefreshInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
</UL>

<P><STRONG><a name="[6d7]"></a>lctrNotifyHostConnParamInd</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, lctr_act_conn.o(i.lctrNotifyHostConnParamInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lctrNotifyHostConnParamInd &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqReply
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlRemoteConnParamReqNegReply
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrValidateConnSpec
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidateConnParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParam
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnParam
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParam
</UL>

<P><STRONG><a name="[6c5]"></a>lctrNotifyHostConnUpdateInd</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrNotifyHostConnUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActNotifyHostColliding
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActConnUpdDisallow
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerRejectConnParam
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActNotifyHostConnUpdSuccess
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActLocalRejectConnParam
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActConnUpdDisallow
</UL>

<P><STRONG><a name="[76f]"></a>lctrNotifyHostConnectInd</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, lctr_act_conn.o(i.lctrNotifyHostConnectInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrNotifyHostConnectInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessConnInd
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[790]"></a>lctrNotifyHostDataLengthInd</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrNotifyHostDataLengthInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrNotifyHostDataLengthInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreRemoteDataLength
</UL>

<P><STRONG><a name="[710]"></a>lctrNotifyHostDisconnectInd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrNotifyHostDisconnectInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrNotifyHostDisconnectInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[791]"></a>lctrNotifyHostHwErrInd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lctr_main.o(i.lctrNotifyHostHwErrInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrNotifyHostHwErrInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
</UL>

<P><STRONG><a name="[792]"></a>lctrNotifyHostPeerScaCnf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrNotifyHostPeerScaCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrNotifyHostPeerScaCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostSuccess
</UL>

<P><STRONG><a name="[784]"></a>lctrNotifyHostReadRemoteVerCnf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrNotifyHostReadRemoteVerCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrNotifyHostReadRemoteVerCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteSm
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteSm
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostSuccess
</UL>

<P><STRONG><a name="[79f]"></a>lctrPackAclHdr</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrPackAclHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrPackAclHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxConnDeqAcl
</UL>

<P><STRONG><a name="[795]"></a>lctrPackAdvPdu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrPackAdvPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrPackAdvPdu &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackScanRspPdu
</UL>

<P><STRONG><a name="[777]"></a>lctrPackAdvbPduHdr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lctr_pdu_adv_slave.o(i.lctrPackAdvbPduHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrPackAdvbPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverAdvPktHandler
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateAdvPktHandler
</UL>

<P><STRONG><a name="[796]"></a>lctrPackConnDirectIndAdvPdu</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lctr_pdu_adv_slave.o(i.lctrPackConnDirectIndAdvPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrPackConnDirectIndAdvPdu &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
</UL>

<P><STRONG><a name="[77f]"></a>lctrPackConnIndPdu</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrPackConnIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrPackConnIndPdu &rArr; lctrPackConnIndPduAddr &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnIndPduAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[797]"></a>lctrPackConnIndPduAddr</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrPackConnIndPduAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrPackConnIndPduAddr &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnIndPdu
</UL>

<P><STRONG><a name="[764]"></a>lctrPackConnUpdInd</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrPackConnUpdInd))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[6f9]"></a>lctrPackDataPduHdr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrPackDataPduHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrPackDataPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAssembleDataPdu
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAssembleCtrlPdu
</UL>

<P><STRONG><a name="[77a]"></a>lctrPackScanReqPdu</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrPackScanReqPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrPackScanReqPdu &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
</UL>

<P><STRONG><a name="[798]"></a>lctrPackScanRspPdu</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrPackScanRspPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrPackScanRspPdu &rArr; lctrPackAdvPdu &rArr; Bda64ToBstream
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvBuildOp
</UL>

<P><STRONG><a name="[6da]"></a>lctrPauseRxData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrPauseRxData))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncReq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncRsp
</UL>

<P><STRONG><a name="[6d9]"></a>lctrPauseTxData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrPauseTxData))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncReq
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReq
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartEnc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActRefreshEncKey
</UL>

<P><STRONG><a name="[770]"></a>lctrProcessRxAck</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, lctr_isr_conn.o(i.lctrProcessRxAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrProcessRxAck &rArr; lctrRxPduAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
</UL>

<P><STRONG><a name="[771]"></a>lctrProcessTxAck</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lctr_isr_conn.o(i.lctrProcessTxAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrProcessTxAck &rArr; lctrTxPduAck &rArr; lctrTxQueuePop &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxPduAck
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
</UL>

<P><STRONG><a name="[772]"></a>lctrProcessTxAckCleanup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_isr_conn.o(i.lctrProcessTxAckCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrProcessTxAckCleanup &rArr; lctrTxQueuePopCleanup &rArr; lctrFreeConnTxBufDesc &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePopCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
</UL>

<P><STRONG><a name="[3ce]"></a>lctrRegisterChClassHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lctr_main.o(i.lctrRegisterChClassHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstConnInit
</UL>

<P><STRONG><a name="[79b]"></a>lctrRestartAuthPayloadTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_act_enc.o(i.lctrRestartAuthPayloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrRestartAuthPayloadTimer &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
</UL>

<P><STRONG><a name="[73a]"></a>lctrRxConnClear</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrRxConnClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrRxConnClear &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
</UL>

<P><STRONG><a name="[3d9]"></a>lctrRxConnDeqAcl</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lctr_main_conn_data.o(i.lctrRxConnDeqAcl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrRxConnDeqAcl &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAclHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrRxAcl
</UL>

<P><STRONG><a name="[70c]"></a>lctrRxConnEnq</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrRxConnEnq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrRxConnEnq &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
</UL>

<P><STRONG><a name="[70d]"></a>lctrRxDeq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrRxDeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrRxDeq &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
</UL>

<P><STRONG><a name="[7a0]"></a>lctrRxEnq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrRxEnq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrRxEnq &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPostProcessing
</UL>

<P><STRONG><a name="[761]"></a>lctrRxPduAlloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrRxPduAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrRxPduAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBeginOp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessRxAck
</UL>

<P><STRONG><a name="[70a]"></a>lctrRxPduFree</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_main_conn_data.o(i.lctrRxPduFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrRxPduFree &rArr; WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPostProcessing
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
</UL>

<P><STRONG><a name="[773]"></a>lctrRxPostProcessing</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lctr_isr_conn.o(i.lctrRxPostProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lctrRxPostProcessing &rArr; BbBleRxData &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduFree
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
</UL>

<P><STRONG><a name="[1a8]"></a>lctrScanActDisallowScan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActDisallowScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrScanActDisallowScan &rArr; LmgrSendScanEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>lctrScanActDiscover</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lctrScanActDiscover &rArr; lctrMstDiscoverBuildOp &rArr; SchInsertNextAvailable &rArr; SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptEnable
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncWhitelistRefCount
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrIncResetRefCount
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>lctrScanActResetTerm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActResetTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrScanActResetTerm &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>lctrScanActScanCnf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActScanCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrScanActScanCnf &rArr; LmgrSendScanEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>lctrScanActScanTerm</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActScanTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrScanActScanTerm &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>lctrScanActSelfTerm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActSelfTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrScanActSelfTerm &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>lctrScanActShutdown</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrScanActShutdown &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>lctrScanActUpdateScanFilt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_act_adv_master.o(i.lctrScanActUpdateScanFilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrScanActUpdateScanFilt &rArr; LmgrSendScanEnableCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptEnable
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendScanEnableCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>lctrScanActUpdateScanParam</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_act_adv_master.o(i.lctrScanActUpdateScanParam))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_adv_master.o(.constdata)
</UL>
<P><STRONG><a name="[779]"></a>lctrScanChanSelectInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lctr_main_adv_master.o(i.lctrScanChanSelectInit))
<BR><BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverBuildOp
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitiateBuildOp
</UL>

<P><STRONG><a name="[77b]"></a>lctrScanChanSelectNext</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lctr_main_adv_master.o(i.lctrScanChanSelectNext))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstDiscoverEndOp
</UL>

<P><STRONG><a name="[74e]"></a>lctrScanCleanup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lctr_act_adv_master.o(i.lctrScanCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrScanCleanup &rArr; lctrMstScanCleanupOp &rArr; WsfMsgFree &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanCleanupOp
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecWhitelistRefCount
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecResetRefCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActSelfTerm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActScanTerm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanActResetTerm
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActScanTerm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActResetTerm
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActConnect
</UL>

<P><STRONG><a name="[74f]"></a>lctrScanNotifyHostInitiateError</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, lctr_main_adv_master.o(i.lctrScanNotifyHostInitiateError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrScanNotifyHostInitiateError &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActScanTerm
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActInitiate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActDisallowInitiate
</UL>

<P><STRONG><a name="[7ab]"></a>lctrScanReqHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_isr_adv_slave.o(i.lctrScanReqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrScanReqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvPostProcessHandler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvHandler
</UL>

<P><STRONG><a name="[b8]"></a>lctrSelectNextDataChannel</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lctr_main_conn.o(i.lctrSelectNextDataChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrSelectNextDataChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
<LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[1bf]"></a>lctrSendChanMapUpdateInd</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendChanMapUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendChanMapUpdateInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6e4]"></a>lctrSendConnMsg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lctr_main_conn.o(i.lctrSendConnMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreSetMinUsedChan
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdate
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreChanMap
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendSetMinUsedChanInd
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActScanTerm
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitActResetTerm
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInvalidEncPduSeq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnTxCompletedHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
</UL>

<P><STRONG><a name="[6e3]"></a>lctrSendConnParamReq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendConnParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrSendConnParamReq &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
</UL>

<P><STRONG><a name="[6d4]"></a>lctrSendConnParamRsp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendConnParamRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrSendConnParamRsp &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostReply
</UL>

<P><STRONG><a name="[6d3]"></a>lctrSendConnUpdateInd</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lctr_act_conn_master.o(i.lctrSendConnUpdateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lctrSendConnUpdateInd &rArr; SchRmStartUpdate &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmStartUpdate
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmCalcCommonPeriodicityUsec
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActSkipConnParamRsp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParamRsp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostReply
</UL>

<P><STRONG><a name="[1c7]"></a>lctrSendDataLengthReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendDataLengthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrSendDataLengthReq &rArr; lctrSendDataLengthPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>lctrSendDataLengthRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendDataLengthRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrSendDataLengthRsp &rArr; lctrSendDataLengthPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6df]"></a>lctrSendEncReq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lctr_act_enc_master.o(i.lctrSendEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
</UL>

<P><STRONG><a name="[6e7]"></a>lctrSendEncRsp</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
</UL>

<P><STRONG><a name="[1c1]"></a>lctrSendFeatureReq</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrSendFeatureReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendFeatureReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>lctrSendFeatureRsp</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrSendFeatureRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendFeatureRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6e5]"></a>lctrSendPauseEncReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendPauseEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendPauseEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnRestart
</UL>

<P><STRONG><a name="[6de]"></a>lctrSendPauseEncRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendPauseEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendPauseEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnRestart
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
</UL>

<P><STRONG><a name="[1d0]"></a>lctrSendPeerScaReq</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendPeerScaReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendPeerScaReq &rArr; lctrSendPeerScaReqPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaReqPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>lctrSendPeerScaRsp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendPeerScaRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendPeerScaRsp &rArr; lctrSendPeerScaRspPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaRspPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[799]"></a>lctrSendPingReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendPingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendPingReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
</UL>

<P><STRONG><a name="[79a]"></a>lctrSendPingRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendPingRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendPingRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
</UL>

<P><STRONG><a name="[6c9]"></a>lctrSendRejectInd</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrSendRejectInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendVersionInd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActRejectCollision
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostNegReply
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActRejectCollision
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActLocalRejectConnParam
</UL>

<P><STRONG><a name="[1ca]"></a>lctrSendSetMinUsedChanInd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrSendSetMinUsedChanInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrSendSetMinUsedChanInd &rArr; lctrSendSetMinUsedChanPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendSetMinUsedChanPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6d0]"></a>lctrSendStartEncReq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendStartEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendStartEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkReply
</UL>

<P><STRONG><a name="[6e1]"></a>lctrSendStartEncRsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lctr_act_enc.o(i.lctrSendStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendStartEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncReq
</UL>

<P><STRONG><a name="[1bc]"></a>lctrSendTerminateInd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendTerminateInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendTerminateInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[75b]"></a>lctrSendUnknownRsp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendUnknownRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendUnknownRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>

<P><STRONG><a name="[1c4]"></a>lctrSendVersionInd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendVersionInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrSendVersionInd &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[760]"></a>lctrSetupForTx</STRONG> (Thumb, 504 bytes, Stack size 80 bytes, lctr_isr_conn.o(i.lctrSetupForTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lctrSetupForTx &rArr; BbBleTxData &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePeek
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackDataPduHdr
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
</UL>

<P><STRONG><a name="[6ed]"></a>lctrSlvAdvBuildOp</STRONG> (Thumb, 774 bytes, Stack size 72 bytes, lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lctrSlvAdvBuildOp &rArr; lctrChoosePeerAddr &rArr; BbBleResListGeneratePeer &rArr; bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathRandNum
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvbPduHdr
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackScanRspPdu
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackConnDirectIndAdvPdu
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackAdvPdu
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrChoosePeerAddr
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrChooseAdvA
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfStart
</UL>

<P><STRONG><a name="[6ea]"></a>lctrSlvAdvCleanupOp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lctr_main_adv_slave.o(i.lctrSlvAdvCleanupOp))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActResetTerm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActAdvTerm
</UL>

<P><STRONG><a name="[107]"></a>lctrSlvAdvEndOp</STRONG> (Thumb, 688 bytes, Stack size 56 bytes, lctr_isr_adv_slave.o(i.lctrSlvAdvEndOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = lctrSlvAdvEndOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadPeer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadLocal
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvOpDuration
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcAdvDelay
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
</UL>
<P><STRONG><a name="[7aa]"></a>lctrSlvAdvExecuteSm</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lctr_sm_adv_slave.o(i.lctrSlvAdvExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrSlvAdvExecuteSm
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvDisp
</UL>

<P><STRONG><a name="[108]"></a>lctrSlvAdvHandler</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lctr_isr_adv_slave.o(i.lctrSlvAdvHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrSlvAdvHandler &rArr; lctrConnIndHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanReqHandler
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnIndHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
</UL>
<P><STRONG><a name="[109]"></a>lctrSlvAdvPostProcessHandler</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lctr_isr_adv_slave.o(i.lctrSlvAdvPostProcessHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrSlvAdvPostProcessHandler &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScanReqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.lctrSlvAdvBuildOp)
</UL>
<P><STRONG><a name="[7b6]"></a>lctrSlvCheckConnUpdInstant</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvCheckConnUpdInstant))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[7af]"></a>lctrSlvCheckEncOverrideCommonParam</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lctr_sm_llcp_conn.o(i.lctrSlvCheckEncOverrideCommonParam))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckProcOverride
</UL>

<P><STRONG><a name="[7ae]"></a>lctrSlvCheckEncOverrideConnParam</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvCheckEncOverrideConnParam))
<BR><BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckProcOverride
</UL>

<P><STRONG><a name="[10b]"></a>lctrSlvConnAbortOp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnAbortOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lctrSlvConnAbortOp &rArr; lctrSlvConnEndOp &rArr; lctrSlvConnUpdateOp &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvInitConnIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[10c]"></a>lctrSlvConnBeginOp</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnBeginOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lctrSlvConnBeginOp &rArr; BbBleRxData &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvInitConnIsr
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[7b2]"></a>lctrSlvConnBuildOp</STRONG> (Thumb, 656 bytes, Stack size 64 bytes, lctr_main_conn_slave.o(i.lctrSlvConnBuildOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcTotalAccuracy
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcWindowWideningUsec
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrBuildRemapTable
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmAdd
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitPhyTxPower
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcPingPeriodMs
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
</UL>

<P><STRONG><a name="[10d]"></a>lctrSlvConnCleanupOp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnCleanupOp))
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[10a]"></a>lctrSlvConnEndOp</STRONG> (Thumb, 1216 bytes, Stack size 40 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnEndOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lctrSlvConnEndOp &rArr; lctrSlvConnUpdateOp &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcWindowWideningUsec
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckConnUpdInstant
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvPhyUpdateOp
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnUpdateOp
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvChanMapUpdateOp
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAbortSlvLatency
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnAbortOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[769]"></a>lctrSlvConnExecuteSm</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, lctr_sm_conn_slave.o(i.lctrSlvConnExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLlcpTimeoutTerminateReason
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnFailEstablishTerminateReason
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBuildOp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteSm
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvEncProcessDataPdu
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstEncProcessDataPdu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessDataPdu
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvProcessConnInd
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstProcessDataPdu
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecute
</UL>

<P><STRONG><a name="[10f]"></a>lctrSlvConnRxCompletion</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnRxCompletion))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lctrSlvConnRxCompletion &rArr; lctrSetupForTx &rArr; BbBleTxData &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcDataPktDurationUsec
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckForLinkTerm
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackDataPduHdr
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPduFree
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRxPostProcessing
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAckCleanup
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAck
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessRxAck
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[10e]"></a>lctrSlvConnTxCompletion</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnTxCompletion))
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[c7]"></a>lctrSlvExecuteEncryptSm</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_slave.o(i.lctrSlvExecuteEncryptSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lctrSlvExecuteEncryptSm &rArr; lctrStartPendingLlcp &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInvalidEncPduSeq
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvRemapEncryptEvent
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvEncryptSm
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckProcOverride
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckActiveOrPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
</UL>
<P><STRONG><a name="[cc]"></a>lctrSlvLlcpExecuteConnUpdSm</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvLlcpExecuteConnUpdSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrSlvLlcpExecuteConnUpdSm &rArr; lctrResolveCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartPendingLlcp
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnUpdRemapEvent
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckProcOverride
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
</UL>
<P><STRONG><a name="[7ba]"></a>lctrSlvLlcpExecuteSm</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvLlcpExecuteSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrSlvLlcpExecuteSm &rArr; lctrLlcpStatelessEventHandler &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteVerCnf
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
</UL>

<P><STRONG><a name="[c6]"></a>lctrSlvRxScanReq</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lctr_main_adv_slave.o(i.lctrSlvRxScanReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lctrSlvRxScanReq &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.LctrSlvAdvInit)
</UL>
<P><STRONG><a name="[6d1]"></a>lctrStartLlcpTimer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStartLlcpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrStartLlcpTimer &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnRestart
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkReply
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnStart
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActTxFlushedOnRestart
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncReq
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerPauseEncRsp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncRsp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostReply
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
</UL>

<P><STRONG><a name="[738]"></a>lctrStartPendingLlcp</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStartPendingLlcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrStartPendingLlcp &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstExecuteEncryptSm
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecutePingSm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[6c8]"></a>lctrStopLlcpTimer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStopLlcpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrStopLlcpTimer &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPingSm
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncRsp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReject
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnInd
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostNegReply
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActSkipConnParamRsp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParamRsp
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostReply
</UL>

<P><STRONG><a name="[1c0]"></a>lctrStoreChanMap</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrStoreChanMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrStoreChanMap &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>lctrStoreChanMapUpdate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreChanMapUpdate))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[76d]"></a>lctrStoreConnFailEstablishTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreConnFailEstablishTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[6d6]"></a>lctrStoreConnParamReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStoreConnParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrStoreConnParamReq &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParam
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParam
</UL>

<P><STRONG><a name="[6d8]"></a>lctrStoreConnParamRsp</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrStoreConnParamRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lctrStoreConnParamRsp &rArr; LctrValidateConnSpec
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrValidateConnSpec
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetConnOpFlag
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParamRsp
</UL>

<P><STRONG><a name="[6d2]"></a>lctrStoreConnParamSpec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreConnParamSpec))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostReply
</UL>

<P><STRONG><a name="[6d5]"></a>lctrStoreConnUpdate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStoreConnUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrStoreConnUpdate &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnInd
</UL>

<P><STRONG><a name="[6c7]"></a>lctrStoreConnUpdateSpec</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreConnUpdateSpec))
<BR><BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostConnUpd
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrResolveCollision
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostConnUpd
</UL>

<P><STRONG><a name="[1bb]"></a>lctrStoreDisconnectReason</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreDisconnectReason))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[75c]"></a>lctrStoreInstantPassedTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreInstantPassedTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>

<P><STRONG><a name="[75d]"></a>lctrStoreLlcpTimeoutTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreLlcpTimeoutTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>

<P><STRONG><a name="[1c6]"></a>lctrStoreLocalDataLength</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStoreLocalDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lctrStoreLocalDataLength &rArr; lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6ca]"></a>lctrStoreLtkNegRepTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_enc.o(i.lctrStoreLtkNegRepTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
</UL>

<P><STRONG><a name="[6cd]"></a>lctrStoreLtkReply</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lctr_act_enc.o(i.lctrStoreLtkReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrStoreLtkReply
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkReply
</UL>

<P><STRONG><a name="[713]"></a>lctrStoreMicFailedTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreMicFailedTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[1d1]"></a>lctrStorePeerSca</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStorePeerSca))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrStorePeerSca &rArr; lctrCalcTotalAccuracy
</UL>
<BR>[Calls]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcTotalAccuracy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>lctrStoreRemoteDataLength</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrStoreRemoteDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrStoreRemoteDataLength &rArr; lctrNotifyHostDataLengthInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostDataLengthInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>lctrStoreRemoteVer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreRemoteVer))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[714]"></a>lctrStoreResetTerminateReason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreResetTerminateReason))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[1cf]"></a>lctrStoreScaAction</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreScaAction))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>lctrStoreSetMinUsedChan</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStoreSetMinUsedChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrStoreSetMinUsedChan &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[6dc]"></a>lctrStoreSlvVectors</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lctr_act_enc_master.o(i.lctrStoreSlvVectors))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncRsp
</UL>

<P><STRONG><a name="[1bd]"></a>lctrStoreTerminateReason</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrStoreTerminateReason))
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>lctrStoreUsedFeatures</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lctr_act_conn.o(i.lctrStoreUsedFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrStoreUsedFeatures
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn.o(.constdata)
</UL>
<P><STRONG><a name="[763]"></a>lctrTxCtrlPduAlloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrTxCtrlPduAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrTxCtrlPduAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAssembleCtrlPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendVersionInd
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendUnknownRsp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendTerminateInd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureRsp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureReq
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendChanMapUpdateInd
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendSetMinUsedChanPdu
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaRspPdu
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaReqPdu
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthPdu
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamPdu
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncReq
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncRsp
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncReq
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingRsp
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingReq
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncRsp
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncReq
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncRsp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[765]"></a>lctrTxCtrlPduQueue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrTxCtrlPduQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckAbortSlvLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendVersionInd
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendUnknownRsp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendTerminateInd
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureRsp
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendFeatureReq
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendChanMapUpdateInd
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendSetMinUsedChanPdu
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaRspPdu
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaReqPdu
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthPdu
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamPdu
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncReq
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncRsp
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncReq
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingRsp
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingReq
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncRsp
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncReq
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncRsp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[3e8]"></a>lctrTxDataPduQueue</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, lctr_main_conn_data.o(i.lctrTxDataPduQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgEnq
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostHwErrInd
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataTxIncAvailBuf
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckAbortSlvLatency
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAssembleDataPdu
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnTxBufDesc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
</UL>

<P><STRONG><a name="[3e7]"></a>lctrTxFragLen</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrTxFragLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrTxFragLen
</UL>
<BR>[Calls]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMaxNumBytesWithinUsecCoded
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMaxNumBytesWithinUsec2M
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMaxNumBytesWithinUsec1M
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
</UL>

<P><STRONG><a name="[3c6]"></a>lctrTxInitMem</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lctr_main_conn_data.o(i.lctrTxInitMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrTxInitMem &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrInitConnMem
</UL>

<P><STRONG><a name="[79c]"></a>lctrTxPduAck</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lctr_isr_conn.o(i.lctrTxPduAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lctrTxPduAck &rArr; lctrTxQueuePop &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePop
</UL>
<BR>[Called By]<UL><LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAck
</UL>

<P><STRONG><a name="[73b]"></a>lctrTxQueueClear</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrTxQueueClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrTxQueueClear &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnTxBufDesc
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataTxIncAvailBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
</UL>

<P><STRONG><a name="[7a7]"></a>lctrTxQueuePeek</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lctr_main_conn_data.o(i.lctrTxQueuePeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrTxQueuePeek
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgPeek
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfIsQueueDepthOne
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
</UL>

<P><STRONG><a name="[7c8]"></a>lctrTxQueuePop</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrTxQueuePop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrTxQueuePop &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgPeek
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxPduAck
</UL>

<P><STRONG><a name="[79d]"></a>lctrTxQueuePopCleanup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrTxQueuePopCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrTxQueuePopCleanup &rArr; lctrFreeConnTxBufDesc &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnTxBufDesc
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDataTxIncAvailBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrProcessTxAckCleanup
</UL>

<P><STRONG><a name="[3e4]"></a>lctrUnpackAclHdr</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lctr_pdu_conn.o(i.lctrUnpackAclHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrUnpackAclHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrTxAcl
</UL>

<P><STRONG><a name="[776]"></a>lctrUnpackAdvbPduHdr</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lctr_pdu_adv_slave.o(i.lctrUnpackAdvbPduHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrUnpackAdvbPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstCreateAdvRpt
</UL>

<P><STRONG><a name="[71a]"></a>lctrUnpackChanMapIndPdu</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, lctr_pdu_conn.o(i.lctrUnpackChanMapIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lctrUnpackChanMapIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[72a]"></a>lctrUnpackCisIndPdu</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackCisIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackCisIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[728]"></a>lctrUnpackCisReqPdu</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, lctr_pdu_conn.o(i.lctrUnpackCisReqPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrUnpackCisReqPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[729]"></a>lctrUnpackCisRspPdu</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackCisRspPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackCisRspPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[72b]"></a>lctrUnpackCisTermPdu</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackCisTermPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[6ee]"></a>lctrUnpackConnIndPdu</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lctr_pdu_adv_slave.o(i.lctrUnpackConnIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lctrUnpackConnIndPdu &rArr; BstreamToBda64
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
</UL>

<P><STRONG><a name="[719]"></a>lctrUnpackConnParamPdu</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lctr_pdu_conn.o(i.lctrUnpackConnParamPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrUnpackConnParamPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[717]"></a>lctrUnpackConnUpdateIndPdu</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackConnUpdateIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackConnUpdateIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[71c]"></a>lctrUnpackDataLengthPdu</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackDataLengthPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackDataLengthPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[70b]"></a>lctrUnpackDataPduHdr</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lctr_pdu_conn.o(i.lctrUnpackDataPduHdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrUnpackDataPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeEncPdu
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[71f]"></a>lctrUnpackFeaturePdu</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lctr_pdu_conn.o(i.lctrUnpackFeaturePdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lctrUnpackFeaturePdu &rArr; BstreamToUint64
</UL>
<BR>[Calls]<UL><LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToUint64
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[725]"></a>lctrUnpackMinUsedChanIndPdu</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackMinUsedChanIndPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[727]"></a>lctrUnpackPeerScaPdu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackPeerScaPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[726]"></a>lctrUnpackPerSyncIndPdu</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lctr_pdu_conn.o(i.lctrUnpackPerSyncIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lctrUnpackPerSyncIndPdu &rArr; BstreamToBda64
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[723]"></a>lctrUnpackPhyPdu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackPhyPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[724]"></a>lctrUnpackPhyUpdateIndPdu</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackPhyUpdateIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackPhyUpdateIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[722]"></a>lctrUnpackRejectExtIndPdu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackRejectExtIndPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[721]"></a>lctrUnpackRejectIndPdu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackRejectIndPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[71d]"></a>lctrUnpackTerminateIndPdu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackTerminateIndPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[71e]"></a>lctrUnpackUnknownRspPdu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrUnpackUnknownRspPdu))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[720]"></a>lctrUnpackVersionIndPdu</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackVersionIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackVersionIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[6cc]"></a>lctrUnpauseRxData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrUnpauseRxData))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReject
</UL>

<P><STRONG><a name="[6cb]"></a>lctrUnpauseTxData</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrUnpauseTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrUnpauseTxData &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackAclHdr
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxFragLen
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostLtkNegReply
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerStartEncRsp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerEncReject
</UL>

<P><STRONG><a name="[6ef]"></a>lctrValidateConnIndPdu</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, lctr_pdu_adv_slave.o(i.lctrValidateConnIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrValidateConnIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
</UL>

<P><STRONG><a name="[3c0]"></a>lctrValidatePublicKey</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, lctr_main_sc.o(i.lctrValidatePublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScBbDrvEcc
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrReverseCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGenerateDhKey
</UL>

<P><STRONG><a name="[2d2]"></a>ll_dbg_pin_assert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_assert))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_manual_sfd_to
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_TX_DONE_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SIG_DET_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SFD_TO_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SFD_DET_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RX_RCVD_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RX_ENG_DET_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RFFE_SPIM_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_GP_EVENT_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_CFO_IRQHandler
</UL>

<P><STRONG><a name="[2d3]"></a>ll_dbg_pin_deassert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_deassert))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_cfo_interrupt_handler
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_manual_sfd_to
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_TX_DONE_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SIG_DET_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SFD_TO_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SFD_DET_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RX_RCVD_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RX_ENG_DET_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RFFE_SPIM_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_GP_EVENT_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_CFO_IRQHandler
</UL>

<P><STRONG><a name="[50c]"></a>ll_dbg_pin_init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_init))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
</UL>

<P><STRONG><a name="[63c]"></a>ll_dbg_pin_is_rx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_is_rx))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
</UL>

<P><STRONG><a name="[63d]"></a>ll_dbg_pin_is_tx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_is_tx))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
</UL>

<P><STRONG><a name="[4fa]"></a>ll_dbg_pin_rx_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_rx_start))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
</UL>

<P><STRONG><a name="[505]"></a>ll_dbg_pin_tx_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ll_dbg_pin.o(i.ll_dbg_pin_tx_start))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_gp_event_interrupt_handler
</UL>

<P><STRONG><a name="[4f7]"></a>llc_api_crypto_disable_rx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_crypto.o(i.llc_api_crypto_disable_rx))
<BR><BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_disable_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[502]"></a>llc_api_crypto_disable_tx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_crypto.o(i.llc_api_crypto_disable_tx))
<BR><BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_disable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[4f5]"></a>llc_api_crypto_enable_rx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_crypto.o(i.llc_api_crypto_enable_rx))
<BR><BR>[Calls]<UL><LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_enable_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[500]"></a>llc_api_crypto_enable_tx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_crypto.o(i.llc_api_crypto_enable_tx))
<BR><BR>[Calls]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_enable_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[513]"></a>llc_api_crypto_set_key_iv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_crypto.o(i.llc_api_crypto_set_key_iv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_api_crypto_set_key_iv &rArr; dbb_crypto_set_key_iv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_set_key_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEnable
</UL>

<P><STRONG><a name="[4f6]"></a>llc_api_crypto_set_rx_params</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, llc_api_crypto.o(i.llc_api_crypto_set_rx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llc_api_crypto_set_rx_params &rArr; dbb_crypto_set_txrx_params
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_set_txrx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[501]"></a>llc_api_crypto_set_tx_params</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, llc_api_crypto.o(i.llc_api_crypto_set_tx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = llc_api_crypto_set_tx_params &rArr; dbb_crypto_set_txrx_params
</UL>
<BR>[Calls]<UL><LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_crypto_set_txrx_params
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[7d2]"></a>llc_api_rx_cancel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llc_api_rx.o(i.llc_api_rx_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_api_rx_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_rx_cancel
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_rx_trigger
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_gp_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxCancel
</UL>

<P><STRONG><a name="[4f3]"></a>llc_api_rx_register_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_int_handlers.o(i.llc_api_rx_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxCancel
</UL>

<P><STRONG><a name="[4f2]"></a>llc_api_rx_set_buffer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_int_handlers.o(i.llc_api_rx_set_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4f9]"></a>llc_api_rx_start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, llc_api_rx.o(i.llc_api_rx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_api_rx_start &rArr; dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_set_rx_trigger_value
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_set_gp_trigger_value
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4ee]"></a>llc_api_set_acc_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_ble.o(i.llc_api_set_acc_addr))
<BR><BR>[Calls]<UL><LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_acc_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4f1]"></a>llc_api_set_channel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_ble.o(i.llc_api_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_api_set_channel &rArr; ble_set_channel &rArr; dbb_seq_select_rf_channel &rArr; dbb_seq_update_channel_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4ef]"></a>llc_api_set_crc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_ble.o(i.llc_api_set_crc_init))
<BR><BR>[Calls]<UL><LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_set_crc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4f0]"></a>llc_api_set_phy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_setup.o(i.llc_api_set_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_set_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[509]"></a>llc_api_set_txpower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, llc_api_tx.o(i.llc_api_set_txpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llc_api_set_txpower &rArr; dbb_set_rfpower &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_init
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_set_rfpower
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
</UL>

<P><STRONG><a name="[50a]"></a>llc_api_setup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, llc_api_setup.o(i.llc_api_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_attach_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
</UL>

<P><STRONG><a name="[508]"></a>llc_api_shutdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_setup.o(i.llc_api_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llc_api_shutdown &rArr; dbb_prot_shutdown &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbDisable
</UL>

<P><STRONG><a name="[646]"></a>llc_api_timer_config_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_api_timer.o(i.llc_api_timer_config_get))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
</UL>

<P><STRONG><a name="[4f8]"></a>llc_api_timer_config_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_api_timer.o(i.llc_api_timer_config_set))
<BR><BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_rx_interrupt_handler
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFSRestore
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleRxTIFS
</UL>

<P><STRONG><a name="[506]"></a>llc_api_timer_now</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_timestamp.o(i.llc_api_timer_now))
<BR><BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[7d9]"></a>llc_api_tx_cancel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llc_api_tx.o(i.llc_api_tx_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_gp_trigger
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_ldo_done
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_tx_cancel
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_stop_tx_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleTxCancel
</UL>

<P><STRONG><a name="[507]"></a>llc_api_tx_data</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llc_api_tx.o(i.llc_api_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_api_tx_data &rArr; dbb_prot_tx_copy_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_tx_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[504]"></a>llc_api_tx_insert_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_api_tx.o(i.llc_api_tx_insert_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_api_tx_insert_data &rArr; dbb_prot_tx_insert_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_tx_insert_data
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[4f4]"></a>llc_api_tx_ldo_done</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, llc_api_tx.o(i.llc_api_tx_ldo_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_UnlockInfoBlock
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_LockInfoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbDisable
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
</UL>

<P><STRONG><a name="[50b]"></a>llc_api_tx_ldo_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_api_tx.o(i.llc_api_tx_ldo_init))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbInit
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_set_txpower
</UL>

<P><STRONG><a name="[4ff]"></a>llc_api_tx_ldo_setup</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, llc_api_tx.o(i.llc_api_tx_ldo_setup))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[4fe]"></a>llc_api_tx_register_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llc_int_handlers.o(i.llc_api_tx_register_callback))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;palBbBleTxCancel
</UL>

<P><STRONG><a name="[503]"></a>llc_api_tx_start</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, llc_api_tx.o(i.llc_api_tx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llc_api_tx_start &rArr; dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalExitCs
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalEnterCs
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_set_gp_trigger_value
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_tx_copy_data
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_set_tx_trigger_value
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
</UL>

<P><STRONG><a name="[62d]"></a>llc_protocol_timer_setup</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, llc_api_timer.o(i.llc_protocol_timer_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_protocol_timer_setup &rArr; dbb_time_corr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_setup
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[80]"></a>main</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = main &rArr; LlInit &rArr; LlInitBbInit &rArr; BbInit &rArr; PalBbInit &rArr; llc_api_setup &rArr; dbb_prot_init &rArr; dbb_calibrate &rArr; full_calibration &rArr; create_ch_map &rArr; calib_amp &rArr; amp_bin_search &rArr; meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsEnterMainLoop
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapGetFreeStartAddress
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapCountAvailable
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapAlloc
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoUartInit
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StackInitDatc
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCfgLoadData
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbLoadCfg
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_RegisterCallback
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_TMR_Delay
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlSetBdAddr
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathSetSeed
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlInit
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetDefaultRunTimeCfg
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlGetBdAddr
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTerminalInit
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainWsfInit
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5d4]"></a>meas_amp</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, board_config.o(i.meas_amp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = meas_amp &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_capture
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_bin_search
</UL>

<P><STRONG><a name="[64c]"></a>meas_freq</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, board_config.o(i.meas_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = meas_freq &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_event_get_current_tstamp
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_capture2
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_delta_f
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[64f]"></a>pa_disable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, board_config.o(i.pa_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pa_disable &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[64d]"></a>pa_enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, board_config.o(i.pa_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pa_enable &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_get_rfpower
</UL>
<BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[50f]"></a>palCfgGetBlePhyFeatures</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pal_cfg.o(i.palCfgGetBlePhyFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = palCfgGetBlePhyFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCfgLoadData
</UL>

<P><STRONG><a name="[50e]"></a>palCfgLoadBdAddress</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, pal_cfg.o(i.palCfgLoadBdAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = palCfgLoadBdAddress &rArr; MXC_SYS_GetUSN &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCfgLoadData
</UL>

<P><STRONG><a name="[511]"></a>palCfgLoadExtMac154Address</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, pal_cfg.o(i.palCfgLoadExtMac154Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = palCfgLoadExtMac154Address &rArr; MXC_SYS_GetUSN &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_GetUSN
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCfgLoadData
</UL>

<P><STRONG><a name="[510]"></a>palCfgLoadLlParams</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, pal_cfg.o(i.palCfgLoadLlParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = palCfgLoadLlParams
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCfgLoadData
</UL>

<P><STRONG><a name="[d2]"></a>palUartCallback</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, pal_uart.o(i.palUartCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = palUartCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> pal_uart.o(i.PalUartReadData)
<LI> pal_uart.o(i.PalUartWriteData)
</UL>
<P><STRONG><a name="[66c]"></a>pan2g_trx_get_phy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pan2g_config.o(i.pan2g_trx_get_phy))
<BR><BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_time_corr
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update_channel_tx
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_rx_info
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_get_phy
</UL>

<P><STRONG><a name="[677]"></a>pan2g_trx_reset_phy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pan2g_config.o(i.pan2g_trx_reset_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s8
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_set_phy
</UL>

<P><STRONG><a name="[67a]"></a>pan2g_trx_set_phy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pan2g_config.o(i.pan2g_trx_set_phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_reset_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_set_phy
</UL>

<P><STRONG><a name="[6aa]"></a>restore_afe</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, board_config.o(i.restore_afe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = restore_afe &rArr; dbb_spim_write_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write_fast
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_pmu_rffe_ifc
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration_restore
</UL>

<P><STRONG><a name="[675]"></a>rffe_startup</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, rffe_config.o(i.rffe_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rffe_startup &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_prot_init
</UL>

<P><STRONG><a name="[6a9]"></a>save_afe</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, board_config.o(i.save_afe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = save_afe &rArr; dbb_spim_read
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
</UL>

<P><STRONG><a name="[542]"></a>schRemoveHead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sch_list.o(i.schRemoveHead))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandler
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[566]"></a>schRmIntCalculateDepth</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sch_rm.o(i.schRmIntCalculateDepth))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = schRmIntCalculateDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmGetFirstAnchor
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmCheckConflict
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntRemoveRmOffset
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntIncOffsetDepth
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
</UL>

<P><STRONG><a name="[7ef]"></a>schRmSortListDescending</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, sch_rm.o(i.schRmSortListDescending))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = schRmSortListDescending
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmSelectPreferredIntervalUsec
</UL>

<P><STRONG><a name="[7e9]"></a>schTryCurTailLoadNext</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sch_main.o(i.schTryCurTailLoadNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schTryCurTailLoadNext &rArr; schLoadBod &rArr; BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbCancelBod
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodCurtailHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
</UL>

<P><STRONG><a name="[7e8]"></a>schTryLoadHead</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sch_main.o(i.schTryLoadHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = schTryLoadHead &rArr; schLoadBod &rArr; BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schLoadBod
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
</UL>

<P><STRONG><a name="[5ce]"></a>set_agc_default_gains</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, agc_control.o(i.set_agc_default_gains))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_setup
</UL>

<P><STRONG><a name="[5cf]"></a>set_agc_highspeed_gains</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, agc_control.o(i.set_agc_highspeed_gains))
<BR><BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_setup
</UL>

<P><STRONG><a name="[6a7]"></a>set_ch</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, board_config.o(i.set_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_ch &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>
<BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_calibration
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_gain_cal_ch
</UL>

<P><STRONG><a name="[5cd]"></a>set_ddc_active</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ble_rx_setup.o(i.set_ddc_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_ddc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rx_init
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_init
</UL>

<P><STRONG><a name="[5cc]"></a>set_ddc_transparent</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, ble_rx_setup.o(i.set_ddc_transparent))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_init
</UL>

<P><STRONG><a name="[176]"></a>smpActAttemptRcvd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smp_act.o(i.smpActAttemptRcvd))
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>smpActCheckAttempts</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smp_act.o(i.smpActCheckAttempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpActCheckAttempts &rArr; smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActNotifyDmAttemptsFailure
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>smpActCleanup</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, smp_act.o(i.smpActCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smpActCleanup &rArr; smpCleanup &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>smpActMaxAttempts</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, smp_act.o(i.smpActMaxAttempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = smpActMaxAttempts &rArr; smpActPairingCancel &rArr; smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCancel
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbMaxAttemptReached
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>smpActNone</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smp_act.o(i.smpActNone))
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>smpActNotifyDmAttemptsFailure</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smp_act.o(i.smpActNotifyDmAttemptsFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpActNotifyDmAttemptsFailure &rArr; DmSmpCbackExec
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActCheckAttempts
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>smpActNotifyDmRspToFailure</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smp_act.o(i.smpActNotifyDmRspToFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpActNotifyDmRspToFailure &rArr; DmSmpCbackExec
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>smpActPairCnfCalc1</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairCnfCalc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = smpActPairCnfCalc1 &rArr; smpCalcC1Part1 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActStorePin
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>smpActPairCnfCalc2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairCnfCalc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = smpActPairCnfCalc2 &rArr; smpCalcC1Part2 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>smpActPairCnfVerCalc1</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairCnfVerCalc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = smpActPairCnfVerCalc1 &rArr; smpCalcC1Part1 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>smpActPairCnfVerCalc2</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairCnfVerCalc2))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = smpActPairCnfVerCalc2 &rArr; smpCalcC1Part2 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>smpActPairingCancel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairingCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpActPairingCancel &rArr; smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingFailed
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActMaxAttempts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>smpActPairingCmpl</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, smp_act.o(i.smpActPairingCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smpActPairingCmpl &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>smpActPairingFailed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smp_act.o(i.smpActPairingFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smpActPairingFailed &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCancel
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPairingFailed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>smpActSendPairCnf</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, smp_act.o(i.smpActSendPairCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpActSendPairCnf &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[7f4]"></a>smpActStorePin</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smp_act.o(i.smpActStorePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpActStorePin &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfCalc1
</UL>

<P><STRONG><a name="[df]"></a>smpAuthReq</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, smp_act.o(i.smpAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpAuthReq &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sm.o(i.SmpiInit)
</UL>
<P><STRONG><a name="[7f5]"></a>smpCalcC1Part1</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, smp_main.o(i.smpCalcC1Part1))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = smpCalcC1Part1 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerRpa
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddrType
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnLocalRpa
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnLocalAddrType
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfVerCalc1
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfCalc1
</UL>

<P><STRONG><a name="[7f6]"></a>smpCalcC1Part2</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, smp_main.o(i.smpCalcC1Part2))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = smpCalcC1Part2 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerRpa
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddr
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnLocalRpa
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnLocalAddr
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfVerCalc2
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairCnfCalc2
</UL>

<P><STRONG><a name="[7fe]"></a>smpCalcS1</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, smp_main.o(i.smpCalcS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = smpCalcS1 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy64
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActCnfVerify
</UL>

<P><STRONG><a name="[580]"></a>smpCcbByConnId</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smp_main.o(i.smpCcbByConnId))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScSetOobCfg
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmLescEnabled
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmGetStk
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResumeAttemptsState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cCtrlCback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
</UL>

<P><STRONG><a name="[800]"></a>smpCcbByHandle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, smp_main.o(i.smpCcbByHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smpCcbByHandle &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cDataCback
</UL>

<P><STRONG><a name="[7f3]"></a>smpCleanup</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smp_act.o(i.smpCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smpCleanup &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingFailed
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCmpl
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActCleanup
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActCheckAttempts
</UL>

<P><STRONG><a name="[803]"></a>smpGenerateLtk</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smp_main.o(i.smpGenerateLtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpGenerateLtk &rArr; SecRand &rArr; HciLeRandCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[813]"></a>smpGetPkBit</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, smp_sc_main.o(i.smpGetPkBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smpGetPkBit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
</UL>

<P><STRONG><a name="[581]"></a>smpGetScSecLevel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, smp_main.o(i.smpGetScSecLevel))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDmGetStk
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[58c]"></a>smpLogByteArray</STRONG> (Thumb, 236 bytes, Stack size 544 bytes, smp_sc_main.o(i.smpLogByteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScSetOobCfg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkSendCnf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCheck
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCalcCa
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobSendRand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSetup
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSendRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcG2
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckSend
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncDisplay
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcF4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[7f8]"></a>smpMsgAlloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smp_main.o(i.smpMsgAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smpMsgAlloc &rArr; WsfMsgDataAlloc &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDataAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActSendPairCnf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcPairCnf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActPairReq
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkSendKeypress
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[de]"></a>smpProcPairing</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, smp_act.o(i.smpProcPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smpProcPairing &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sm.o(i.SmpiInit)
</UL>
<P><STRONG><a name="[805]"></a>smpProcRcvKey</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, smp_act.o(i.smpProcRcvKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = smpProcRcvKey &rArr; Calc128Cpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActRcvKey
</UL>

<P><STRONG><a name="[806]"></a>smpScActAuthSelect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActAuthSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpScActAuthSelect &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActAuthSelect
</UL>

<P><STRONG><a name="[19a]"></a>smpScActCalcF5Ltk</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, smp_sc_act.o(i.smpScActCalcF5Ltk))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = smpScActCalcF5Ltk &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>smpScActCalcF5MacKey</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, smp_sc_act.o(i.smpScActCalcF5MacKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = smpScActCalcF5MacKey &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>smpScActCalcF5TKey</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, smp_sc_act.o(i.smpScActCalcF5TKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = smpScActCalcF5TKey &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>smpScActCalcSharedSecret</STRONG> (Thumb, 88 bytes, Stack size 112 bytes, smp_sc_act.o(i.smpScActCalcSharedSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = smpScActCalcSharedSecret &rArr; SecEccGenSharedSecret &rArr; HciLeGenerateDHKey &rArr; LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecEccGenSharedSecret
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobProcRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>smpScActCleanup</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smp_sc_act.o(i.smpScActCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpScActCleanup &rArr; smpActCleanup &rArr; smpCleanup &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActCleanup
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScFreeScratchBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPairingFailed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>smpScActDHKeyCalcF6Ea</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActDHKeyCalcF6Ea))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = smpScActDHKeyCalcF6Ea &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>smpScActDHKeyCalcF6Eb</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActDHKeyCalcF6Eb))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = smpScActDHKeyCalcF6Eb &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatResponderBdAddr
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScCatInitiatorBdAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[809]"></a>smpScActJwncCalcF4</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActJwncCalcF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = smpScActJwncCalcF4 &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcF4
</UL>

<P><STRONG><a name="[80a]"></a>smpScActJwncCalcG2</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActJwncCalcG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = smpScActJwncCalcG2 &rArr; SmpScCmac &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCat128
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcG2
</UL>

<P><STRONG><a name="[18b]"></a>smpScActJwncDisplay</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, smp_sc_act.o(i.smpScActJwncDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = smpScActJwncDisplay &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>smpScActPairingCancel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smp_sc_act.o(i.smpScActPairingCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpScActPairingCancel &rArr; smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPairingFailed
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>smpScActPairingFailed</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smp_sc_act.o(i.smpScActPairingFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpScActPairingFailed &rArr; smpActPairingFailed &rArr; DmConnSetIdle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingFailed
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPairingCancel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>smpScActPkKeypress</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, smp_sc_act.o(i.smpScActPkKeypress))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smpScActPkKeypress &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>smpScActPkSendKeypress</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, smp_sc_act.o(i.smpScActPkSendKeypress))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpScActPkSendKeypress &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>smpScActPkSetup</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, smp_sc_act.o(i.smpScActPkSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpScActPkSetup &rArr; DmSmpCbackExec
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>smpScAuthReq</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, smp_sc_act.o(i.smpScAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpScAuthReq &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_sc_main.o(i.SmpScInit)
</UL>
<P><STRONG><a name="[80b]"></a>smpScFailWithReattempt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, smp_sc_main.o(i.smpScFailWithReattempt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = smpScFailWithReattempt &rArr; SmpScGetCancelMsgWithReattempt &rArr; SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScGetCancelMsgWithReattempt
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCheck
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobSendRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncCalcG2
</UL>

<P><STRONG><a name="[dc]"></a>smpScProcPairing</STRONG> (Thumb, 788 bytes, Stack size 32 bytes, smp_sc_act.o(i.smpScProcPairing))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smpScProcPairing &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetEccKey
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAllocScratchBuffers
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_sc_main.o(i.SmpScInit)
</UL>
<P><STRONG><a name="[80d]"></a>smpScSendDHKeyCheck</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, smp_sc_main.o(i.smpScSendDHKeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpScSendDHKeyCheck &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckSend
</UL>

<P><STRONG><a name="[80e]"></a>smpScSendPairCnf</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, smp_sc_main.o(i.smpScSendPairCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpScSendPairCnf &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkSendCnf
</UL>

<P><STRONG><a name="[80f]"></a>smpScSendPubKey</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, smp_sc_main.o(i.smpScSendPubKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpScSendPubKey &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActSendPubKey
</UL>

<P><STRONG><a name="[810]"></a>smpScSendRand</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, smp_sc_main.o(i.smpScSendRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpScSendRand &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkSendRand
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobSendRand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActJwncSendRand
</UL>

<P><STRONG><a name="[811]"></a>smpSendKey</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, smp_act.o(i.smpSendKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = smpSendKey &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetBdAddr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalCsrk
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGetScSecLevel
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGenerateLtk
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActSendKey
</UL>

<P><STRONG><a name="[7f2]"></a>smpSendPairingFailed</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, smp_act.o(i.smpSendPairingFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActPairingCancel
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActCheckAttempts
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActCheckSecurityReq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPairingCancel
</UL>

<P><STRONG><a name="[7f9]"></a>smpSendPkt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smp_main.o(i.smpSendPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDataReq
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActSendPairCnf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcPairCnf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActPairReq
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkSendKeypress
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cCtrlCback
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>

<P><STRONG><a name="[583]"></a>smpSmExecute</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, smp_act.o(i.smpSmExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpHandler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActPkCheck
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActOobCalcCb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiScActDHKeyCheckVerify
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActSetupKeyDist
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActSendKey
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActRcvKey
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcPairRsp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActCnfVerify
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScFailWithReattempt
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCmac
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScAlloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScProcPairing
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScAuthReq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkSendKeypress
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkKeypress
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncDisplay
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcSharedSecret
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5TKey
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActAuthSelect
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcS1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cDataCback
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cCtrlCback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part2
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcC1Part1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcPairing
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAuthReq
</UL>

<P><STRONG><a name="[7f7]"></a>smpStartRspTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, smp_act.o(i.smpStartRspTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpStartRspTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpActSendPairCnf
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActSetupKeyDist
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActProcPairCnf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpiActPairReq
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActPkSendKeypress
</UL>

<P><STRONG><a name="[804]"></a>smpStateIdle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smp_main.o(i.smpStateIdle))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpL2cCtrlCback
</UL>

<P><STRONG><a name="[17c]"></a>smpiActCheckSecurityReq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, smpi_act.o(i.smpiActCheckSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpiActCheckSecurityReq &rArr; smpSendPairingFailed &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPairingFailed
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>smpiActCnfVerify</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, smpi_act.o(i.smpiActCnfVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = smpiActCnfVerify &rArr; smpCalcS1 &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCalcS1
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbPairingFailed
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>smpiActPairReq</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, smpi_act.o(i.smpiActPairReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpiActPairReq &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetIdle
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>smpiActProcPairCnf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, smpi_act.o(i.smpiActProcPairCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = smpiActProcPairCnf &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpMsgAlloc
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>smpiActProcPairRsp</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, smpi_act.o(i.smpiActProcPairRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpiActProcPairRsp &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>smpiActProcSecurityReq</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, smpi_act.o(i.smpiActProcSecurityReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smpiActProcSecurityReq &rArr; DmSmpCbackExec
</UL>
<BR>[Calls]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpCbackExec
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>smpiActRcvKey</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smpi_act.o(i.smpiActRcvKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smpiActRcvKey &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpProcRcvKey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>smpiActSendKey</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smpi_act.o(i.smpiActSendKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = smpiActSendKey &rArr; smpSendKey &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendKey
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>smpiActSetupKeyDist</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, smpi_act.o(i.smpiActSetupKeyDist))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smpiActSetupKeyDist &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStartRspTimer
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>smpiActStkEncrypt</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, smpi_act.o(i.smpiActStkEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smpiActStkEncrypt &rArr; DmSmpEncryptReq &rArr; HciLeStartEncryptionCmd &rArr; LlStartEncryption &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpEncryptReq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> smpi_sc_sm.o(.constdata)
<LI> smpi_sm.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>smpiScActAuthSelect</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActAuthSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpiScActAuthSelect &rArr; smpScActAuthSelect &rArr; smpSmExecute &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActAuthSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>smpiScActDHKeyCheckSend</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActDHKeyCheckSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActDHKeyCheckSend &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendDHKeyCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>smpiScActDHKeyCheckVerify</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, smpi_sc_act.o(i.smpiScActDHKeyCheckVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = smpiScActDHKeyCheckVerify &rArr; SmpDbPairingFailed &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSmpEncryptReq
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbPairingFailed
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGetScSecLevel
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>smpiScActJwncCalcF4</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActJwncCalcF4))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = smpiScActJwncCalcF4 &rArr; smpScActJwncCalcF4 &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcF4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>smpiScActJwncCalcG2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActJwncCalcG2))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActJwncCalcG2 &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScFailWithReattempt
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActJwncCalcG2
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>smpiScActJwncSendRand</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActJwncSendRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActJwncSendRand &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>smpiScActJwncSetup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActJwncSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActJwncSetup &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>smpiScActOobCalcCb</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, smpi_sc_act.o(i.smpiScActOobCalcCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = smpiScActOobCalcCb &rArr; SmpScCalcF4 &rArr; SmpScCmac &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>smpiScActOobProcRand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActOobProcRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = smpiScActOobProcRand &rArr; smpScActCalcSharedSecret &rArr; SecEccGenSharedSecret &rArr; HciLeGenerateDHKey &rArr; LlGenerateDhKey &rArr; LctrGenerateDhKey &rArr; lctrValidatePublicKey &rArr; uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcSharedSecret
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>smpiScActOobSendRand</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActOobSendRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActOobSendRand &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScFailWithReattempt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>smpiScActPkCalcCa</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, smpi_sc_act.o(i.smpiScActPkCalcCa))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = smpiScActPkCalcCa &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGetPkBit
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>smpiScActPkCalcCb</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, smpi_sc_act.o(i.smpiScActPkCalcCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = smpiScActPkCalcCb &rArr; SmpScCalcF4 &rArr; SmpScCmac &rArr; SecCmac &rArr; secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpGetPkBit
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpScCalcF4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>smpiScActPkCheck</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActPkCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActPkCheck &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScFailWithReattempt
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>smpiScActPkSendCnf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActPkSendCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = smpiScActPkSendCnf &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpLogByteArray
<LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPairCnf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>smpiScActPkSendRand</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActPkSendRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpiScActPkSendRand &rArr; smpScSendRand &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendRand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>smpiScActSendPubKey</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smpi_sc_act.o(i.smpiScActSendPubKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = smpiScActSendPubKey &rArr; smpScSendPubKey &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScSendPubKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpi_sc_sm.o(.constdata)
</UL>
<P><STRONG><a name="[748]"></a>uECC_make_key_complete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uecc_ll.o(i.uECC_make_key_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uECC_make_key_complete &rArr; vli_nativeToBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairComplete
</UL>

<P><STRONG><a name="[74a]"></a>uECC_make_key_continue</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, uecc_ll.o(i.uECC_make_key_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = uECC_make_key_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairContinue
</UL>

<P><STRONG><a name="[74b]"></a>uECC_make_key_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uecc_ll.o(i.uECC_make_key_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_make_key_start &rArr; vli_bytesToNative
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_bytesToNative
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256PublicKeyStart
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairStart
</UL>

<P><STRONG><a name="[744]"></a>uECC_set_rng_ll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uecc_ll.o(i.uECC_set_rng_ll))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256PublicKeyStart
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairStart
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyStart
</UL>

<P><STRONG><a name="[73e]"></a>uECC_shared_secret_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uecc_ll.o(i.uECC_shared_secret_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_shared_secret_complete &rArr; vli_nativeToBytes
</UL>
<BR>[Calls]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyComplete
</UL>

<P><STRONG><a name="[741]"></a>uECC_shared_secret_continue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uecc_ll.o(i.uECC_shared_secret_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = uECC_shared_secret_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyContinue
</UL>

<P><STRONG><a name="[745]"></a>uECC_shared_secret_start</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, uecc_ll.o(i.uECC_shared_secret_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uECC_shared_secret_start &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_bytesToNative
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyStart
</UL>

<P><STRONG><a name="[7cc]"></a>uECC_valid_public_key_ll</STRONG> (Thumb, 100 bytes, Stack size 136 bytes, uecc_ll.o(i.uECC_valid_public_key_ll))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = uECC_valid_public_key_ll &rArr; curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_bytesToNative
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidatePublicKey
</UL>

<P><STRONG><a name="[5b4]"></a>wsfOsDispatcher</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, wsf_os.o(i.wsfOsDispatcher))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wsfOsDispatcher &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerServiceExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsEnterMainLoop
</UL>

<P><STRONG><a name="[5bf]"></a>wsfOsReadyToSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wsf_os.o(i.wsfOsReadyToSleep))
<BR><BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[5c4]"></a>wsfTraceOverFlowMessage</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wsf_trace.o(i.wsfTraceOverFlowMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVsn
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7de]"></a>mainWsfInit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.mainWsfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mainWsfInit &rArr; WsfBufInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTraceRegisterHandler
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTraceEnable
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerInit
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfOsInit
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfHeapAlloc
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>datcAttCback</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, datc_main.o(i.datcAttCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = datcAttCback &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datc_main.o(i.DatcStart)
</UL>
<P><STRONG><a name="[a0]"></a>datcBtnCback</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, datc_main.o(i.datcBtnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = datcBtnCback &rArr; AppDbNvmDeleteAll &rArr; WsfNvmEraseData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvcCoreGapAddRpaoCh
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevSetFilterPolicy
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmDevPrivStart
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmDeleteAll
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnOpenList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnClose
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppClearAllBondingInfo
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datc_main.o(i.DatcStart)
</UL>
<P><STRONG><a name="[654]"></a>datcClose</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, datc_main.o(i.datcClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = datcClose &rArr; AppScanStart &rArr; appMasterScanMode &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[a1]"></a>datcDiscCback</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, datc_main.o(i.datcDiscCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = datcDiscCback &rArr; datcDiscGapCmpl &rArr; AppDbNvmStorePeerRpao &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WpcP1Discover
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattDiscover
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapDiscover
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetDataLen
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecurityReq
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscSetHdlList
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscReadDatabaseHash
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscConfigure
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscComplete
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreHdlList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreCacheByHash
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnClose
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscGapCmpl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datc_main.o(i.DatcStart)
</UL>
<P><STRONG><a name="[656]"></a>datcDiscGapCmpl</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, datc_main.o(i.datcDiscGapCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = datcDiscGapCmpl &rArr; AppDbNvmStorePeerRpao &rArr; WsfNvmWriteData &rArr; PalFlashWrite &rArr; MXC_FLC_Write &rArr; MXC_FLC_Com_Write &rArr; MXC_FLC_Write32 &rArr; MXC_FLC_ME17_Write32 &rArr; MXC_FLC_RevB_Write32 &rArr; MXC_FLC_RevA_Write32 &rArr; MXC_FLC_Write128 &rArr; MXC_FLC_ME17_Write128 &rArr; MXC_FLC_RevB_Write128 &rArr; MXC_FLC_RevA_Write128 &rArr; MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerRpao
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStorePeerRpao
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcDiscCback
</UL>

<P><STRONG><a name="[9e]"></a>datcDmCback</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, datc_main.o(i.datcDmCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = datcDmCback &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufAlloc
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSizeOfEvt
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetEccKey
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> datc_main.o(i.DatcStart)
</UL>
<P><STRONG><a name="[31e]"></a>datcInitSvcHdlList</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, datc_main.o(i.datcInitSvcHdlList))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcStart
</UL>

<P><STRONG><a name="[660]"></a>datcOpen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datc_main.o(i.datcOpen))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[659]"></a>datcPrivAddDevToResListInd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, datc_main.o(i.datcPrivAddDevToResListInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = datcPrivAddDevToResListInd &rArr; AppAddNextDevToResList &rArr; DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[318]"></a>datcProcMsg</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, datc_main.o(i.datcProcMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = datcProcMsg &rArr; DmSecSetOob &rArr; SmpScSetOobCfg &rArr; smpLogByteArray &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecSetOob
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGenerateEccKeyReq
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCalculateDbHash
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiAction
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandlePasskey
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandleNumericComparison
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreBond
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmReadAll
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimerHandler
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcValueNtf
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSetup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanStop
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanStart
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcScanReport
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcRestoreResolvingList
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcPrivAddDevToResListInd
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcOpen
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcClose
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatcHandler
</UL>

<P><STRONG><a name="[65c]"></a>datcRestoreResolvingList</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, datc_main.o(i.datcRestoreResolvingList))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = datcRestoreResolvingList &rArr; AppAddNextDevToResList &rArr; DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddNextDevToResList
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[65f]"></a>datcScanReport</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, datc_main.o(i.datcScanReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = datcScanReport &rArr; AppScanStop &rArr; appMasterScanMode &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHostAddrType
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmFindAdType
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStop
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbFindByAddr
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[65d]"></a>datcScanStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, datc_main.o(i.datcScanStart))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[65e]"></a>datcScanStop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, datc_main.o(i.datcScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = datcScanStop &rArr; AppConnOpen &rArr; appConnOpen &rArr; DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnOpen
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[652]"></a>datcSendData</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, datc_main.o(i.datcSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = datcSendData &rArr; AttcWriteCmd &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimerHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcBtnCback
</UL>

<P><STRONG><a name="[65a]"></a>datcSetup</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, datc_main.o(i.datcSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = datcSetup &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetConnSpec
</UL>
<BR>[Called By]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcRestoreResolvingList
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcPrivAddDevToResListInd
</UL>

<P><STRONG><a name="[65b]"></a>datcValueNtf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, datc_main.o(i.datcValueNtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = datcValueNtf &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[661]"></a>testTimerHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, datc_main.o(i.testTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = testTimerHandler &rArr; datcSendData &rArr; AttcWriteCmd &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datcProcMsg
</UL>

<P><STRONG><a name="[6ab]"></a>hciCoreCisAlloc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreCisAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hciCoreCisAlloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisOpen
</UL>

<P><STRONG><a name="[6ad]"></a>hciCoreCisFree</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreCisFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hciCoreCisFree &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreCisClose
</UL>

<P><STRONG><a name="[6af]"></a>hciCoreConnAlloc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreConnAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hciCoreConnAlloc &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnOpen
</UL>

<P><STRONG><a name="[6b1]"></a>hciCoreConnFree</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hci_core.o(i.hciCoreConnFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = hciCoreConnFree &rArr; hciCoreTxReady &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxReady
</UL>
<BR>[Called By]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreConnClose
</UL>

<P><STRONG><a name="[6bd]"></a>hciCoreNextConnFragment</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hci_core.o(i.hciCoreNextConnFragment))
<BR><BR>[Called By]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciCoreTxAclContinue
</UL>

<P><STRONG><a name="[6be]"></a>hciEvtProcessIntEvt</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, hci_evt.o(i.hciEvtProcessIntEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hciEvtProcessIntEvt &rArr; HciLeRandCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeRandCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciEvtProcessMsg
</UL>

<P><STRONG><a name="[569]"></a>getNextToken</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sec_aes.o(i.getNextToken))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
</UL>

<P><STRONG><a name="[56d]"></a>secCmacComplete</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sec_cmac_hci.o(i.secCmacComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = secCmacComplete &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmacHciCback
</UL>

<P><STRONG><a name="[56a]"></a>secCmacGenSubkey1</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sec_cmac_hci.o(i.secCmacGenSubkey1))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = secCmacGenSubkey1 &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLeEncryptCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmac
</UL>

<P><STRONG><a name="[56b]"></a>secCmacGenSubkey2</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sec_cmac_hci.o(i.secCmacGenSubkey2))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = secCmacGenSubkey2 &rArr; secCmacProcessBlock &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacProcessBlock
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacKeyShift
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmacHciCback
</UL>

<P><STRONG><a name="[7f0]"></a>secCmacKeyShift</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sec_cmac_hci.o(i.secCmacKeyShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = secCmacKeyShift
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey2
</UL>

<P><STRONG><a name="[56c]"></a>secCmacProcessBlock</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, sec_cmac_hci.o(i.secCmacProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = secCmacProcessBlock &rArr; SecLeEncryptCmd &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Cpy
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc128Xor
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecLeEncryptCmd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecCmacHciCback
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secCmacGenSubkey2
</UL>

<P><STRONG><a name="[d8]"></a>secHciCback</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, sec_main.o(i.secHciCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = secHciCback &rArr; WsfMsgDeq &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgDeq
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sec_main.o(i.SecInit)
</UL>
<P><STRONG><a name="[89]"></a>attDmConnCback</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, att_main.o(i.attDmConnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = attDmConnCback &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attCcbByConnId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_main.o(i.AttHandlerInit)
</UL>
<P><STRONG><a name="[87]"></a>attL2cCtrlCback</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, att_main.o(i.attL2cCtrlCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attL2cCtrlCback
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attCcbByConnId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_main.o(i.AttHandlerInit)
</UL>
<P><STRONG><a name="[88]"></a>attL2cDataCback</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, att_main.o(i.attL2cDataCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = attL2cDataCback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att_main.o(i.AttHandlerInit)
</UL>
<P><STRONG><a name="[2b3]"></a>attcDiscConfigNext</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, attc_disc.o(i.attcDiscConfigNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = attcDiscConfigNext &rArr; AttcWriteReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcWriteReq
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcReadReq
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigStart
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigResume
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigCmpl
</UL>

<P><STRONG><a name="[5ec]"></a>attcDiscDescriptors</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, attc_disc.o(i.attcDiscDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = attcDiscDescriptors &rArr; AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcFindInfoReq
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDesc
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcChar
</UL>

<P><STRONG><a name="[2b1]"></a>attcDiscProcChar</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, attc_disc.o(i.attcDiscProcChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = attcDiscProcChar &rArr; attcDiscDescriptors &rArr; AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcCharDecl
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharCmpl
</UL>

<P><STRONG><a name="[5ee]"></a>attcDiscProcCharDecl</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, attc_disc.o(i.attcDiscProcCharDecl))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attcDiscProcCharDecl &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcUuidCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcChar
</UL>

<P><STRONG><a name="[2b2]"></a>attcDiscProcDesc</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, attc_disc.o(i.attcDiscProcDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = attcDiscProcDesc &rArr; attcDiscDescriptors &rArr; AttcFindInfoReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDescPair
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscCharCmpl
</UL>

<P><STRONG><a name="[5f0]"></a>attcDiscProcDescPair</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, attc_disc.o(i.attcDiscProcDescPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attcDiscProcDescPair &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcUuidCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDesc
</UL>

<P><STRONG><a name="[5ed]"></a>attcDiscVerify</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, attc_disc.o(i.attcDiscVerify))
<BR><BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscDescriptors
</UL>

<P><STRONG><a name="[5ef]"></a>attcUuidCmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, attc_disc.o(i.attcUuidCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attcUuidCmp &rArr; attUuidCmp16to128 &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attUuidCmp16to128
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcDescPair
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcDiscProcCharDecl
</UL>

<P><STRONG><a name="[11f]"></a>attcConnCback</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, attc_main.o(i.attcConnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = attcConnCback &rArr; AttcMtuReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciGetMaxRxAclLen
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcWriteCmdCallback
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcMtuReq
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>attcCtrlCback</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, attc_main.o(i.attcCtrlCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = attcCtrlCback &rArr; AttcIndConfirm &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcWriteCmdCallback
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByConnId
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcIndConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>attcDataCback</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, attc_main.o(i.attcDataCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = attcDataCback &rArr; attcProcInd &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcRsp
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcMultiVarNtf
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcProcInd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcCcbByHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>attcSendContinuingReq</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, attc_main.o(i.attcSendContinuingReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = attcSendContinuingReq &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>attcSendMtuReq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, attc_main.o(i.attcSendMtuReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = attcSendMtuReq &rArr; attcSendSimpleReq &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcFreePkt
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendSimpleReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>attcSendPrepWriteReq</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, attc_main.o(i.attcSendPrepWriteReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = attcSendPrepWriteReq &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgAlloc
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcReqClear
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>attcSendSimpleReq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, attc_main.o(i.attcSendSimpleReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = attcSendSimpleReq &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendWriteCmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendMtuReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>attcSendWriteCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, attc_main.o(i.attcSendWriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = attcSendWriteCmd &rArr; attcSendSimpleReq &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcExecCallback
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSetPendWriteCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendSimpleReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc_main.o(.constdata)
</UL>
<P><STRONG><a name="[5f6]"></a>attcSetPendWriteCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, attc_main.o(i.attcSetPendWriteCmd))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attcSendWriteCmd
</UL>

<P><STRONG><a name="[2ca]"></a>attsCccGetTbl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atts_ccc.o(i.attsCccGetTbl))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttsCccGet
</UL>

<P><STRONG><a name="[5fe]"></a>attsExecCallback</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, atts_ind.o(i.attsExecCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = attsExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attExecCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcValueCnf
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndNtfCallback
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsHandleValueIndNtf
</UL>

<P><STRONG><a name="[130]"></a>attsIndConnCback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, atts_ind.o(i.attsIndConnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attsIndConnCback &rArr; attsIndNtfCallback &rArr; attsExecCallback &rArr; attExecCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndNtfCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_ind.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>attsIndCtrlCback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, atts_ind.o(i.attsIndCtrlCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = attsIndCtrlCback &rArr; attsCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndNtfCallback
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByConnId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_ind.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>attsIndMsgCback</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, atts_ind.o(i.attsIndMsgCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = attsIndMsgCback &rArr; attsSetupMsg &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attDecodeMsgParam
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsPendIndNtfHandle
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByConnId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_ind.o(.constdata)
</UL>
<P><STRONG><a name="[605]"></a>attsPendIndNtfHandle</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, atts_ind.o(i.attsPendIndNtfHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attsPendIndNtfHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
</UL>

<P><STRONG><a name="[610]"></a>attsSetPendNtfHandle</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, atts_ind.o(i.attsSetPendNtfHandle))
<BR><BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetupMsg
</UL>

<P><STRONG><a name="[606]"></a>attsSetupMsg</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, atts_ind.o(i.attsSetupMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = attsSetupMsg &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attMsgParam
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attL2cDataReq
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attExecCallback
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsSetPendNtfHandle
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsExecCallback
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsIndMsgCback
</UL>

<P><STRONG><a name="[134]"></a>attsConnCback</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, atts_main.o(i.attsConnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attsConnCback &rArr; WsfTimerStop &rArr; wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnCheckIdle
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsClearPrepWrites
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>attsDataCback</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, atts_main.o(i.attsDataCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = attsDataCback &rArr; attsErrRsp &rArr; attL2cDataReq &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsErrRsp
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCsfActClientState
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsCcbByHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>attsL2cCtrlCback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, atts_main.o(i.attsL2cCtrlCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = attsL2cCtrlCback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts_main.o(.constdata)
</UL>
<P><STRONG><a name="[5ff]"></a>attsExecPrepWrite</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, atts_write.o(i.attsExecPrepWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attsExecPrepWrite &rArr; attsFindByHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsFindByHandle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attsProcExecWriteReq
</UL>

<P><STRONG><a name="[68a]"></a>dmConn2ActAuthToExpired</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dm_conn.o(i.dmConn2ActAuthToExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmConn2ActAuthToExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[688]"></a>dmConn2ActDataLenChange</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, dm_conn.o(i.dmConn2ActDataLenChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dmConn2ActDataLenChange
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[68b]"></a>dmConn2ActReadRemoteFeaturesCmpl</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, dm_conn.o(i.dmConn2ActReadRemoteFeaturesCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dmConn2ActReadRemoteFeaturesCmpl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[68c]"></a>dmConn2ActReadRemoteVerInfoCmpl</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, dm_conn.o(i.dmConn2ActReadRemoteVerInfoCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dmConn2ActReadRemoteVerInfoCmpl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[687]"></a>dmConn2ActRemoteConnParamReq</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, dm_conn.o(i.dmConn2ActRemoteConnParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dmConn2ActRemoteConnParamReq
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[68d]"></a>dmConn2ActReqPeerSca</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dm_conn.o(i.dmConn2ActReqPeerSca))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmConn2ActReqPeerSca
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[686]"></a>dmConn2ActRssiRead</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dm_conn.o(i.dmConn2ActRssiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmConn2ActRssiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[689]"></a>dmConn2ActWriteAuthToCmpl</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dm_conn.o(i.dmConn2ActWriteAuthToCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmConn2ActWriteAuthToCmpl
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConn2HciHandler
</UL>

<P><STRONG><a name="[691]"></a>dmConnCmplStates</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnCmplStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmConnCmplStates &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnHciHandler
</UL>

<P><STRONG><a name="[330]"></a>dmConnSetConnSpec</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dm_conn.o(i.dmConnSetConnSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dmConnSetConnSpec &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmInitPhyToIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSetConnSpec
</UL>

<P><STRONG><a name="[693]"></a>dmConnOpen</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dm_conn_master_leg.o(i.dmConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dmConnOpen &rArr; dmDevPassEvtToDevPriv &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeCreateConnCmd
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPassEvtToDevPriv
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmLlAddrType
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanPhyToIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnSmActOpen
</UL>

<P><STRONG><a name="[69c]"></a>dmDevHciEvtHwError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_dev.o(i.dmDevHciEvtHwError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmDevHciEvtHwError
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciHandler
</UL>

<P><STRONG><a name="[69a]"></a>dmDevHciEvtReset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm_dev.o(i.dmDevHciEvtReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmDevHciEvtReset
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciHandler
</UL>

<P><STRONG><a name="[69b]"></a>dmDevHciEvtVendorSpec</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dm_dev.o(i.dmDevHciEvtVendorSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmDevHciEvtVendorSpec
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevHciHandler
</UL>

<P><STRONG><a name="[6a1]"></a>dmDevPrivAddrCalc</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dm_dev_priv.o(i.dmDevPrivAddrCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dmDevPrivAddrCalc &rArr; SecAes &rArr; HciLeEncryptCmd &rArr; LlEncrypt &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecAes
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecRand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActTimeout
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
</UL>

<P><STRONG><a name="[69d]"></a>dmDevPrivAdvertising</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, dm_dev_priv.o(i.dmDevPrivAdvertising))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActAesCmpl
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivTimerStart
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetPendingRpa
</UL>

<P><STRONG><a name="[69f]"></a>dmDevPrivSetPendingRpa</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivSetPendingRpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dmDevPrivSetPendingRpa &rArr; dmDevPrivSetRpa &rArr; HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetRpa
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAdvertising
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActRpaStop
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActCtrl
</UL>

<P><STRONG><a name="[69e]"></a>dmDevPrivSetRpa</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dm_dev_priv.o(i.dmDevPrivSetRpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dmDevPrivSetRpa &rArr; HciLeSetRandAddrCmd &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetRandAddrCmd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActAesCmpl
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivSetPendingRpa
</UL>

<P><STRONG><a name="[6a0]"></a>dmDevPrivTimerStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dm_dev_priv.o(i.dmDevPrivTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dmDevPrivTimerStart &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivAdvertising
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActTimeout
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActStart
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmDevPrivActRpaStart
</UL>

<P><STRONG><a name="[a2]"></a>dmHciEvtCback</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dm_main.o(i.dmHciEvtCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmHciEvtCback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dm_main.o(i.DmHandlerInit)
</UL>
<P><STRONG><a name="[34b]"></a>dmScanPhyToIdx</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dm_main.o(i.dmScanPhyToIdx))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanPhyToIdx
</UL>

<P><STRONG><a name="[6a2]"></a>dmPrivSetAddrResEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dm_priv.o(i.dmPrivSetAddrResEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dmPrivSetAddrResEnable &rArr; HciLeSetAddrResolutionEnable &rArr; hciCoreEvtSendIntEvt &rArr; WsfMsgAlloc &rArr; WsfBufAlloc &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HciLeSetAddrResolutionEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivHciHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmPrivActSetAddrResEnable
</UL>

<P><STRONG><a name="[34d]"></a>dmScanSetInterval</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dm_scan.o(i.dmScanSetInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dmScanSetInterval &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanPhyToIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmScanSetInterval
</UL>

<P><STRONG><a name="[6a3]"></a>dmScanActHciReport</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dm_scan_leg.o(i.dmScanActHciReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dmScanActHciReport
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmFindAdType
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmScanHciHandler
</UL>

<P><STRONG><a name="[a5]"></a>l2cDefaultCtrlCback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2c_main.o(i.l2cDefaultCtrlCback))
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[a3]"></a>l2cDefaultDataCback</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, l2c_main.o(i.l2cDefaultDataCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = l2cDefaultDataCback &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[a6]"></a>l2cDefaultDataCidCback</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, l2c_main.o(i.l2cDefaultDataCidCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = l2cDefaultDataCidCback &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[a8]"></a>l2cHciAclCback</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, l2c_main.o(i.l2cHciAclCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = l2cHciAclCback &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[a7]"></a>l2cHciFlowCback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, l2c_main.o(i.l2cHciFlowCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = l2cHciFlowCback &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnIdByHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_main.o(i.L2cInit)
</UL>
<P><STRONG><a name="[a9]"></a>l2cMasterRxSignalingPkt</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, l2c_master.o(i.l2cMasterRxSignalingPkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = l2cMasterRxSignalingPkt &rArr; L2cDmConnUpdateRsp &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2cDmConnUpdateRsp
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmL2cConnUpdateInd
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cSendCmdReject
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2c_master.o(i.L2cMasterInit)
</UL>
<P><STRONG><a name="[801]"></a>smpDbAddDevice</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, smp_db.o(i.smpDbAddDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbRecordInUse
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
</UL>

<P><STRONG><a name="[574]"></a>smpDbGetRecord</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, smp_db.o(i.smpDbGetRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmHostAddrType
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddrType
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddr
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbRecordInUse
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbAddDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbSetFailureCount
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbPairingFailed
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetPairingDisabledTime
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetFailureCount
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbMaxAttemptReached
</UL>

<P><STRONG><a name="[57c]"></a>smpDbRecordInUse</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, smp_db.o(i.smpDbRecordInUse))
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbService
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbGetRecord
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDbAddDevice
</UL>

<P><STRONG><a name="[579]"></a>smpDbStartServiceTimer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, smp_db.o(i.smpDbStartServiceTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpDbStartServiceTimer &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbService
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbMaxAttemptReached
</UL>

<P><STRONG><a name="[db]"></a>smpDmConnCback</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, smp_main.o(i.smpDmConnCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = smpDmConnCback &rArr; smpResumeAttemptsState &rArr; SmpDbGetPairingDisabledTime &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgFree
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpResumeAttemptsState
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbSetFailureCount
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetFailureCount
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_main.o(i.SmpHandlerInit)
</UL>
<P><STRONG><a name="[d9]"></a>smpL2cCtrlCback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, smp_main.o(i.smpL2cCtrlCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = smpL2cCtrlCback &rArr; smpSendPkt &rArr; L2cDataReq &rArr; HciSendAclData &rArr; hciCoreTxAclStart &rArr; hciCoreTxAclContinue &rArr; hciCoreSendAclData &rArr; hciTrSendAclData &rArr; hciCoreTxAclComplete &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpStateIdle
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSendPkt
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_main.o(i.SmpHandlerInit)
</UL>
<P><STRONG><a name="[da]"></a>smpL2cDataCback</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, smp_main.o(i.smpL2cDataCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = smpL2cDataCback &rArr; smpCcbByHandle &rArr; DmConnIdByHandle &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByHandle
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpSmExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smp_main.o(i.SmpHandlerInit)
</UL>
<P><STRONG><a name="[802]"></a>smpResumeAttemptsState</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, smp_main.o(i.smpResumeAttemptsState))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smpResumeAttemptsState &rArr; SmpDbGetPairingDisabledTime &rArr; smpDbGetRecord &rArr; smpDbAddDevice &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnRole
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpCcbByConnId
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpDbGetPairingDisabledTime
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpDmConnCback
</UL>

<P><STRONG><a name="[807]"></a>smpScCatInitiatorBdAddr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, smp_sc_act.o(i.smpScCatInitiatorBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smpScCatInitiatorBdAddr &rArr; BdaIsZeros &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[808]"></a>smpScCatResponderBdAddr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, smp_sc_act.o(i.smpScCatResponderBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smpScCatResponderBdAddr &rArr; BdaIsZeros &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WStrReverseCpy
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaIsZeros
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmConnCcbById
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Eb
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActDHKeyCalcF6Ea
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5MacKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpScActCalcF5Ltk
</UL>

<P><STRONG><a name="[264]"></a>appDiscCfgStart</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_disc.o(i.appDiscCfgStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appDiscCfgStart
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
</UL>

<P><STRONG><a name="[26d]"></a>appDiscConnClose</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_disc.o(i.appDiscConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appDiscConnClose &rArr; WsfBufFree &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufFree
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
</UL>

<P><STRONG><a name="[26c]"></a>appDiscConnOpen</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_disc.o(i.appDiscConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = appDiscConnOpen &rArr; appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
</UL>

<P><STRONG><a name="[270]"></a>appDiscEncryptInd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_disc.o(i.appDiscEncryptInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = appDiscEncryptInd &rArr; appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigResume
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
</UL>

<P><STRONG><a name="[26e]"></a>appDiscPairCmpl</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, app_disc.o(i.appDiscPairCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = appDiscPairCmpl &rArr; appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCheckBonded
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttcDiscConfigResume
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetHdlList
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetDiscStatus
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetCacheByHash
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbIsCacheCheckedByHash
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscStart
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
</UL>

<P><STRONG><a name="[26f]"></a>appDiscPairFail</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_disc.o(i.appDiscPairFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = appDiscPairFail &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscReadDatabaseHash
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcDmMsg
</UL>

<P><STRONG><a name="[268]"></a>appDiscStart</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_disc.o(i.appDiscStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = appDiscStart &rArr; AppDiscReadDatabaseHash &rArr; AttcReadByTypeReq &rArr; attcSendMsg &rArr; attcCcbByConnId &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscReadDatabaseHash
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppCheckBonded
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbIsCacheCheckedByHash
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetHdlList
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetDiscStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscCfgStart
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDiscProcAttMsg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscRestartDiscovery
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscPairCmpl
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscEncryptInd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appDiscConnOpen
</UL>

<P><STRONG><a name="[27c]"></a>appProcMsg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_main.o(i.appProcMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appProcMsg &rArr; appUiBtnPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appUiTimerExpired
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appUiBtnPoll
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppHandler
</UL>

<P><STRONG><a name="[285]"></a>appMasterConnClose</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_master.o(i.appMasterConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = appMasterConnClose &rArr; AppUpdatePrivacyMode &rArr; DmPrivSetPrivacyMode &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUpdatePrivacyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[284]"></a>appMasterConnOpen</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, app_master.o(i.appMasterConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = appMasterConnOpen &rArr; DmReadRemoteFeatures &rArr; HciLeReadRemoteFeatCmd &rArr; LlReadRemoteFeat &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmReadRemoteFeatures
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[297]"></a>appMasterInitiateSec</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, app_master.o(i.appMasterInitiateSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = appMasterInitiateSec &rArr; DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddrType
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnPeerAddr
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecPairReq
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecEncryptReq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNewRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecurityReq
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecSlaveReq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterSecConnOpen
</UL>

<P><STRONG><a name="[287]"></a>appMasterRemoteConnParamReq</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_master.o(i.appMasterRemoteConnParamReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = appMasterRemoteConnParamReq &rArr; DmRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqReply
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmRemoteConnParamReqNegReply
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[286]"></a>appMasterResolvedAddrInd</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, app_master.o(i.appMasterResolvedAddrInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = appMasterResolvedAddrInd &rArr; AppConnOpen &rArr; appConnOpen &rArr; DmConnOpen &rArr; dmConnOpenAccept &rArr; dmConnCcbByBdAddr &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStop
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnOpen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecGetLocalIrk
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmPrivResolveAddr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetNextRecord
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbGetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[283]"></a>appMasterScanReport</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_master.o(i.appMasterScanReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = appMasterScanReport &rArr; appScanResultAdd &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[281]"></a>appMasterScanStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_master.o(i.appMasterScanStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appMasterScanStart
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appScanResultsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[282]"></a>appMasterScanStop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_master.o(i.appMasterScanStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = appMasterScanStop &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanGetNumResults
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterProcDmMsg
</UL>

<P><STRONG><a name="[28d]"></a>appMasterSecConnClose</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_master.o(i.appMasterSecConnClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = appMasterSecConnClose &rArr; AppDbCheckValidRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbCheckValidRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[28c]"></a>appMasterSecConnOpen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_master.o(i.appMasterSecConnOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = appMasterSecConnOpen &rArr; appMasterInitiateSec &rArr; DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[290]"></a>appMasterSecEncryptInd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_master.o(i.appMasterSecEncryptInd))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[28e]"></a>appMasterSecPairCmpl</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_master.o(i.appMasterSecPairCmpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = appMasterSecPairCmpl &rArr; AppAddDevToResList &rArr; DmPrivAddDevToResList &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbValidateRecord
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAddDevToResList
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[28f]"></a>appMasterSecPairFailed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_master.o(i.appMasterSecPairFailed))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[292]"></a>appMasterSecSlaveReq</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_master.o(i.appMasterSecSlaveReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = appMasterSecSlaveReq &rArr; appMasterInitiateSec &rArr; DmSecPairReq &rArr; SmpDmMsgSend &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmConnSecLevel
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterInitiateSec
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[291]"></a>appMasterSecStoreKey</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_master.o(i.appMasterSecStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = appMasterSecStoreKey &rArr; AppDbSetKey &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[294]"></a>appPrivAddDevToResListInd</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_master.o(i.appPrivAddDevToResListInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appPrivAddDevToResListInd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerAddedToRl
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[295]"></a>appPrivRemDevFromResListInd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_master.o(i.appPrivRemDevFromResListInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appPrivRemDevFromResListInd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbSetPeerAddedToRl
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[293]"></a>appPrivSetAddrResEnableInd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_master.o(i.appPrivSetAddrResEnableInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appPrivSetAddrResEnableInd
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmLlPrivEnabled
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SvcCoreGapCentAddrResUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterSecProcDmMsg
</UL>

<P><STRONG><a name="[5d7]"></a>appScanResultAdd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, app_master.o(i.appScanResultAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = appScanResultAdd &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanReport
</UL>

<P><STRONG><a name="[289]"></a>appScanResultFind</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_master.o(i.appScanResultFind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = appScanResultFind &rArr; BdaCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BdaCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppMasterResolveAddr
</UL>

<P><STRONG><a name="[5d8]"></a>appScanResultsClear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_master.o(i.appScanResultsClear))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appMasterScanStart
</UL>

<P><STRONG><a name="[237]"></a>appMasterScanMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_master_leg.o(i.appMasterScanMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = appMasterScanMode &rArr; WsfTrace &rArr; wsfTraceOverFlowMessage &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTrace
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStop
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppScanStart
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppConnOpen
</UL>

<P><STRONG><a name="[d]"></a>appTerminalCommandBtnHandler</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, app_terminal.o(i.appTerminalCommandBtnHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = appTerminalCommandBtnHandler &rArr; TerminalTxPrint &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppUiBtnTest
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxPrint
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_terminal.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>appTerminalPinCodeHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_terminal.o(i.appTerminalPinCodeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = appTerminalPinCodeHandler &rArr; TerminalTxPrint &rArr; PrintVsn &rArr; printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmSecAuthRsp
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxPrint
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_terminal.o(.data)
</UL>
<P><STRONG><a name="[247]"></a>appDbFindIndx</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_db.o(i.appDbFindIndx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = appDbFindIndx
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStorePeerRpao
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreHdlList
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreCacheByHash
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppDbNvmStoreBond
</UL>

<P><STRONG><a name="[611]"></a>bbBleCalcScanDurationUsec</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, bb_ble_adv_master.o(i.bbBleCalcScanDurationUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bbBleCalcScanDurationUsec &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[612]"></a>bbBleClrIfs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_adv_master.o(i.bbBleClrIfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleClrIfs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[61a]"></a>bbBleSetTifs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_adv_master.o(i.bbBleSetTifs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleSetTifs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstExecuteScanOp
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
</UL>

<P><STRONG><a name="[620]"></a>bbContScanOp</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bb_ble_adv_master.o(i.bbContScanOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bbContScanOp &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleCalcScanDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanTxCompCback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbMstScanRxCompCback
</UL>

<P><STRONG><a name="[99]"></a>bbMstCancelScanOp</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bb_ble_adv_master.o(i.bbMstCancelScanOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbMstCancelScanOp &rArr; PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_master.o(i.BbBleScanMasterInit)
</UL>
<P><STRONG><a name="[9a]"></a>bbMstExecuteScanOp</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bb_ble_adv_master.o(i.bbMstExecuteScanOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bbMstExecuteScanOp &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleCalcScanDurationUsec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_master.o(i.BbBleScanMasterInit)
</UL>
<P><STRONG><a name="[ec]"></a>bbMstScanRxCompCback</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, bb_ble_adv_master.o(i.bbMstScanRxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = bbMstScanRxCompCback &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_master.o(i.bbMstExecuteScanOp)
</UL>
<P><STRONG><a name="[eb]"></a>bbMstScanTxCompCback</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, bb_ble_adv_master.o(i.bbMstScanTxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bbMstScanTxCompCback &rArr; bbContScanOp &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbContScanOp
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_master.o(i.bbMstExecuteScanOp)
</UL>
<P><STRONG><a name="[614]"></a>bbBleClrIfs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_adv_slave.o(i.bbBleClrIfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleClrIfs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
</UL>

<P><STRONG><a name="[61b]"></a>bbBleSetTifs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_adv_slave.o(i.bbBleSetTifs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleSetTifs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
</UL>

<P><STRONG><a name="[626]"></a>bbSetupAdvOp</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, bb_ble_adv_slave.o(i.bbSetupAdvOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bbSetupAdvOp &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleGetAlignedAuxOffsUsec
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchBleCalcAdvPktDurationUsec
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteAdvOp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvTxCompCback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvAdvRxCompCback
</UL>

<P><STRONG><a name="[ee]"></a>bbSlvAdvRxCompCback</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, bb_ble_adv_slave.o(i.bbSlvAdvRxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = bbSlvAdvRxCompCback &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp)
</UL>
<P><STRONG><a name="[ed]"></a>bbSlvAdvTxCompCback</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, bb_ble_adv_slave.o(i.bbSlvAdvTxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bbSlvAdvTxCompCback &rArr; bbSetupAdvOp &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleSetTifs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp)
</UL>
<P><STRONG><a name="[8b]"></a>bbSlvCancelAdvOp</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bb_ble_adv_slave.o(i.bbSlvCancelAdvOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbSlvCancelAdvOp &rArr; PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_slave.o(i.BbBleAdvSlaveInit)
</UL>
<P><STRONG><a name="[8c]"></a>bbSlvExecuteAdvOp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bb_ble_adv_slave.o(i.bbSlvExecuteAdvOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bbSlvExecuteAdvOp &rArr; bbSetupAdvOp &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetupAdvOp
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbSetBodTerminateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_adv_slave.o(i.BbBleAdvSlaveInit)
</UL>
<P><STRONG><a name="[2fb]"></a>bbBleSetTifs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_conn.o(i.bbBleSetTifs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleSetTifs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleTxData
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleRxData
</UL>

<P><STRONG><a name="[8d]"></a>bbMstCancelConnOp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bb_ble_conn_master.o(i.bbMstCancelConnOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbMstCancelConnOp &rArr; PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_master.o(i.BbBleConnMasterInit)
</UL>
<P><STRONG><a name="[ea]"></a>bbMstConnRxCompCback</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, bb_ble_conn_master.o(i.bbMstConnRxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bbMstConnRxCompCback &rArr; PalBbBleCancelTifs &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_master.o(i.bbMstExecuteConnOp)
</UL>
<P><STRONG><a name="[e9]"></a>bbMstConnTxCompCback</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, bb_ble_conn_master.o(i.bbMstConnTxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bbMstConnTxCompCback &rArr; PalBbBleCancelTifs &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_master.o(i.bbMstExecuteConnOp)
</UL>
<P><STRONG><a name="[8e]"></a>bbMstExecuteConnOp</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bb_ble_conn_master.o(i.bbMstExecuteConnOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bbMstExecuteConnOp &rArr; PalBbBleSetDataParams
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_master.o(i.BbBleConnMasterInit)
</UL>
<P><STRONG><a name="[8f]"></a>bbSlvCancelConnOp</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bb_ble_conn_slave.o(i.bbSlvCancelConnOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbSlvCancelConnOp &rArr; PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_slave.o(i.BbBleConnSlaveInit)
</UL>
<P><STRONG><a name="[f0]"></a>bbSlvConnRxCompCback</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, bb_ble_conn_slave.o(i.bbSlvConnRxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bbSlvConnRxCompCback &rArr; PalBbBleCancelTifs &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_slave.o(i.bbSlvExecuteConnOp)
</UL>
<P><STRONG><a name="[ef]"></a>bbSlvConnTxCompCback</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, bb_ble_conn_slave.o(i.bbSlvConnTxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bbSlvConnTxCompCback &rArr; PalBbBleCancelTifs &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_slave.o(i.bbSlvExecuteConnOp)
</UL>
<P><STRONG><a name="[90]"></a>bbSlvExecuteConnOp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bb_ble_conn_slave.o(i.bbSlvExecuteConnOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bbSlvExecuteConnOp &rArr; PalBbBleSetDataParams
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_conn_slave.o(i.BbBleConnSlaveInit)
</UL>
<P><STRONG><a name="[615]"></a>bbBleClrIfs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bb_ble_dtm.o(i.bbBleClrIfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleClrIfs
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetOpParams
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestTxCompCback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbTestRxCompCback
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestTxOp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSlvExecuteTestRxOp
</UL>

<P><STRONG><a name="[9d]"></a>bbSlvExecuteTestRxOp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bb_ble_dtm.o(i.bbSlvExecuteTestRxOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bbSlvExecuteTestRxOp &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_dtm.o(i.BbBleTestInit)
</UL>
<P><STRONG><a name="[9c]"></a>bbSlvExecuteTestTxOp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bb_ble_dtm.o(i.bbSlvExecuteTestTxOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bbSlvExecuteTestTxOp &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_dtm.o(i.BbBleTestInit)
</UL>
<P><STRONG><a name="[9b]"></a>bbTestCleanupOp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bb_ble_dtm.o(i.bbTestCleanupOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bbTestCleanupOp &rArr; PalBbBleCancelData &rArr; palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_dtm.o(i.BbBleTestInit)
</UL>
<P><STRONG><a name="[f2]"></a>bbTestRxCompCback</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, bb_ble_dtm.o(i.bbTestRxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = bbTestRxCompCback &rArr; PalBbBleRxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bb_ble_dtm.o(i.bbSlvExecuteTestRxOp)
<LI> bb_ble_dtm.o(i.bbSlvExecuteTestTxOp)
</UL>
<P><STRONG><a name="[f1]"></a>bbTestTxCompCback</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bb_ble_dtm.o(i.bbTestTxCompCback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bbTestTxCompCback &rArr; PalBbBleTxData &rArr; llc_api_set_phy &rArr; dbb_prot_set_phy &rArr; pan2g_trx_set_phy &rArr; pan2g_trx_reset_phy &rArr; ble_coded_s8 &rArr; ble_coded_s2 &rArr; set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbBleClrIfs
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetDataParams
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleSetChannelParam
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbTerminateBod
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetCurrentBod
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbAdjustTime
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bb_ble_dtm.o(i.bbSlvExecuteTestRxOp)
<LI> bb_ble_dtm.o(i.bbSlvExecuteTestTxOp)
</UL>
<P><STRONG><a name="[93]"></a>bbBleCancelOp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bb_ble_main.o(i.bbBleCancelOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleCancelOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[94]"></a>bbBleExecOp</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bb_ble_main.o(i.bbBleExecOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bbBleExecOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[98]"></a>bbBleLowPower</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleLowPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[92]"></a>bbBleStartBle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleStartBle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleStartBle
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnableDataWhitening
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[95]"></a>bbBleStartBleDtm</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleStartBleDtm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleStartBleDtm
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnableDataWhitening
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[97]"></a>bbBleStartPrbs15</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleStartPrbs15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleStartPrbs15
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnablePrbs15
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnableDataWhitening
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[91]"></a>bbBleStopBle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleStopBle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleStopBle
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[96]"></a>bbBleStopPrbs15</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bb_ble_main.o(i.bbBleStopPrbs15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbBleStopPrbs15
</UL>
<BR>[Calls]<UL><LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleEnablePrbs15
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bb_ble_main.o(i.BbBleInit)
</UL>
<P><STRONG><a name="[2e6]"></a>bbBlePduFiltMatchLocal</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, bb_ble_pdufilt.o(i.bbBlePduFiltMatchLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbBlePduFiltMatchLocal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>

<P><STRONG><a name="[2e3]"></a>bbBlePduFiltMatchPeer</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, bb_ble_pdufilt.o(i.bbBlePduFiltMatchPeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbBlePduFiltMatchPeer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>

<P><STRONG><a name="[2e5]"></a>bbBlePduFiltResolveLocal</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bb_ble_pdufilt.o(i.bbBlePduFiltResolveLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bbBlePduFiltResolveLocal &rArr; BbBleResListResolveLocal &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolveLocal
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListLocalStatus
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListCheckResolveLocal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>

<P><STRONG><a name="[2e2]"></a>bbBlePduFiltResolvePeer</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, bb_ble_pdufilt.o(i.bbBlePduFiltResolvePeer))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolvePeer
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListPeerStatus
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGetPrivacyMode
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListCheckResolvePeer
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>

<P><STRONG><a name="[2e4]"></a>bbBlePduFiltWhiteList</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bb_ble_pdufilt.o(i.bbBlePduFiltWhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bbBlePduFiltWhiteList &rArr; BbBleWhiteListCheckAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleWhiteListIsAnonymousAllowed
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleWhiteListCheckAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
</UL>

<P><STRONG><a name="[2e8]"></a>bbBleFindResolvingListEntry</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, bb_ble_reslist.o(i.bbBleFindResolvingListEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bbBleFindResolvingListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListUpdateLocal
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListSetPrivacyMode
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListRemove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadPeer
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListReadLocal
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGeneratePeer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListAdd
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolveLocal
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListPeerStatus
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListLocalStatus
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGetPrivacyMode
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListCheckResolveLocal
</UL>

<P><STRONG><a name="[623]"></a>bbGenerateHash</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bb_ble_reslist.o(i.bbGenerateHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbVerifyRpa
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateRpa
</UL>

<P><STRONG><a name="[2e9]"></a>bbGenerateRpa</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bb_ble_reslist.o(i.bbGenerateRpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = bbGenerateRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateHash
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListHandleTimeout
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListGeneratePeer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListAdd
</UL>

<P><STRONG><a name="[2f5]"></a>bbVerifyRpa</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bb_ble_reslist.o(i.bbVerifyRpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbGenerateHash
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolvePeer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolveLocal
</UL>

<P><STRONG><a name="[6e9]"></a>lctrAdvCleanup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_act_adv_slave.o(i.lctrAdvCleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrAdvCleanup
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecWhitelistRefCount
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecResetRefCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActResetTerm
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActAdvTerm
</UL>

<P><STRONG><a name="[6f0]"></a>lctrNotifyHostDirectConnectTimeout</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, lctr_act_adv_slave.o(i.lctrNotifyHostDirectConnectTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lctrNotifyHostDirectConnectTimeout &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvActSelfTerm
</UL>

<P><STRONG><a name="[705]"></a>lctrComputeConnSca</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrComputeConnSca))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrComputeConnSca
</UL>
<BR>[Calls]<UL><LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetClockAccuracy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaRspPdu
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaReqPdu
</UL>

<P><STRONG><a name="[7c4]"></a>lctrGetConnOpFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrGetConnOpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamRsp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
</UL>

<P><STRONG><a name="[7a1]"></a>lctrSendConnParamPdu</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrSendConnParamPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamRsp
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamReq
</UL>

<P><STRONG><a name="[7a3]"></a>lctrSendDataLengthPdu</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lctr_act_conn.o(i.lctrSendDataLengthPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrSendDataLengthPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthRsp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendDataLengthReq
</UL>

<P><STRONG><a name="[7a4]"></a>lctrSendPeerScaReqPdu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrSendPeerScaReqPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrSendPeerScaReqPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeConnSca
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaReq
</UL>

<P><STRONG><a name="[7a5]"></a>lctrSendPeerScaRspPdu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lctr_act_conn.o(i.lctrSendPeerScaRspPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrSendPeerScaRspPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrComputeConnSca
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPeerScaRsp
</UL>

<P><STRONG><a name="[7a6]"></a>lctrSendSetMinUsedChanPdu</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lctr_act_conn.o(i.lctrSendSetMinUsedChanPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lctrSendSetMinUsedChanPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendSetMinUsedChanInd
</UL>

<P><STRONG><a name="[78f]"></a>lctrValidateConnParam</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lctr_act_conn.o(i.lctrValidateConnParam))
<BR><BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>

<P><STRONG><a name="[732]"></a>lctrModifyEncMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lctr_act_enc.o(i.lctrModifyEncMode))
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableTxDataEnc
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableRxDataEnc
</UL>

<P><STRONG><a name="[734]"></a>lctrGetConnOpFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_isr_conn.o(i.lctrGetConnOpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSetupForTx
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExceededMaxDur
</UL>

<P><STRONG><a name="[75f]"></a>lctrCheckForLinkTerm</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lctr_isr_conn_master.o(i.lctrCheckForLinkTerm))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnRxCompletion
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnBeginOp
</UL>

<P><STRONG><a name="[75e]"></a>lctrMstChanMapUpdateOp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lctr_isr_conn_master.o(i.lctrMstChanMapUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrMstChanMapUpdateOp &rArr; lctrBuildRemapTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrBuildRemapTable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[766]"></a>lctrMstConnUpdateOp</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lctr_isr_conn_master.o(i.lctrMstConnUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lctrMstConnUpdateOp &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmCommitUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[767]"></a>lctrMstPhyUpdateOp</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lctr_isr_conn_master.o(i.lctrMstPhyUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrMstPhyUpdateOp &rArr; lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPhysBitToPhy
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPhyToPhysBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnEndOp
</UL>

<P><STRONG><a name="[785]"></a>lctrPhyToPhysBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lctr_isr_conn_master.o(i.lctrPhyToPhysBit))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstPhyUpdateOp
</UL>

<P><STRONG><a name="[786]"></a>lctrPhysBitToPhy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lctr_isr_conn_master.o(i.lctrPhysBitToPhy))
<BR><BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstPhyUpdateOp
</UL>

<P><STRONG><a name="[7b1]"></a>lctrCheckForLinkTerm</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrCheckForLinkTerm))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBeginOp
</UL>

<P><STRONG><a name="[7b8]"></a>lctrGetConnOpFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrGetConnOpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnRxCompletion
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[7c2]"></a>lctrPhyToPhysBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrPhyToPhysBit))
<BR><BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvPhyUpdateOp
</UL>

<P><STRONG><a name="[7c3]"></a>lctrPhysBitToPhy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrPhysBitToPhy))
<BR><BR>[Called By]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvPhyUpdateOp
</UL>

<P><STRONG><a name="[7a8]"></a>lctrSlvAbortSlvLatency</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, lctr_isr_conn_slave.o(i.lctrSlvAbortSlvLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrSlvAbortSlvLatency &rArr; LlMathDivideUint32
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlMathDivideUint32
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[7ac]"></a>lctrSlvChanMapUpdateOp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lctr_isr_conn_slave.o(i.lctrSlvChanMapUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lctrSlvChanMapUpdateOp &rArr; lctrBuildRemapTable
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrBuildRemapTable
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[7b7]"></a>lctrSlvConnUpdateOp</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, lctr_isr_conn_slave.o(i.lctrSlvConnUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lctrSlvConnUpdateOp &rArr; WsfTimerStartMs &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcWindowWideningUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[7b0]"></a>lctrSlvInitConnIsr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_isr_conn_slave.o(i.lctrSlvInitConnIsr))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnBeginOp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnAbortOp
</UL>

<P><STRONG><a name="[7b9]"></a>lctrSlvPhyUpdateOp</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lctr_isr_conn_slave.o(i.lctrSlvPhyUpdateOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrSlvPhyUpdateOp &rArr; lctrCalcConnDurationUsec &rArr; lctrGetMaxConnDurationUsec
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPhysBitToPhy
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPhyToPhysBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnEndOp
</UL>

<P><STRONG><a name="[3cb]"></a>lctrNotifyHostResetCnf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_main.o(i.lctrNotifyHostResetCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrNotifyHostResetCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMsgDispatcher
</UL>

<P><STRONG><a name="[775]"></a>lctrMstCreateAdvRpt</STRONG> (Thumb, 250 bytes, Stack size 80 bytes, lctr_main_adv_master.o(i.lctrMstCreateAdvRpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lctrMstCreateAdvRpt &rArr; BbBlePduFiltCheck &rArr; bbBlePduFiltResolvePeer &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBlePduFiltCheck
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bda64ToBstream
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpackAdvbPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxDirectAdvBPduHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxAdvBPduHandler
</UL>

<P><STRONG><a name="[787]"></a>lctrMstScanAdvRptNotify</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lctr_main_adv_master.o(i.lctrMstScanAdvRptNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lctrMstScanAdvRptNotify &rArr; lctrAdvRptCheckDuplicate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BstreamToBda64
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptCheckDuplicate
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptAddEntry
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAdvRptGenerateLegacyHash
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxDirectAdvBPduHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstRxAdvBPduHandler
</UL>

<P><STRONG><a name="[bd]"></a>lctrMstScanDisp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.lctrMstScanDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstScanDisp &rArr; lctrMstScanExecuteSm
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstScanExecuteSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.LctrMstScanInit)
</UL>
<P><STRONG><a name="[bc]"></a>lctrMstScanResetHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_main_adv_master.o(i.lctrMstScanResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstScanResetHandler &rArr; BbBleScanMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleScanMasterInit
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrMstInit
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstScanDefaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_master.o(i.LctrMstScanInit)
</UL>
<P><STRONG><a name="[c5]"></a>lctrSlvAdvDisp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_main_adv_slave.o(i.lctrSlvAdvDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrSlvAdvDisp &rArr; lctrSlvAdvExecuteSm
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvAdvExecuteSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.LctrSlvAdvInit)
</UL>
<P><STRONG><a name="[c4]"></a>lctrSlvAdvResetHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_main_adv_slave.o(i.lctrSlvAdvResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lctrSlvAdvResetHandler &rArr; LmgrSlvInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleAdvSlaveInit
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSlvInit
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrSlvAdvDefaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_adv_slave.o(i.LctrSlvAdvInit)
</UL>
<P><STRONG><a name="[3db]"></a>lctrDataRxIncAvailBuf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_main_conn.o(i.lctrDataRxIncAvailBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrDataRxIncAvailBuf &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrFreeConnCtx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnRxPendingHandler
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrRxAclComplete
</UL>

<P><STRONG><a name="[754]"></a>llGetSupportedPhys</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lctr_main_conn.o(i.llGetSupportedPhys))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = llGetSupportedPhys
</UL>
<BR>[Called By]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrInitPhyTxPower
</UL>

<P><STRONG><a name="[6f7]"></a>lctrAllocConnTxBufDesc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_main_conn_data.o(i.lctrAllocConnTxBufDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrAllocConnTxBufDesc &rArr; WsfQueueDeq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueDeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
</UL>

<P><STRONG><a name="[6f8]"></a>lctrAssembleCtrlPdu</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrAssembleCtrlPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrAssembleCtrlPdu &rArr; lctrPackDataPduHdr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackDataPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduAlloc
</UL>

<P><STRONG><a name="[6fa]"></a>lctrAssembleDataPdu</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrAssembleDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrAssembleDataPdu &rArr; lctrPackDataPduHdr
</UL>
<BR>[Calls]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPackDataPduHdr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
</UL>

<P><STRONG><a name="[701]"></a>lctrCheckAbortSlvLatency</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lctr_main_conn_data.o(i.lctrCheckAbortSlvLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxCtrlPduQueue
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
</UL>

<P><STRONG><a name="[715]"></a>lctrDataTxIncAvailBuf</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_conn_data.o(i.lctrDataTxIncAvailBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrDataTxIncAvailBuf &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxDataPduQueue
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePopCleanup
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueueClear
</UL>

<P><STRONG><a name="[73c]"></a>lctrFreeConnTxBufDesc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lctr_main_conn_data.o(i.lctrFreeConnTxBufDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lctrFreeConnTxBufDesc &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEnq
</UL>
<BR>[Called By]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueuePopCleanup
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxQueueClear
</UL>

<P><STRONG><a name="[6fe]"></a>lctrGetMaxConnDurationUsec</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, lctr_main_conn_data.o(i.lctrGetMaxConnDurationUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrGetMaxConnDurationUsec
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcConnDurationUsec
</UL>

<P><STRONG><a name="[7c5]"></a>lctrMaxNumBytesWithinUsec1M</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_main_conn_data.o(i.lctrMaxNumBytesWithinUsec1M))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxFragLen
</UL>

<P><STRONG><a name="[7c6]"></a>lctrMaxNumBytesWithinUsec2M</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lctr_main_conn_data.o(i.lctrMaxNumBytesWithinUsec2M))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxFragLen
</UL>

<P><STRONG><a name="[7c7]"></a>lctrMaxNumBytesWithinUsecCoded</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lctr_main_conn_data.o(i.lctrMaxNumBytesWithinUsecCoded))
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrTxFragLen
</UL>

<P><STRONG><a name="[b9]"></a>lctrConnChClassUpdate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lctr_main_conn_master.o(i.lctrConnChClassUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrConnChClassUpdate &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsProcActPended
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrIsConnHandleEnabled
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrGetRole
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[b1]"></a>lctrMstConnDisp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lctr_main_conn_master.o(i.lctrMstConnDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lctrMstConnDisp &rArr; lctrMstConnExecute &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[762]"></a>lctrMstConnExecute</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lctr_main_conn_master.o(i.lctrMstConnExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lctrMstConnExecute &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnDisp
</UL>

<P><STRONG><a name="[b0]"></a>lctrMstConnResetHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lctr_main_conn_master.o(i.lctrMstConnResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstConnResetHandler &rArr; BbBleConnSlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnSlaveInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnMasterInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnDefaults
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmInit
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrConnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[b3]"></a>lctrMstConnTxPendingHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lctr_main_conn_master.o(i.lctrMstConnTxPendingHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lctrMstConnTxPendingHandler &rArr; lctrMstConnExecuteSm &rArr; lctrMstLlcpExecuteSm &rArr; lctrLlcpStatelessEventHandler &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueEmpty
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[b7]"></a>lctrMstProcessDataPdu</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lctr_main_conn_master.o(i.lctrMstProcessDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lctrMstProcessDataPdu &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_master.o(i.LctrMstConnInit)
</UL>
<P><STRONG><a name="[110]"></a>lctrGetSlvConnRefTime</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lctr_main_conn_slave.o(i.lctrGetSlvConnRefTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrGetSlvConnRefTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.lctrSlvConnBuildOp)
</UL>
<P><STRONG><a name="[cb]"></a>lctrSlvConnDisp</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lctr_main_conn_slave.o(i.lctrSlvConnDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lctrSlvConnDisp &rArr; lctrSlvConnExecute &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
</UL>
<P><STRONG><a name="[7b5]"></a>lctrSlvConnExecute</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lctr_main_conn_slave.o(i.lctrSlvConnExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lctrSlvConnExecute &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnDisp
</UL>

<P><STRONG><a name="[c9]"></a>lctrSlvConnResetHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_main_conn_slave.o(i.lctrSlvConnResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrSlvConnResetHandler &rArr; BbBleConnSlaveInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleConnSlaveInit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnDefaults
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmInit
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmInit
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrConnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
</UL>
<P><STRONG><a name="[ca]"></a>lctrSlvProcessConnInd</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lctr_main_conn_slave.o(i.lctrSlvProcessConnInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lctrSlvProcessConnInd &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnectInd
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendAdvSetTermInd
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrAllocConnCtx
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
</UL>
<P><STRONG><a name="[cd]"></a>lctrSlvProcessDataPdu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lctr_main_conn_slave.o(i.lctrSlvProcessDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lctrSlvProcessDataPdu &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_conn_slave.o(i.LctrSlvConnInit)
</UL>
<P><STRONG><a name="[ac]"></a>lctrMstEncProcessDataPdu</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lctr_main_enc_master.o(i.lctrMstEncProcessDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lctrMstEncProcessDataPdu &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeEncPdu
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_enc_master.o(i.LctrMstConnEncInit)
</UL>
<P><STRONG><a name="[c8]"></a>lctrSlvEncProcessDataPdu</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lctr_main_enc_slave.o(i.lctrSlvEncProcessDataPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lctrSlvEncProcessDataPdu &rArr; lctrSlvConnExecuteSm &rArr; lctrSlvConnBuildOp &rArr; SchInsertAtDueTime &rArr; SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeEncPdu
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_enc_slave.o(i.LctrSlvConnEncInit)
</UL>
<P><STRONG><a name="[bb]"></a>lctrMstInitDisp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_main_init_master.o(i.lctrMstInitDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstInitDisp &rArr; lctrMstInitExecuteSm
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstInitExecuteSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_init_master.o(i.LctrMstInitInit)
</UL>
<P><STRONG><a name="[ba]"></a>lctrMstInitResetHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lctr_main_init_master.o(i.lctrMstInitResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstInitResetHandler &rArr; LctrMstInitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrMstInitDefaults
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_init_master.o(i.LctrMstInitInit)
</UL>
<P><STRONG><a name="[c0]"></a>lctrPrivDisp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lctr_main_priv.o(i.lctrPrivDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lctrPrivDisp &rArr; BbBleResListResolvePeer &rArr; bbVerifyRpa &rArr; bbGenerateHash &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListHandleTimeout
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolvePeer
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbBleResListResolveLocal
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRestartResPrivAddrTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_priv.o(i.LctrPrivInit)
</UL>
<P><STRONG><a name="[c1]"></a>lctrPrivPendAddrRes</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, lctr_main_priv.o(i.lctrPrivPendAddrRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lctrPrivPendAddrRes &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgSend
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfMsgAlloc
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_priv.o(i.LctrPrivInit)
</UL>
<P><STRONG><a name="[3d7]"></a>lctrRestartResPrivAddrTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lctr_main_priv.o(i.lctrRestartResPrivAddrTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lctrRestartResPrivAddrTimer &rArr; WsfTimerStartSec &rArr; wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LctrPrivSetResPrivAddrTimeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPrivDisp
</UL>

<P><STRONG><a name="[78e]"></a>lctrNotifyGenerateDhKeyInd</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, lctr_main_sc.o(i.lctrNotifyGenerateDhKeyInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrNotifyGenerateDhKeyInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateDhKeyContinue
</UL>

<P><STRONG><a name="[794]"></a>lctrNotifyReadLocalP256PubKeyInd</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, lctr_main_sc.o(i.lctrNotifyReadLocalP256PubKeyInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrNotifyReadLocalP256PubKeyInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrScGenerateP256KeyPairContinue
</UL>

<P><STRONG><a name="[73f]"></a>lctrReverse</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lctr_main_sc.o(i.lctrReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrReverse
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairComplete
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyComplete
</UL>

<P><STRONG><a name="[743]"></a>lctrReverseCopy</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lctr_main_sc.o(i.lctrReverseCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrReverseCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidatePublicKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256PublicKeyStart
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyStart
</UL>

<P><STRONG><a name="[f6]"></a>lctrRng</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lctr_main_sc.o(i.lctrRng))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrRng &rArr; PalCryptoGenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairStart
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lctr_main_sc.o(i.lctrGenerateDhKeyStart)
<LI> lctr_main_sc.o(i.lctrGenerateP256KeyPairStart)
<LI> lctr_main_sc.o(i.lctrGenerateP256PublicKeyStart)
</UL>
<P><STRONG><a name="[742]"></a>lctrScBbDrvEcc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lctr_main_sc.o(i.lctrScBbDrvEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lctrScBbDrvEcc &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrValidatePublicKey
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256PublicKeyStart
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairStart
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairContinue
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyStart
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyContinue
</UL>

<P><STRONG><a name="[c3]"></a>lctrScGenerateDhKeyContinue</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lctr_main_sc.o(i.lctrScGenerateDhKeyContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lctrScGenerateDhKeyContinue &rArr; lctrGenerateDhKeyContinue &rArr; uECC_shared_secret_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyContinue
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateDhKeyComplete
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyGenerateDhKeyInd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_sc.o(i.LctrScInit)
</UL>
<P><STRONG><a name="[c2]"></a>lctrScGenerateP256KeyPairContinue</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, lctr_main_sc.o(i.lctrScGenerateP256KeyPairContinue))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lctrScGenerateP256KeyPairContinue &rArr; lctrGenerateP256KeyPairContinue &rArr; uECC_make_key_continue &rArr; EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairContinue
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateP256KeyPairComplete
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyReadLocalP256PubKeyInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_main_sc.o(i.LctrScInit)
</UL>
<P><STRONG><a name="[718]"></a>lctrIsConnUpdateParamValid</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, lctr_pdu_conn.o(i.lctrIsConnUpdateParamValid))
<BR><BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[72c]"></a>lctrUnpackPwrChngIndPdu</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackPwrChngIndPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackPwrChngIndPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[72d]"></a>lctrUnpackPwrCtrlReqPdu</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackPwrCtrlReqPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackPwrCtrlReqPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[72e]"></a>lctrUnpackPwrCtrlRspPdu</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lctr_pdu_conn.o(i.lctrUnpackPwrCtrlRspPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackPwrCtrlRspPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeCtrlPdu
</UL>

<P><STRONG><a name="[730]"></a>lctrUnpackEncReqPdu</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lctr_pdu_enc.o(i.lctrUnpackEncReqPdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrUnpackEncReqPdu
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeEncPdu
</UL>

<P><STRONG><a name="[731]"></a>lctrUnpackEncRspPdu</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lctr_pdu_enc.o(i.lctrUnpackEncRspPdu))
<BR><BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDecodeEncPdu
</UL>

<P><STRONG><a name="[76e]"></a>lctrGetConnOpFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_sm_conn_master.o(i.lctrGetConnOpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstConnExecuteSm
</UL>

<P><STRONG><a name="[712]"></a>lctrFlagLinkTerm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lctr_sm_conn_slave.o(i.lctrFlagLinkTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lctrFlagLinkTerm &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrConnStatelessEventHandler
</UL>

<P><STRONG><a name="[7bb]"></a>lctrGetConnOpFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lctr_sm_conn_slave.o(i.lctrGetConnOpFlag))
<BR><BR>[Called By]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvConnExecuteSm
</UL>

<P><STRONG><a name="[756]"></a>lctrExecAction</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lctr_sm_llcp_conn.o(i.lctrExecAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrExecAction
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[757]"></a>lctrFeatureAvail</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, lctr_sm_llcp_conn.o(i.lctrFeatureAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lctrFeatureAvail
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[74c]"></a>lctrGetCmnProcId</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, lctr_sm_llcp_conn.o(i.lctrGetCmnProcId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrGetCmnProcId
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetNextPendingProc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[74d]"></a>lctrGetNextPendingProc</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, lctr_sm_llcp_conn.o(i.lctrGetNextPendingProc))
<BR><BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGetCmnProcId
</UL>

<P><STRONG><a name="[793]"></a>lctrNotifyHostReadRemoteFeatCnf</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, lctr_sm_llcp_conn.o(i.lctrNotifyHostReadRemoteFeatCnf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lctrNotifyHostReadRemoteFeatCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrSendEvent
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uint64ToBstream
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostSuccess
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReject
</UL>

<P><STRONG><a name="[758]"></a>lctrNotifyHostReject</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lctr_sm_llcp_conn.o(i.lctrNotifyHostReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lctrNotifyHostReject &rArr; lctrNotifyHostReadRemoteFeatCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteFeatCnf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[759]"></a>lctrNotifyHostSuccess</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lctr_sm_llcp_conn.o(i.lctrNotifyHostSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lctrNotifyHostSuccess &rArr; lctrNotifyHostReadRemoteFeatCnf &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteVerCnf
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostPeerScaCnf
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostReadRemoteFeatCnf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[755]"></a>lctrRemapCmnProcEvent</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, lctr_sm_llcp_conn.o(i.lctrRemapCmnProcEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>

<P><STRONG><a name="[1d9]"></a>lctrActConnUpdDisallow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActConnUpdDisallow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActConnUpdDisallow &rArr; lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>lctrActHostConnUpd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActHostConnUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrActHostConnUpd &rArr; lctrActStartConnUpd &rArr; lctrSendConnParamReq &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdateSpec
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>lctrActHostReply</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActHostReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lctrActHostReply &rArr; lctrSendConnUpdateInd &rArr; SchRmStartUpdate &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamSpec
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>lctrActLocalRejectConnParam</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActLocalRejectConnParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrActLocalRejectConnParam &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>lctrActPeerConnParam</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActPeerConnParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lctrActPeerConnParam &rArr; lctrNotifyHostConnParamInd &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamReq
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>lctrActPeerConnParamRsp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActPeerConnParamRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lctrActPeerConnParamRsp &rArr; lctrSendConnUpdateInd &rArr; SchRmStartUpdate &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamRsp
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>lctrActRejectCollision</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActRejectCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrActRejectCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>lctrActSkipConnParamRsp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActSkipConnParamRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lctrActSkipConnParamRsp &rArr; lctrSendConnUpdateInd &rArr; SchRmStartUpdate &rArr; schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnUpdateInd
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>lctrActStartConnParam</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActStartConnParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lctrActStartConnParam &rArr; lctrNotifyHostConnParamInd &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>lctrActStartConnUpd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrActStartConnUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lctrActStartConnUpd &rArr; lctrSendConnParamReq &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamReq
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostConnUpd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_master.o(.constdata)
</UL>
<P><STRONG><a name="[781]"></a>lctrExecAction</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_master.o(i.lctrExecAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrExecAction
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[782]"></a>lctrMstCheckProcOverride</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_master.o(i.lctrMstCheckProcOverride))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrMstCheckProcOverride
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[780]"></a>lctrMstConnUpdRemapEvent</STRONG> (Thumb, 256 bytes, Stack size 12 bytes, lctr_sm_llcp_conn_master.o(i.lctrMstConnUpdRemapEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrMstConnUpdRemapEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[783]"></a>lctrResolveCollision</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_master.o(i.lctrResolveCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrResolveCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdateSpec
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamReq
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[1e4]"></a>lctrActConnUpdDisallow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActConnUpdDisallow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActConnUpdDisallow &rArr; lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>lctrActHostConnUpd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActHostConnUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lctrActHostConnUpd &rArr; lctrActStartConnUpd &rArr; lctrSendConnParamReq &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdateSpec
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActStartConnUpd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>lctrActHostReply</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActHostReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrActHostReply &rArr; lctrSendConnParamRsp &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>lctrActNotifyHostColliding</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActNotifyHostColliding))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActNotifyHostColliding &rArr; lctrNotifyHostConnUpdateInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>lctrActPeerConnInd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActPeerConnInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrActPeerConnInd &rArr; lctrStoreConnUpdate &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdate
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>lctrActPeerConnParam</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActPeerConnParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lctrActPeerConnParam &rArr; lctrNotifyHostConnParamInd &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnParamReq
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnParamInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParamWithCollision
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>lctrActPeerConnParamWithCollision</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActPeerConnParamWithCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lctrActPeerConnParamWithCollision &rArr; lctrActPeerConnParam &rArr; lctrNotifyHostConnParamInd &rArr; LlRemoteConnParamReqReply &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActPeerConnParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>lctrActRejectCollision</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActRejectCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lctrActRejectCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>lctrActStartConnUpd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrActStartConnUpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lctrActStartConnUpd &rArr; lctrSendConnParamReq &rArr; lctrSendConnParamPdu &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnMsg
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendConnParamReq
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrActHostConnUpd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_conn_slave.o(.constdata)
</UL>
<P><STRONG><a name="[7c0]"></a>lctrExecAction</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrExecAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrExecAction
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[739]"></a>lctrFlagLinkTerm</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrFlagLinkTerm))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lctrFlagLinkTerm &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpStatelessEventHandler
</UL>

<P><STRONG><a name="[79e]"></a>lctrResolveCollision</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lctr_sm_llcp_conn_slave.o(i.lctrResolveCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lctrResolveCollision &rArr; lctrSendRejectInd &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreConnUpdateSpec
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyHostConnUpdateInd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[7c1]"></a>lctrSlvCheckProcOverride</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvCheckProcOverride))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lctrSlvCheckProcOverride
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[7bf]"></a>lctrSlvConnUpdRemapEvent</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, lctr_sm_llcp_conn_slave.o(i.lctrSlvConnUpdRemapEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lctrSlvConnUpdRemapEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvLlcpExecuteConnUpdSm
</UL>

<P><STRONG><a name="[1eb]"></a>lctrActEncChangeDisallow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActEncChangeDisallow))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lctrActEncChangeDisallow &rArr; lctrNotifyEncChangeInd &rArr; LmgrSendEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>lctrActPeerEncReject</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_master.o(i.lctrActPeerEncReject))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lctrActPeerEncReject &rArr; lctrUnpauseTxData &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseRxData
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>lctrActPeerEncRsp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActPeerEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lctrActPeerEncRsp &rArr; lctrCalcSessionKey &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseRxData
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreSlvVectors
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcSessionKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>lctrActPeerPauseEncRsp</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActPeerPauseEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActPeerPauseEncRsp &rArr; lctrSendEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseRxData
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncReq
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncRsp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableTxDataEnc
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableRxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>lctrActPeerStartEncReq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActPeerStartEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActPeerStartEncReq &rArr; lctrSendStartEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncRsp
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableTxDataEnc
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableRxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>lctrActPeerStartEncRsp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActPeerStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lctrActPeerStartEncRsp &rArr; lctrUnpauseTxData &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseRxData
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncKeyRefreshInd
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncChangeInd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>lctrActRefreshEncKey</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActRefreshEncKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrActRefreshEncKey &rArr; lctrCheckPauseComplete &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseTxData
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>lctrActStartEnc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActStartEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrActStartEnc &rArr; lctrCheckPauseComplete &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseTxData
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>lctrActTxFlushedOnRestart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActTxFlushedOnRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActTxFlushedOnRestart &rArr; lctrSendPauseEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>lctrActTxFlushedOnStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_master.o(i.lctrActTxFlushedOnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActTxFlushedOnStart &rArr; lctrSendEncReq &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncReq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableTxDataEnc
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableRxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_master.o(.constdata)
</UL>
<P><STRONG><a name="[77d]"></a>lctrMstEncryptSm</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_master.o(i.lctrMstEncryptSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrMstEncryptSm
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstExecuteEncryptSm
</UL>

<P><STRONG><a name="[77c]"></a>lctrMstRemapEncryptEvent</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, lctr_sm_llcp_enc_master.o(i.lctrMstRemapEncryptEvent))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrMstExecuteEncryptSm
</UL>

<P><STRONG><a name="[1f7]"></a>lctrActHostLtkNegReply</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActHostLtkNegReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lctrActHostLtkNegReply &rArr; lctrUnpauseTxData &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendRejectInd
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseRxData
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLtkNegRepTerminateReason
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrLlcpExecuteCommonSm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>lctrActHostLtkReply</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActHostLtkReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lctrActHostLtkReply &rArr; lctrCalcSessionKey &rArr; PalCryptoAesEcb &rArr; palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStoreLtkReply
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncReq
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableRxDataEnc
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCalcSessionKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>lctrActPeerEncReq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActPeerEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrActPeerEncReq &rArr; lctrCheckPauseComplete &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseTxData
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseRxData
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>lctrActPeerPauseEncReq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActPeerPauseEncReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lctrActPeerPauseEncReq &rArr; lctrCheckPauseComplete &rArr; lctrSendConnMsg &rArr; WsfMsgSend &rArr; WsfMsgEnq &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseTxData
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrPauseRxData
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrCheckPauseComplete
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableRxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>lctrActPeerStartEncRsp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActPeerStartEncRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lctrActPeerStartEncRsp &rArr; lctrUnpauseTxData &rArr; lctrTxDataPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseTxData
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrUnpauseRxData
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendStartEncRsp
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncKeyRefreshInd
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyEncChangeInd
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEnableTxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>lctrActTxFlushedOnRestart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActTxFlushedOnRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActTxFlushedOnRestart &rArr; lctrSendPauseEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPauseEncRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>lctrActTxFlushedOnStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lctr_sm_llcp_enc_slave.o(i.lctrActTxFlushedOnStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lctrActTxFlushedOnStart &rArr; lctrSendEncRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendEncRsp
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrGenerateSlvVectors
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrEncNotifyHostLtkReqInd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableTxDataEnc
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrDisableRxDataEnc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lctr_sm_llcp_enc_slave.o(.constdata)
</UL>
<P><STRONG><a name="[737]"></a>lctrCheckActiveOrPend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lctr_sm_llcp_enc_slave.o(i.lctrCheckActiveOrPend))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecutePingSm
</UL>

<P><STRONG><a name="[736]"></a>lctrPingSm</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_slave.o(i.lctrPingSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lctrPingSm &rArr; lctrSendPingRsp &rArr; lctrTxCtrlPduQueue &rArr; lctrCheckAbortSlvLatency &rArr; SchRemove &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStopLlcpTimer
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrStartLlcpTimer
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingRsp
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSendPingReq
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrRestartAuthPayloadTimer
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrNotifyAuthPayloadTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecutePingSm
</UL>

<P><STRONG><a name="[735]"></a>lctrRemapPingEvent</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, lctr_sm_llcp_enc_slave.o(i.lctrRemapPingEvent))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrExecutePingSm
</UL>

<P><STRONG><a name="[7ad]"></a>lctrSlvCheckProcOverride</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_slave.o(i.lctrSlvCheckProcOverride))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrSlvCheckProcOverride
</UL>
<BR>[Calls]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckEncOverrideConnParam
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvCheckEncOverrideCommonParam
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
</UL>

<P><STRONG><a name="[7be]"></a>lctrSlvEncryptSm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lctr_sm_llcp_enc_slave.o(i.lctrSlvEncryptSm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lctrSlvEncryptSm
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
</UL>

<P><STRONG><a name="[7bd]"></a>lctrSlvRemapEncryptEvent</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lctr_sm_llcp_enc_slave.o(i.lctrSlvRemapEncryptEvent))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lctrSlvExecuteEncryptSm
</UL>

<P><STRONG><a name="[d1]"></a>llTestDisp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ll_main_dtm.o(i.llTestDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llTestDisp &rArr; LlEndTest &rArr; BbStop &rArr; PalBbDisable &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmgrDecResetRefCount
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlEndTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_main_dtm.o(i.LlTestInit)
</UL>
<P><STRONG><a name="[d0]"></a>llTestResetHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ll_main_dtm.o(i.llTestResetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llTestResetHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LlTestInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_main_dtm.o(i.LlTestInit)
</UL>
<P><STRONG><a name="[55d]"></a>schRmCheckRsvnCapacity</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, sch_rm.o(i.schRmCheckRsvnCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = schRmCheckRsvnCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmAdd
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmStartUpdate
</UL>

<P><STRONG><a name="[7eb]"></a>schRmIntAddRmOffset</STRONG> (Thumb, 330 bytes, Stack size 72 bytes, sch_rm.o(i.schRmIntAddRmOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchTmCheckConflict
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
</UL>

<P><STRONG><a name="[7ee]"></a>schRmIntCheckDecOffsetDepth</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, sch_rm.o(i.schRmIntCheckDecOffsetDepth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = schRmIntCheckDecOffsetDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntRemoveRmOffset
</UL>

<P><STRONG><a name="[55e]"></a>schRmIntHandleAddRmOffset</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, sch_rm.o(i.schRmIntHandleAddRmOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = schRmIntHandleAddRmOffset &rArr; schRmIntAddRmOffset &rArr; SchTmCheckConflict &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCalculateDepth
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntIncOffsetDepth
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntIncCommInterval
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntAddRmOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmAdd
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmStartUpdate
</UL>

<P><STRONG><a name="[7ed]"></a>schRmIntIncCommInterval</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sch_rm.o(i.schRmIntIncCommInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = schRmIntIncCommInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
</UL>

<P><STRONG><a name="[7ec]"></a>schRmIntIncOffsetDepth</STRONG> (Thumb, 256 bytes, Stack size 36 bytes, sch_rm.o(i.schRmIntIncOffsetDepth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = schRmIntIncOffsetDepth &rArr; schRmIntCalculateDepth
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCalculateDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntHandleAddRmOffset
</UL>

<P><STRONG><a name="[563]"></a>schRmIntRemoveRmOffset</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, sch_rm.o(i.schRmIntRemoveRmOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = schRmIntRemoveRmOffset &rArr; schRmIntCheckDecOffsetDepth
</UL>
<BR>[Calls]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCalculateDepth
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmIntCheckDecOffsetDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmRemove
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmStartUpdate
</UL>

<P><STRONG><a name="[55c]"></a>schRmSelectPreferredIntervalUsec</STRONG> (Thumb, 230 bytes, Stack size 92 bytes, sch_rm.o(i.schRmSelectPreferredIntervalUsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = schRmSelectPreferredIntervalUsec &rArr; schRmSortListDescending
</UL>
<BR>[Calls]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRmSortListDescending
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmAdd
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRmStartUpdate
</UL>

<P><STRONG><a name="[306]"></a>bbProtStart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bb_main.o(i.bbProtStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbProtStart
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbSetProtId
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStart
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbExecuteBod
</UL>

<P><STRONG><a name="[305]"></a>bbProtStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bb_main.o(i.bbProtStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbProtStop
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbStop
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbExecuteBod
</UL>

<P><STRONG><a name="[541]"></a>SchEnoughTimeToCancel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sch_list.o(i.SchEnoughTimeToCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schCheckCancelHead
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[54e]"></a>SchInsertTryLoadBod</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sch_list.o(i.SchInsertTryLoadBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SchInsertTryLoadBod &rArr; SchLoadHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchLoadHandler
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schGetTimeToExecBod
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReload
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
</UL>

<P><STRONG><a name="[555]"></a>SchIsBodResolvable</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, sch_list.o(i.SchIsBodResolvable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SchIsBodResolvable
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchIsConflictResolvable
</UL>

<P><STRONG><a name="[54b]"></a>SchIsConflictResolvable</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sch_list.o(i.SchIsConflictResolvable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SchIsConflictResolvable &rArr; SchIsBodResolvable
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchIsBodResolvable
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
</UL>

<P><STRONG><a name="[54c]"></a>SchResolveConflict</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, sch_list.o(i.SchResolveConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SchResolveConflict &rArr; schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetSchSetupDelayUs
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertToEmptyList
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertBefore
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schInsertAfter
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
</UL>

<P><STRONG><a name="[549]"></a>schCheckCancelHead</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sch_list.o(i.schCheckCancelHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = schCheckCancelHead &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchReload
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
</UL>

<P><STRONG><a name="[547]"></a>schDueTimeInFuture</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sch_list.o(i.schDueTimeInFuture))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = schDueTimeInFuture &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
</UL>

<P><STRONG><a name="[553]"></a>schGetTimeToExecBod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sch_list.o(i.schGetTimeToExecBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = schGetTimeToExecBod &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertTryLoadBod
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[54d]"></a>schInsertAfter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sch_list.o(i.schInsertAfter))
<BR><BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
</UL>

<P><STRONG><a name="[54a]"></a>schInsertBefore</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sch_list.o(i.schInsertBefore))
<BR><BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
</UL>

<P><STRONG><a name="[548]"></a>schInsertToEmptyList</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sch_list.o(i.schInsertToEmptyList))
<BR><BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertLateAsPossible
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertAtDueTime
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertNextAvailable
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchInsertEarlyAsPossible
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
</UL>

<P><STRONG><a name="[55a]"></a>schRemoveForConflict</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sch_list.o(i.schRemoveForConflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = schRemoveForConflict &rArr; SchEnoughTimeToCancel &rArr; BbGetTargetTimeDelta
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchEnoughTimeToCancel
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveHead
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveMiddle
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schGetTimeToExecBod
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchResolveConflict
</UL>

<P><STRONG><a name="[559]"></a>schRemoveMiddle</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sch_list.o(i.schRemoveMiddle))
<BR><BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchRemove
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schRemoveForConflict
</UL>

<P><STRONG><a name="[7e6]"></a>schBodAbortHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sch_main.o(i.schBodAbortHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = schBodAbortHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodLoadHandler
</UL>

<P><STRONG><a name="[d3]"></a>schBodCompHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sch_main.o(i.schBodCompHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = schBodCompHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch_main.o(i.SchHandlerInit)
</UL>
<P><STRONG><a name="[7e7]"></a>schBodCurtailHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sch_main.o(i.schBodCurtailHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = schBodCurtailHandler &rArr; WsfSetEvent &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryCurTailLoadNext
</UL>

<P><STRONG><a name="[d4]"></a>schBodLoadHandler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, sch_main.o(i.schBodLoadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = schBodLoadHandler &rArr; schTryLoadHead &rArr; schLoadBod &rArr; BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfSetEvent
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryLoadHead
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryCurTailLoadNext
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schBodAbortHandler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchLoadHandler
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SchHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sch_main.o(i.SchInit)
</UL>
<P><STRONG><a name="[7ea]"></a>schLoadBod</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sch_main.o(i.schLoadBod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = schLoadBod &rArr; BbExecuteBod &rArr; bbProtStop
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbGetCurrentTime
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetTargetTimeDelta
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbGetBodTerminateFlag
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbCancelBod
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BbExecuteBod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryLoadHead
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schTryCurTailLoadNext
</UL>

<P><STRONG><a name="[512]"></a>palCryptoAesEcb</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, pal_crypto.o(i.palCryptoAesEcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = palCryptoAesEcb &rArr; MXC_AES_Encrypt &rArr; MXC_AES_RevB_Encrypt &rArr; MXC_AES_RevB_Generic &rArr; MXC_AES_RevB_SetKeySize &rArr; MXC_AES_IsBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Shutdown
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_SetExtKey
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Init
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_Encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoAesEcb
</UL>

<P><STRONG><a name="[514]"></a>prandNum</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pal_crypto.o(i.prandNum))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalCryptoGenerateRandomNumber
</UL>

<P><STRONG><a name="[526]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pal_rtc.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WUT_IRQHandler
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcInit
</UL>

<P><STRONG><a name="[520]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pal_rtc.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcEnableCompareIrq
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalRtcCompareSet
</UL>

<P><STRONG><a name="[528]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pal_sys.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>

<P><STRONG><a name="[52c]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pal_timer.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[52d]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pal_timer.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerInit
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStop
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[52f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pal_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerStart
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalTimerSleep
</UL>

<P><STRONG><a name="[536]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pal_uart.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
</UL>

<P><STRONG><a name="[537]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pal_uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
</UL>

<P><STRONG><a name="[533]"></a>palUartGetNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pal_uart.o(i.palUartGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = palUartGetNum &rArr; PalSysAssertTrap &rArr; PalLedOn &rArr; LED_On &rArr; MXC_GPIO_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysAssertTrap
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartInit
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartGetState
</UL>

<P><STRONG><a name="[359]"></a>EccPoint_double_jacobian</STRONG> (Thumb, 274 bytes, Stack size 88 bytes, uecc_ll.o(i.EccPoint_double_jacobian))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
</UL>

<P><STRONG><a name="[363]"></a>EccPoint_isZero</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uecc_ll.o(i.EccPoint_isZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EccPoint_isZero
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
</UL>

<P><STRONG><a name="[364]"></a>EccPoint_mult</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, uecc_ll.o(i.EccPoint_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = EccPoint_mult &rArr; XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_testBit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_continue
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
</UL>

<P><STRONG><a name="[367]"></a>XYcZ_add</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, uecc_ll.o(i.XYcZ_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = XYcZ_add &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[366]"></a>XYcZ_addC</STRONG> (Thumb, 230 bytes, Stack size 120 bytes, uecc_ll.o(i.XYcZ_addC))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = XYcZ_addC &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[365]"></a>XYcZ_initial_double</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, uecc_ll.o(i.XYcZ_initial_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = XYcZ_initial_double &rArr; EccPoint_double_jacobian &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[369]"></a>apply_z</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, uecc_ll.o(i.apply_z))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = apply_z &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[650]"></a>curve_x_side</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, uecc_ll.o(i.curve_x_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = curve_x_side &rArr; vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
</UL>

<P><STRONG><a name="[f]"></a>default_RNG</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uecc_ll.o(i.default_RNG))
<BR>[Address Reference Count : 1]<UL><LI> uecc_ll.o(.data)
</UL>
<P><STRONG><a name="[81c]"></a>mul2add</STRONG> (Thumb, 124 bytes, Stack size 52 bytes, uecc_ll.o(i.mul2add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mul2add
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
</UL>

<P><STRONG><a name="[81b]"></a>muladd</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, uecc_ll.o(i.muladd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
</UL>

<P><STRONG><a name="[360]"></a>vli_add</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, uecc_ll.o(i.vli_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_add
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_start
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[816]"></a>vli_bytesToNative</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, uecc_ll.o(i.vli_bytesToNative))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vli_bytesToNative
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_start
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_start
</UL>

<P><STRONG><a name="[5c5]"></a>vli_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uecc_ll.o(i.vli_clear))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[815]"></a>vli_cmp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uecc_ll.o(i.vli_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[35a]"></a>vli_isZero</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uecc_ll.o(i.vli_isZero))
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_start
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_continue
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_isZero
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[817]"></a>vli_mmod_fast</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, uecc_ll.o(i.vli_mmod_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mmod_fast &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>

<P><STRONG><a name="[35d]"></a>vli_modAdd</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uecc_ll.o(i.vli_modAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vli_modAdd &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[368]"></a>vli_modInv</STRONG> (Thumb, 376 bytes, Stack size 152 bytes, uecc_ll.o(i.vli_modInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = vli_modInv &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_set
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_rshift1
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_isZero
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_cmp
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
</UL>

<P><STRONG><a name="[35c]"></a>vli_modMult_fast</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, uecc_ll.o(i.vli_modMult_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = vli_modMult_fast &rArr; vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mult
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[35b]"></a>vli_modSquare_fast</STRONG> (Thumb, 28 bytes, Stack size 80 bytes, uecc_ll.o(i.vli_modSquare_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = vli_modSquare_fast &rArr; vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_square
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_valid_public_key_ll
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[35e]"></a>vli_modSub</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, uecc_ll.o(i.vli_modSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vli_modSub &rArr; vli_add
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_add
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve_x_side
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[819]"></a>vli_mult</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, uecc_ll.o(i.vli_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vli_mult &rArr; muladd
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modMult_fast
</UL>

<P><STRONG><a name="[814]"></a>vli_nativeToBytes</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, uecc_ll.o(i.vli_nativeToBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vli_nativeToBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_shared_secret_complete
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_make_key_complete
</UL>

<P><STRONG><a name="[361]"></a>vli_rshift1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uecc_ll.o(i.vli_rshift1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_rshift1
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
</UL>

<P><STRONG><a name="[362]"></a>vli_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uecc_ll.o(i.vli_set))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[81a]"></a>vli_square</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, uecc_ll.o(i.vli_square))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vli_square &rArr; mul2add
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul2add
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSquare_fast
</UL>

<P><STRONG><a name="[818]"></a>vli_sub</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, uecc_ll.o(i.vli_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vli_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modSub
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modAdd
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast
</UL>

<P><STRONG><a name="[35f]"></a>vli_testBit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uecc_ll.o(i.vli_testBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vli_testBit
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_double_jacobian
</UL>

<P><STRONG><a name="[e6]"></a>wsfBufIoUartRxHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wsf_bufio.o(i.wsfBufIoUartRxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wsfBufIoUartRxHandler &rArr; PalUartReadData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wsf_bufio.o(i.WsfBufIoUartInit)
</UL>
<P><STRONG><a name="[5a6]"></a>wsfBufIoUartTxBufCount</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wsf_bufio.o(i.wsfBufIoUartTxBufCount))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxHandler
</UL>

<P><STRONG><a name="[e7]"></a>wsfBufIoUartTxHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wsf_bufio.o(i.wsfBufIoUartTxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wsfBufIoUartTxHandler &rArr; wsfBufIoUartTxStart &rArr; PalUartWriteData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsExit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfCsEnter
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxStart
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxBufCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wsf_bufio.o(i.WsfBufIoUartInit)
</UL>
<P><STRONG><a name="[5a7]"></a>wsfBufIoUartTxStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wsf_bufio.o(i.wsfBufIoUartTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wsfBufIoUartTxStart &rArr; PalUartWriteData &rArr; MXC_UART_TransactionAsync &rArr; MXC_UART_RevB_TransactionAsync &rArr; MXC_UART_WriteTXFIFO &rArr; MXC_UART_RevB_WriteTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalUartWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfBufIoWrite
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfBufIoUartTxHandler
</UL>

<P><STRONG><a name="[5c1]"></a>wsfTimerInsert</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wsf_timer.o(i.wsfTimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wsfTimerInsert &rArr; WsfQueueInsert &rArr; WsfQueueEnq &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueInsert
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartMs
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStartSec
</UL>

<P><STRONG><a name="[5bd]"></a>wsfTimerNextExpiration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wsf_timer.o(i.wsfTimerNextExpiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wsfTimerNextExpiration &rArr; WsfTaskUnlock &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskUnlock
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTaskLock
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[5c3]"></a>wsfTimerRemove</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wsf_timer.o(i.wsfTimerRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wsfTimerRemove &rArr; WsfQueueRemove &rArr; WsfCsExit
</UL>
<BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfQueueRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerStop
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wsfTimerInsert
</UL>

<P><STRONG><a name="[5be]"></a>wsfTimerTicksToRtc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wsf_timer.o(i.wsfTimerTicksToRtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wsfTimerTicksToRtc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WsfTimerSleep
</UL>

<P><STRONG><a name="[53b]"></a>printFmtInt</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, print.o(i.printFmtInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printFmtInt
</UL>
<BR>[Calls]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVsn
</UL>

<P><STRONG><a name="[53a]"></a>printParseInt</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, print.o(i.printParseInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = printParseInt
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintVsn
</UL>

<P><STRONG><a name="[11]"></a>terminalCommandEchoHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, terminal.o(i.terminalCommandEchoHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = terminalCommandEchoHandler &rArr; TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>terminalCommandHelpHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, terminal.o(i.terminalCommandHelpHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = terminalCommandHelpHandler &rArr; TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal.o(.data)
</UL>
<P><STRONG><a name="[59b]"></a>terminalExecute</STRONG> (Thumb, 378 bytes, Stack size 72 bytes, terminal.o(i.terminalExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = terminalExecute &rArr; TerminalTxStr &rArr; TerminalTx
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalTxStr
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TerminalHandler
</UL>

<P><STRONG><a name="[434]"></a>memcpy32r</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, aes_revb.o(i.memcpy32r))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpy32r
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_AES_RevB_SetExtKey
</UL>

<P><STRONG><a name="[20e]"></a>MXC_busy_flc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flc_reva.o(.flashprog))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write128
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_MassErase
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Busy
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_prepare_flc
</UL>

<P><STRONG><a name="[20d]"></a>MXC_prepare_flc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, flc_reva.o(.flashprog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_prepare_flc
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_busy_flc
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write128
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_Write32
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_PageErase
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FLC_RevA_MassErase
</UL>

<P><STRONG><a name="[47c]"></a>MXC_ICC_Ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icc_reva.o(i.MXC_ICC_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_ICC_RevA_Enable
</UL>

<P><STRONG><a name="[444]"></a>MXC_DelayInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mxc_delay.o(i.MXC_DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAsync
</UL>

<P><STRONG><a name="[4ea]"></a>palBbBleRxCancel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pal_bb_ble.o(i.palBbBleRxCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = palBbBleRxCancel &rArr; llc_api_rx_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_register_callback
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_rx_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>

<P><STRONG><a name="[4fb]"></a>palBbBleRxTIFS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pal_bb_ble.o(i.palBbBleRxTIFS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = palBbBleRxTIFS
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxTifsData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4ed]"></a>palBbBleRxTIFSRestore</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pal_bb_ble.o(i.palBbBleRxTIFSRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = palBbBleRxTIFSRestore
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleTxData
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleRxData
</UL>

<P><STRONG><a name="[4eb]"></a>palBbBleTxCancel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pal_bb_ble.o(i.palBbBleTxCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = palBbBleTxCancel &rArr; llc_api_tx_cancel &rArr; llc_api_tx_ldo_done &rArr; MXC_FLC_UnlockInfoBlock &rArr; MXC_FLC_ME17_UnlockInfoBlock &rArr; MXC_FLC_RevB_UnlockInfoBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_register_callback
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_tx_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelTifs
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalBbBleCancelData
</UL>

<P><STRONG><a name="[7d8]"></a>timer_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc_api_timer.o(i.timer_set))
<BR><BR>[Calls]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_trx_timer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_protocol_timer_setup
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_api_timer_config_set
</UL>

<P><STRONG><a name="[2d5]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbb_intc.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SIG_DET_IRQHandler
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_clear_pending_rx_ints
</UL>

<P><STRONG><a name="[2d6]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbb_intc.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SIG_DET_IRQHandler
</UL>

<P><STRONG><a name="[2d7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbb_intc.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_TX_DONE_IRQHandler
</UL>

<P><STRONG><a name="[2d4]"></a>dbb_clear_pending_rx_ints</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dbb_intc.o(i.dbb_clear_pending_rx_ints))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_clear_pending_rx_ints
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_intc_manual_sfd_to
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_SFD_TO_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_RX_RCVD_IRQHandler
</UL>

<P><STRONG><a name="[680]"></a>dbb_seq_tx_enable_setup</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sequencer_ext.o(i.dbb_seq_tx_enable_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dbb_seq_tx_enable_setup &rArr; dbb_seq_update_channel_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_get_rfpower
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_update_channel_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_init
</UL>

<P><STRONG><a name="[681]"></a>dbb_seq_update_channel_rx</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, sequencer_ext.o(i.dbb_seq_update_channel_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbb_seq_update_channel_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_select_rf_channel
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_init
</UL>

<P><STRONG><a name="[683]"></a>dbb_seq_update_channel_tx</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sequencer_ext.o(i.dbb_seq_update_channel_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbb_seq_update_channel_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan2g_trx_get_phy
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_select_rf_channel
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_seq_tx_enable_setup
</UL>

<P><STRONG><a name="[5d5]"></a>abs_err</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_config.o(i.abs_err))
<BR><BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amp_bin_search
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_channel_map
</UL>

<P><STRONG><a name="[64e]"></a>fill_channel_map</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, board_config.o(i.fill_channel_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fill_channel_map
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_err
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ch_map
</UL>

<P><STRONG><a name="[7e2]"></a>iq_capture</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, board_config.o(i.iq_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iq_capture
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_amp
</UL>

<P><STRONG><a name="[7e3]"></a>iq_capture2</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, board_config.o(i.iq_capture2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iq_capture2
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meas_freq
</UL>

<P><STRONG><a name="[62a]"></a>set_pan2g_afe_lpf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pan2g_config.o(i.set_pan2g_afe_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_pan2g_afe_lpf &rArr; dbb_spim_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_write
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbb_spim_read
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_standard_speed
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_high_speed
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_coded_s2
</UL>

<P><STRONG><a name="[5c7]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[5c9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
